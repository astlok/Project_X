// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transition.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transition_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transition_2eproto;
namespace trans {
class NewBotMessage;
class NewBotMessageDefaultTypeInternal;
extern NewBotMessageDefaultTypeInternal _NewBotMessage_default_instance_;
class NewBulletMessage;
class NewBulletMessageDefaultTypeInternal;
extern NewBulletMessageDefaultTypeInternal _NewBulletMessage_default_instance_;
class NewPlayerMessage;
class NewPlayerMessageDefaultTypeInternal;
extern NewPlayerMessageDefaultTypeInternal _NewPlayerMessage_default_instance_;
class ServerToUserLobbyWaitingMessage;
class ServerToUserLobbyWaitingMessageDefaultTypeInternal;
extern ServerToUserLobbyWaitingMessageDefaultTypeInternal _ServerToUserLobbyWaitingMessage_default_instance_;
class ServerToUserMessage;
class ServerToUserMessageDefaultTypeInternal;
extern ServerToUserMessageDefaultTypeInternal _ServerToUserMessage_default_instance_;
class ServerToUserVectorMessage;
class ServerToUserVectorMessageDefaultTypeInternal;
extern ServerToUserVectorMessageDefaultTypeInternal _ServerToUserVectorMessage_default_instance_;
class SessionCreatedMessage;
class SessionCreatedMessageDefaultTypeInternal;
extern SessionCreatedMessageDefaultTypeInternal _SessionCreatedMessage_default_instance_;
class UpdateBotMessage;
class UpdateBotMessageDefaultTypeInternal;
extern UpdateBotMessageDefaultTypeInternal _UpdateBotMessage_default_instance_;
class UpdateBulletMessage;
class UpdateBulletMessageDefaultTypeInternal;
extern UpdateBulletMessageDefaultTypeInternal _UpdateBulletMessage_default_instance_;
class UpdateBulletMessage_Direction;
class UpdateBulletMessage_DirectionDefaultTypeInternal;
extern UpdateBulletMessage_DirectionDefaultTypeInternal _UpdateBulletMessage_Direction_default_instance_;
class UpdatePlayerMessage;
class UpdatePlayerMessageDefaultTypeInternal;
extern UpdatePlayerMessageDefaultTypeInternal _UpdatePlayerMessage_default_instance_;
class UpdatePlayerMessage_Direction;
class UpdatePlayerMessage_DirectionDefaultTypeInternal;
extern UpdatePlayerMessage_DirectionDefaultTypeInternal _UpdatePlayerMessage_Direction_default_instance_;
class UpdatePlayerMessage_FireDirection;
class UpdatePlayerMessage_FireDirectionDefaultTypeInternal;
extern UpdatePlayerMessage_FireDirectionDefaultTypeInternal _UpdatePlayerMessage_FireDirection_default_instance_;
class UserInitMessage;
class UserInitMessageDefaultTypeInternal;
extern UserInitMessageDefaultTypeInternal _UserInitMessage_default_instance_;
class UserToServerLobbyWaitingMessage;
class UserToServerLobbyWaitingMessageDefaultTypeInternal;
extern UserToServerLobbyWaitingMessageDefaultTypeInternal _UserToServerLobbyWaitingMessage_default_instance_;
class UserToServerMessage;
class UserToServerMessageDefaultTypeInternal;
extern UserToServerMessageDefaultTypeInternal _UserToServerMessage_default_instance_;
class UserToServerMessage_BulletDirection;
class UserToServerMessage_BulletDirectionDefaultTypeInternal;
extern UserToServerMessage_BulletDirectionDefaultTypeInternal _UserToServerMessage_BulletDirection_default_instance_;
class UserToServerMessage_Direction;
class UserToServerMessage_DirectionDefaultTypeInternal;
extern UserToServerMessage_DirectionDefaultTypeInternal _UserToServerMessage_Direction_default_instance_;
class UserToServerMessage_Rect;
class UserToServerMessage_RectDefaultTypeInternal;
extern UserToServerMessage_RectDefaultTypeInternal _UserToServerMessage_Rect_default_instance_;
class UserToServerMessage_Weapon;
class UserToServerMessage_WeaponDefaultTypeInternal;
extern UserToServerMessage_WeaponDefaultTypeInternal _UserToServerMessage_Weapon_default_instance_;
}  // namespace trans
PROTOBUF_NAMESPACE_OPEN
template<> ::trans::NewBotMessage* Arena::CreateMaybeMessage<::trans::NewBotMessage>(Arena*);
template<> ::trans::NewBulletMessage* Arena::CreateMaybeMessage<::trans::NewBulletMessage>(Arena*);
template<> ::trans::NewPlayerMessage* Arena::CreateMaybeMessage<::trans::NewPlayerMessage>(Arena*);
template<> ::trans::ServerToUserLobbyWaitingMessage* Arena::CreateMaybeMessage<::trans::ServerToUserLobbyWaitingMessage>(Arena*);
template<> ::trans::ServerToUserMessage* Arena::CreateMaybeMessage<::trans::ServerToUserMessage>(Arena*);
template<> ::trans::ServerToUserVectorMessage* Arena::CreateMaybeMessage<::trans::ServerToUserVectorMessage>(Arena*);
template<> ::trans::SessionCreatedMessage* Arena::CreateMaybeMessage<::trans::SessionCreatedMessage>(Arena*);
template<> ::trans::UpdateBotMessage* Arena::CreateMaybeMessage<::trans::UpdateBotMessage>(Arena*);
template<> ::trans::UpdateBulletMessage* Arena::CreateMaybeMessage<::trans::UpdateBulletMessage>(Arena*);
template<> ::trans::UpdateBulletMessage_Direction* Arena::CreateMaybeMessage<::trans::UpdateBulletMessage_Direction>(Arena*);
template<> ::trans::UpdatePlayerMessage* Arena::CreateMaybeMessage<::trans::UpdatePlayerMessage>(Arena*);
template<> ::trans::UpdatePlayerMessage_Direction* Arena::CreateMaybeMessage<::trans::UpdatePlayerMessage_Direction>(Arena*);
template<> ::trans::UpdatePlayerMessage_FireDirection* Arena::CreateMaybeMessage<::trans::UpdatePlayerMessage_FireDirection>(Arena*);
template<> ::trans::UserInitMessage* Arena::CreateMaybeMessage<::trans::UserInitMessage>(Arena*);
template<> ::trans::UserToServerLobbyWaitingMessage* Arena::CreateMaybeMessage<::trans::UserToServerLobbyWaitingMessage>(Arena*);
template<> ::trans::UserToServerMessage* Arena::CreateMaybeMessage<::trans::UserToServerMessage>(Arena*);
template<> ::trans::UserToServerMessage_BulletDirection* Arena::CreateMaybeMessage<::trans::UserToServerMessage_BulletDirection>(Arena*);
template<> ::trans::UserToServerMessage_Direction* Arena::CreateMaybeMessage<::trans::UserToServerMessage_Direction>(Arena*);
template<> ::trans::UserToServerMessage_Rect* Arena::CreateMaybeMessage<::trans::UserToServerMessage_Rect>(Arena*);
template<> ::trans::UserToServerMessage_Weapon* Arena::CreateMaybeMessage<::trans::UserToServerMessage_Weapon>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace trans {

enum UserToServerMessage_MessageType : int {
  UserToServerMessage_MessageType_Standby = 0,
  UserToServerMessage_MessageType_Move = 1,
  UserToServerMessage_MessageType_Wall = 2,
  UserToServerMessage_MessageType_Lava = 3,
  UserToServerMessage_MessageType_Spike = 4,
  UserToServerMessage_MessageType_UserName = 5,
  UserToServerMessage_MessageType_UserToServerMessage_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserToServerMessage_MessageType_UserToServerMessage_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserToServerMessage_MessageType_IsValid(int value);
constexpr UserToServerMessage_MessageType UserToServerMessage_MessageType_MessageType_MIN = UserToServerMessage_MessageType_Standby;
constexpr UserToServerMessage_MessageType UserToServerMessage_MessageType_MessageType_MAX = UserToServerMessage_MessageType_UserName;
constexpr int UserToServerMessage_MessageType_MessageType_ARRAYSIZE = UserToServerMessage_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserToServerMessage_MessageType_descriptor();
template<typename T>
inline const std::string& UserToServerMessage_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserToServerMessage_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserToServerMessage_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserToServerMessage_MessageType_descriptor(), enum_t_value);
}
inline bool UserToServerMessage_MessageType_Parse(
    const std::string& name, UserToServerMessage_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserToServerMessage_MessageType>(
    UserToServerMessage_MessageType_descriptor(), name, value);
}
enum UserInitMessage_Action : int {
  UserInitMessage_Action_Create = 0,
  UserInitMessage_Action_Join = 1,
  UserInitMessage_Action_Go = 3,
  UserInitMessage_Action_UserInitMessage_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserInitMessage_Action_UserInitMessage_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserInitMessage_Action_IsValid(int value);
constexpr UserInitMessage_Action UserInitMessage_Action_Action_MIN = UserInitMessage_Action_Create;
constexpr UserInitMessage_Action UserInitMessage_Action_Action_MAX = UserInitMessage_Action_Go;
constexpr int UserInitMessage_Action_Action_ARRAYSIZE = UserInitMessage_Action_Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserInitMessage_Action_descriptor();
template<typename T>
inline const std::string& UserInitMessage_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserInitMessage_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserInitMessage_Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserInitMessage_Action_descriptor(), enum_t_value);
}
inline bool UserInitMessage_Action_Parse(
    const std::string& name, UserInitMessage_Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserInitMessage_Action>(
    UserInitMessage_Action_descriptor(), name, value);
}
enum ServerToUserMessage_MessageType : int {
  ServerToUserMessage_MessageType_NewPlayer = 0,
  ServerToUserMessage_MessageType_UpdatePlayer = 1,
  ServerToUserMessage_MessageType_NewBullet = 2,
  ServerToUserMessage_MessageType_UpdateBullet = 3,
  ServerToUserMessage_MessageType_NewBot = 4,
  ServerToUserMessage_MessageType_UpdateBot = 5,
  ServerToUserMessage_MessageType_ServerToUserMessage_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServerToUserMessage_MessageType_ServerToUserMessage_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServerToUserMessage_MessageType_IsValid(int value);
constexpr ServerToUserMessage_MessageType ServerToUserMessage_MessageType_MessageType_MIN = ServerToUserMessage_MessageType_NewPlayer;
constexpr ServerToUserMessage_MessageType ServerToUserMessage_MessageType_MessageType_MAX = ServerToUserMessage_MessageType_UpdateBot;
constexpr int ServerToUserMessage_MessageType_MessageType_ARRAYSIZE = ServerToUserMessage_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerToUserMessage_MessageType_descriptor();
template<typename T>
inline const std::string& ServerToUserMessage_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerToUserMessage_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerToUserMessage_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerToUserMessage_MessageType_descriptor(), enum_t_value);
}
inline bool ServerToUserMessage_MessageType_Parse(
    const std::string& name, ServerToUserMessage_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerToUserMessage_MessageType>(
    ServerToUserMessage_MessageType_descriptor(), name, value);
}
// ===================================================================

class UserToServerMessage_Direction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans.UserToServerMessage.Direction) */ {
 public:
  inline UserToServerMessage_Direction() : UserToServerMessage_Direction(nullptr) {};
  virtual ~UserToServerMessage_Direction();

  UserToServerMessage_Direction(const UserToServerMessage_Direction& from);
  UserToServerMessage_Direction(UserToServerMessage_Direction&& from) noexcept
    : UserToServerMessage_Direction() {
    *this = ::std::move(from);
  }

  inline UserToServerMessage_Direction& operator=(const UserToServerMessage_Direction& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserToServerMessage_Direction& operator=(UserToServerMessage_Direction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserToServerMessage_Direction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserToServerMessage_Direction* internal_default_instance() {
    return reinterpret_cast<const UserToServerMessage_Direction*>(
               &_UserToServerMessage_Direction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserToServerMessage_Direction& a, UserToServerMessage_Direction& b) {
    a.Swap(&b);
  }
  inline void Swap(UserToServerMessage_Direction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserToServerMessage_Direction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserToServerMessage_Direction* New() const final {
    return CreateMaybeMessage<UserToServerMessage_Direction>(nullptr);
  }

  UserToServerMessage_Direction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserToServerMessage_Direction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserToServerMessage_Direction& from);
  void MergeFrom(const UserToServerMessage_Direction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserToServerMessage_Direction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans.UserToServerMessage.Direction";
  }
  protected:
  explicit UserToServerMessage_Direction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transition_2eproto);
    return ::descriptor_table_transition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpFieldNumber = 1,
    kLeftFieldNumber = 2,
    kRightFieldNumber = 3,
    kDownFieldNumber = 4,
    kFireFieldNumber = 5,
  };
  // bool up = 1;
  void clear_up();
  bool up() const;
  void set_up(bool value);
  private:
  bool _internal_up() const;
  void _internal_set_up(bool value);
  public:

  // bool left = 2;
  void clear_left();
  bool left() const;
  void set_left(bool value);
  private:
  bool _internal_left() const;
  void _internal_set_left(bool value);
  public:

  // bool right = 3;
  void clear_right();
  bool right() const;
  void set_right(bool value);
  private:
  bool _internal_right() const;
  void _internal_set_right(bool value);
  public:

  // bool down = 4;
  void clear_down();
  bool down() const;
  void set_down(bool value);
  private:
  bool _internal_down() const;
  void _internal_set_down(bool value);
  public:

  // bool fire = 5;
  void clear_fire();
  bool fire() const;
  void set_fire(bool value);
  private:
  bool _internal_fire() const;
  void _internal_set_fire(bool value);
  public:

  // @@protoc_insertion_point(class_scope:trans.UserToServerMessage.Direction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool up_;
  bool left_;
  bool right_;
  bool down_;
  bool fire_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transition_2eproto;
};
// -------------------------------------------------------------------

class UserToServerMessage_BulletDirection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans.UserToServerMessage.BulletDirection) */ {
 public:
  inline UserToServerMessage_BulletDirection() : UserToServerMessage_BulletDirection(nullptr) {};
  virtual ~UserToServerMessage_BulletDirection();

  UserToServerMessage_BulletDirection(const UserToServerMessage_BulletDirection& from);
  UserToServerMessage_BulletDirection(UserToServerMessage_BulletDirection&& from) noexcept
    : UserToServerMessage_BulletDirection() {
    *this = ::std::move(from);
  }

  inline UserToServerMessage_BulletDirection& operator=(const UserToServerMessage_BulletDirection& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserToServerMessage_BulletDirection& operator=(UserToServerMessage_BulletDirection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserToServerMessage_BulletDirection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserToServerMessage_BulletDirection* internal_default_instance() {
    return reinterpret_cast<const UserToServerMessage_BulletDirection*>(
               &_UserToServerMessage_BulletDirection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserToServerMessage_BulletDirection& a, UserToServerMessage_BulletDirection& b) {
    a.Swap(&b);
  }
  inline void Swap(UserToServerMessage_BulletDirection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserToServerMessage_BulletDirection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserToServerMessage_BulletDirection* New() const final {
    return CreateMaybeMessage<UserToServerMessage_BulletDirection>(nullptr);
  }

  UserToServerMessage_BulletDirection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserToServerMessage_BulletDirection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserToServerMessage_BulletDirection& from);
  void MergeFrom(const UserToServerMessage_BulletDirection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserToServerMessage_BulletDirection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans.UserToServerMessage.BulletDirection";
  }
  protected:
  explicit UserToServerMessage_BulletDirection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transition_2eproto);
    return ::descriptor_table_transition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpFieldNumber = 1,
    kLeftFieldNumber = 2,
    kRightFieldNumber = 3,
    kDownFieldNumber = 4,
  };
  // bool up = 1;
  void clear_up();
  bool up() const;
  void set_up(bool value);
  private:
  bool _internal_up() const;
  void _internal_set_up(bool value);
  public:

  // bool left = 2;
  void clear_left();
  bool left() const;
  void set_left(bool value);
  private:
  bool _internal_left() const;
  void _internal_set_left(bool value);
  public:

  // bool right = 3;
  void clear_right();
  bool right() const;
  void set_right(bool value);
  private:
  bool _internal_right() const;
  void _internal_set_right(bool value);
  public:

  // bool down = 4;
  void clear_down();
  bool down() const;
  void set_down(bool value);
  private:
  bool _internal_down() const;
  void _internal_set_down(bool value);
  public:

  // @@protoc_insertion_point(class_scope:trans.UserToServerMessage.BulletDirection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool up_;
  bool left_;
  bool right_;
  bool down_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transition_2eproto;
};
// -------------------------------------------------------------------

class UserToServerMessage_Rect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans.UserToServerMessage.Rect) */ {
 public:
  inline UserToServerMessage_Rect() : UserToServerMessage_Rect(nullptr) {};
  virtual ~UserToServerMessage_Rect();

  UserToServerMessage_Rect(const UserToServerMessage_Rect& from);
  UserToServerMessage_Rect(UserToServerMessage_Rect&& from) noexcept
    : UserToServerMessage_Rect() {
    *this = ::std::move(from);
  }

  inline UserToServerMessage_Rect& operator=(const UserToServerMessage_Rect& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserToServerMessage_Rect& operator=(UserToServerMessage_Rect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserToServerMessage_Rect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserToServerMessage_Rect* internal_default_instance() {
    return reinterpret_cast<const UserToServerMessage_Rect*>(
               &_UserToServerMessage_Rect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserToServerMessage_Rect& a, UserToServerMessage_Rect& b) {
    a.Swap(&b);
  }
  inline void Swap(UserToServerMessage_Rect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserToServerMessage_Rect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserToServerMessage_Rect* New() const final {
    return CreateMaybeMessage<UserToServerMessage_Rect>(nullptr);
  }

  UserToServerMessage_Rect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserToServerMessage_Rect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserToServerMessage_Rect& from);
  void MergeFrom(const UserToServerMessage_Rect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserToServerMessage_Rect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans.UserToServerMessage.Rect";
  }
  protected:
  explicit UserToServerMessage_Rect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transition_2eproto);
    return ::descriptor_table_transition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kTopFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // uint64 left = 1;
  void clear_left();
  ::PROTOBUF_NAMESPACE_ID::uint64 left() const;
  void set_left(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_left() const;
  void _internal_set_left(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 top = 2;
  void clear_top();
  ::PROTOBUF_NAMESPACE_ID::uint64 top() const;
  void set_top(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_top() const;
  void _internal_set_top(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 width = 3;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint64 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 height = 4;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:trans.UserToServerMessage.Rect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 left_;
  ::PROTOBUF_NAMESPACE_ID::uint64 top_;
  ::PROTOBUF_NAMESPACE_ID::uint64 width_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transition_2eproto;
};
// -------------------------------------------------------------------

class UserToServerMessage_Weapon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans.UserToServerMessage.Weapon) */ {
 public:
  inline UserToServerMessage_Weapon() : UserToServerMessage_Weapon(nullptr) {};
  virtual ~UserToServerMessage_Weapon();

  UserToServerMessage_Weapon(const UserToServerMessage_Weapon& from);
  UserToServerMessage_Weapon(UserToServerMessage_Weapon&& from) noexcept
    : UserToServerMessage_Weapon() {
    *this = ::std::move(from);
  }

  inline UserToServerMessage_Weapon& operator=(const UserToServerMessage_Weapon& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserToServerMessage_Weapon& operator=(UserToServerMessage_Weapon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserToServerMessage_Weapon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserToServerMessage_Weapon* internal_default_instance() {
    return reinterpret_cast<const UserToServerMessage_Weapon*>(
               &_UserToServerMessage_Weapon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserToServerMessage_Weapon& a, UserToServerMessage_Weapon& b) {
    a.Swap(&b);
  }
  inline void Swap(UserToServerMessage_Weapon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserToServerMessage_Weapon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserToServerMessage_Weapon* New() const final {
    return CreateMaybeMessage<UserToServerMessage_Weapon>(nullptr);
  }

  UserToServerMessage_Weapon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserToServerMessage_Weapon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserToServerMessage_Weapon& from);
  void MergeFrom(const UserToServerMessage_Weapon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserToServerMessage_Weapon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans.UserToServerMessage.Weapon";
  }
  protected:
  explicit UserToServerMessage_Weapon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transition_2eproto);
    return ::descriptor_table_transition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPistolFieldNumber = 1,
    kAutomatFieldNumber = 2,
    kShotgunFieldNumber = 3,
  };
  // bool pistol = 1;
  void clear_pistol();
  bool pistol() const;
  void set_pistol(bool value);
  private:
  bool _internal_pistol() const;
  void _internal_set_pistol(bool value);
  public:

  // bool automat = 2;
  void clear_automat();
  bool automat() const;
  void set_automat(bool value);
  private:
  bool _internal_automat() const;
  void _internal_set_automat(bool value);
  public:

  // bool shotgun = 3;
  void clear_shotgun();
  bool shotgun() const;
  void set_shotgun(bool value);
  private:
  bool _internal_shotgun() const;
  void _internal_set_shotgun(bool value);
  public:

  // @@protoc_insertion_point(class_scope:trans.UserToServerMessage.Weapon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool pistol_;
  bool automat_;
  bool shotgun_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transition_2eproto;
};
// -------------------------------------------------------------------

class UserToServerMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans.UserToServerMessage) */ {
 public:
  inline UserToServerMessage() : UserToServerMessage(nullptr) {};
  virtual ~UserToServerMessage();

  UserToServerMessage(const UserToServerMessage& from);
  UserToServerMessage(UserToServerMessage&& from) noexcept
    : UserToServerMessage() {
    *this = ::std::move(from);
  }

  inline UserToServerMessage& operator=(const UserToServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserToServerMessage& operator=(UserToServerMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserToServerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserToServerMessage* internal_default_instance() {
    return reinterpret_cast<const UserToServerMessage*>(
               &_UserToServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserToServerMessage& a, UserToServerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UserToServerMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserToServerMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserToServerMessage* New() const final {
    return CreateMaybeMessage<UserToServerMessage>(nullptr);
  }

  UserToServerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserToServerMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserToServerMessage& from);
  void MergeFrom(const UserToServerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserToServerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans.UserToServerMessage";
  }
  protected:
  explicit UserToServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transition_2eproto);
    return ::descriptor_table_transition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserToServerMessage_Direction Direction;
  typedef UserToServerMessage_BulletDirection BulletDirection;
  typedef UserToServerMessage_Rect Rect;
  typedef UserToServerMessage_Weapon Weapon;

  typedef UserToServerMessage_MessageType MessageType;
  static constexpr MessageType Standby =
    UserToServerMessage_MessageType_Standby;
  static constexpr MessageType Move =
    UserToServerMessage_MessageType_Move;
  static constexpr MessageType Wall =
    UserToServerMessage_MessageType_Wall;
  static constexpr MessageType Lava =
    UserToServerMessage_MessageType_Lava;
  static constexpr MessageType Spike =
    UserToServerMessage_MessageType_Spike;
  static constexpr MessageType UserName =
    UserToServerMessage_MessageType_UserName;
  static inline bool MessageType_IsValid(int value) {
    return UserToServerMessage_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    UserToServerMessage_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    UserToServerMessage_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    UserToServerMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return UserToServerMessage_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return UserToServerMessage_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(const std::string& name,
      MessageType* value) {
    return UserToServerMessage_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 6,
    kDirectionFieldNumber = 2,
    kBDirectionFieldNumber = 3,
    kRectFieldNumber = 4,
    kWeaponFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // string username = 6;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .trans.UserToServerMessage.Direction direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::trans::UserToServerMessage_Direction& direction() const;
  ::trans::UserToServerMessage_Direction* release_direction();
  ::trans::UserToServerMessage_Direction* mutable_direction();
  void set_allocated_direction(::trans::UserToServerMessage_Direction* direction);
  private:
  const ::trans::UserToServerMessage_Direction& _internal_direction() const;
  ::trans::UserToServerMessage_Direction* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::trans::UserToServerMessage_Direction* direction);
  ::trans::UserToServerMessage_Direction* unsafe_arena_release_direction();

  // .trans.UserToServerMessage.BulletDirection b_direction = 3;
  bool has_b_direction() const;
  private:
  bool _internal_has_b_direction() const;
  public:
  void clear_b_direction();
  const ::trans::UserToServerMessage_BulletDirection& b_direction() const;
  ::trans::UserToServerMessage_BulletDirection* release_b_direction();
  ::trans::UserToServerMessage_BulletDirection* mutable_b_direction();
  void set_allocated_b_direction(::trans::UserToServerMessage_BulletDirection* b_direction);
  private:
  const ::trans::UserToServerMessage_BulletDirection& _internal_b_direction() const;
  ::trans::UserToServerMessage_BulletDirection* _internal_mutable_b_direction();
  public:
  void unsafe_arena_set_allocated_b_direction(
      ::trans::UserToServerMessage_BulletDirection* b_direction);
  ::trans::UserToServerMessage_BulletDirection* unsafe_arena_release_b_direction();

  // .trans.UserToServerMessage.Rect rect = 4;
  bool has_rect() const;
  private:
  bool _internal_has_rect() const;
  public:
  void clear_rect();
  const ::trans::UserToServerMessage_Rect& rect() const;
  ::trans::UserToServerMessage_Rect* release_rect();
  ::trans::UserToServerMessage_Rect* mutable_rect();
  void set_allocated_rect(::trans::UserToServerMessage_Rect* rect);
  private:
  const ::trans::UserToServerMessage_Rect& _internal_rect() const;
  ::trans::UserToServerMessage_Rect* _internal_mutable_rect();
  public:
  void unsafe_arena_set_allocated_rect(
      ::trans::UserToServerMessage_Rect* rect);
  ::trans::UserToServerMessage_Rect* unsafe_arena_release_rect();

  // .trans.UserToServerMessage.Weapon weapon = 5;
  bool has_weapon() const;
  private:
  bool _internal_has_weapon() const;
  public:
  void clear_weapon();
  const ::trans::UserToServerMessage_Weapon& weapon() const;
  ::trans::UserToServerMessage_Weapon* release_weapon();
  ::trans::UserToServerMessage_Weapon* mutable_weapon();
  void set_allocated_weapon(::trans::UserToServerMessage_Weapon* weapon);
  private:
  const ::trans::UserToServerMessage_Weapon& _internal_weapon() const;
  ::trans::UserToServerMessage_Weapon* _internal_mutable_weapon();
  public:
  void unsafe_arena_set_allocated_weapon(
      ::trans::UserToServerMessage_Weapon* weapon);
  ::trans::UserToServerMessage_Weapon* unsafe_arena_release_weapon();

  // .trans.UserToServerMessage.MessageType type = 1;
  void clear_type();
  ::trans::UserToServerMessage_MessageType type() const;
  void set_type(::trans::UserToServerMessage_MessageType value);
  private:
  ::trans::UserToServerMessage_MessageType _internal_type() const;
  void _internal_set_type(::trans::UserToServerMessage_MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:trans.UserToServerMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::trans::UserToServerMessage_Direction* direction_;
  ::trans::UserToServerMessage_BulletDirection* b_direction_;
  ::trans::UserToServerMessage_Rect* rect_;
  ::trans::UserToServerMessage_Weapon* weapon_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transition_2eproto;
};
// -------------------------------------------------------------------

class SessionCreatedMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans.SessionCreatedMessage) */ {
 public:
  inline SessionCreatedMessage() : SessionCreatedMessage(nullptr) {};
  virtual ~SessionCreatedMessage();

  SessionCreatedMessage(const SessionCreatedMessage& from);
  SessionCreatedMessage(SessionCreatedMessage&& from) noexcept
    : SessionCreatedMessage() {
    *this = ::std::move(from);
  }

  inline SessionCreatedMessage& operator=(const SessionCreatedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionCreatedMessage& operator=(SessionCreatedMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionCreatedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionCreatedMessage* internal_default_instance() {
    return reinterpret_cast<const SessionCreatedMessage*>(
               &_SessionCreatedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SessionCreatedMessage& a, SessionCreatedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionCreatedMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionCreatedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionCreatedMessage* New() const final {
    return CreateMaybeMessage<SessionCreatedMessage>(nullptr);
  }

  SessionCreatedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionCreatedMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionCreatedMessage& from);
  void MergeFrom(const SessionCreatedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionCreatedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans.SessionCreatedMessage";
  }
  protected:
  explicit SessionCreatedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transition_2eproto);
    return ::descriptor_table_transition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // int32 session_id = 1;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::int32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trans.SessionCreatedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transition_2eproto;
};
// -------------------------------------------------------------------

class UserInitMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans.UserInitMessage) */ {
 public:
  inline UserInitMessage() : UserInitMessage(nullptr) {};
  virtual ~UserInitMessage();

  UserInitMessage(const UserInitMessage& from);
  UserInitMessage(UserInitMessage&& from) noexcept
    : UserInitMessage() {
    *this = ::std::move(from);
  }

  inline UserInitMessage& operator=(const UserInitMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInitMessage& operator=(UserInitMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInitMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInitMessage* internal_default_instance() {
    return reinterpret_cast<const UserInitMessage*>(
               &_UserInitMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserInitMessage& a, UserInitMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInitMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInitMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInitMessage* New() const final {
    return CreateMaybeMessage<UserInitMessage>(nullptr);
  }

  UserInitMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInitMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInitMessage& from);
  void MergeFrom(const UserInitMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInitMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans.UserInitMessage";
  }
  protected:
  explicit UserInitMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transition_2eproto);
    return ::descriptor_table_transition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserInitMessage_Action Action;
  static constexpr Action Create =
    UserInitMessage_Action_Create;
  static constexpr Action Join =
    UserInitMessage_Action_Join;
  static constexpr Action Go =
    UserInitMessage_Action_Go;
  static inline bool Action_IsValid(int value) {
    return UserInitMessage_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    UserInitMessage_Action_Action_MIN;
  static constexpr Action Action_MAX =
    UserInitMessage_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    UserInitMessage_Action_Action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Action_descriptor() {
    return UserInitMessage_Action_descriptor();
  }
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return UserInitMessage_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(const std::string& name,
      Action* value) {
    return UserInitMessage_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kMapNameFieldNumber = 4,
    kActionFieldNumber = 1,
    kSessionIdFieldNumber = 3,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string map_name = 4;
  void clear_map_name();
  const std::string& map_name() const;
  void set_map_name(const std::string& value);
  void set_map_name(std::string&& value);
  void set_map_name(const char* value);
  void set_map_name(const char* value, size_t size);
  std::string* mutable_map_name();
  std::string* release_map_name();
  void set_allocated_map_name(std::string* map_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_map_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_map_name(
      std::string* map_name);
  private:
  const std::string& _internal_map_name() const;
  void _internal_set_map_name(const std::string& value);
  std::string* _internal_mutable_map_name();
  public:

  // .trans.UserInitMessage.Action action = 1;
  void clear_action();
  ::trans::UserInitMessage_Action action() const;
  void set_action(::trans::UserInitMessage_Action value);
  private:
  ::trans::UserInitMessage_Action _internal_action() const;
  void _internal_set_action(::trans::UserInitMessage_Action value);
  public:

  // int32 session_id = 3;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::int32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trans.UserInitMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_name_;
  int action_;
  ::PROTOBUF_NAMESPACE_ID::int32 session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transition_2eproto;
};
// -------------------------------------------------------------------

class NewPlayerMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans.NewPlayerMessage) */ {
 public:
  inline NewPlayerMessage() : NewPlayerMessage(nullptr) {};
  virtual ~NewPlayerMessage();

  NewPlayerMessage(const NewPlayerMessage& from);
  NewPlayerMessage(NewPlayerMessage&& from) noexcept
    : NewPlayerMessage() {
    *this = ::std::move(from);
  }

  inline NewPlayerMessage& operator=(const NewPlayerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewPlayerMessage& operator=(NewPlayerMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewPlayerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewPlayerMessage* internal_default_instance() {
    return reinterpret_cast<const NewPlayerMessage*>(
               &_NewPlayerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NewPlayerMessage& a, NewPlayerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NewPlayerMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewPlayerMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewPlayerMessage* New() const final {
    return CreateMaybeMessage<NewPlayerMessage>(nullptr);
  }

  NewPlayerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewPlayerMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewPlayerMessage& from);
  void MergeFrom(const NewPlayerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewPlayerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans.NewPlayerMessage";
  }
  protected:
  explicit NewPlayerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transition_2eproto);
    return ::descriptor_table_transition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kMapNameFieldNumber = 5,
    kIdFieldNumber = 1,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kNameFieldNumber = 6,
    kHpFieldNumber = 7,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string map_name = 5;
  void clear_map_name();
  const std::string& map_name() const;
  void set_map_name(const std::string& value);
  void set_map_name(std::string&& value);
  void set_map_name(const char* value);
  void set_map_name(const char* value, size_t size);
  std::string* mutable_map_name();
  std::string* release_map_name();
  void set_allocated_map_name(std::string* map_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_map_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_map_name(
      std::string* map_name);
  private:
  const std::string& _internal_map_name() const;
  void _internal_set_map_name(const std::string& value);
  std::string* _internal_mutable_map_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 3;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 4;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // int32 name = 6;
  void clear_name();
  ::PROTOBUF_NAMESPACE_ID::int32 name() const;
  void set_name(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_name() const;
  void _internal_set_name(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hp = 7;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trans.NewPlayerMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float x_;
  float y_;
  ::PROTOBUF_NAMESPACE_ID::int32 name_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transition_2eproto;
};
// -------------------------------------------------------------------

class UpdatePlayerMessage_Direction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans.UpdatePlayerMessage.Direction) */ {
 public:
  inline UpdatePlayerMessage_Direction() : UpdatePlayerMessage_Direction(nullptr) {};
  virtual ~UpdatePlayerMessage_Direction();

  UpdatePlayerMessage_Direction(const UpdatePlayerMessage_Direction& from);
  UpdatePlayerMessage_Direction(UpdatePlayerMessage_Direction&& from) noexcept
    : UpdatePlayerMessage_Direction() {
    *this = ::std::move(from);
  }

  inline UpdatePlayerMessage_Direction& operator=(const UpdatePlayerMessage_Direction& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePlayerMessage_Direction& operator=(UpdatePlayerMessage_Direction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePlayerMessage_Direction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePlayerMessage_Direction* internal_default_instance() {
    return reinterpret_cast<const UpdatePlayerMessage_Direction*>(
               &_UpdatePlayerMessage_Direction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UpdatePlayerMessage_Direction& a, UpdatePlayerMessage_Direction& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePlayerMessage_Direction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePlayerMessage_Direction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePlayerMessage_Direction* New() const final {
    return CreateMaybeMessage<UpdatePlayerMessage_Direction>(nullptr);
  }

  UpdatePlayerMessage_Direction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePlayerMessage_Direction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePlayerMessage_Direction& from);
  void MergeFrom(const UpdatePlayerMessage_Direction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePlayerMessage_Direction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans.UpdatePlayerMessage.Direction";
  }
  protected:
  explicit UpdatePlayerMessage_Direction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transition_2eproto);
    return ::descriptor_table_transition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpFieldNumber = 1,
    kLeftFieldNumber = 2,
    kRightFieldNumber = 3,
    kDownFieldNumber = 4,
    kFireFieldNumber = 5,
  };
  // bool up = 1;
  void clear_up();
  bool up() const;
  void set_up(bool value);
  private:
  bool _internal_up() const;
  void _internal_set_up(bool value);
  public:

  // bool left = 2;
  void clear_left();
  bool left() const;
  void set_left(bool value);
  private:
  bool _internal_left() const;
  void _internal_set_left(bool value);
  public:

  // bool right = 3;
  void clear_right();
  bool right() const;
  void set_right(bool value);
  private:
  bool _internal_right() const;
  void _internal_set_right(bool value);
  public:

  // bool down = 4;
  void clear_down();
  bool down() const;
  void set_down(bool value);
  private:
  bool _internal_down() const;
  void _internal_set_down(bool value);
  public:

  // bool fire = 5;
  void clear_fire();
  bool fire() const;
  void set_fire(bool value);
  private:
  bool _internal_fire() const;
  void _internal_set_fire(bool value);
  public:

  // @@protoc_insertion_point(class_scope:trans.UpdatePlayerMessage.Direction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool up_;
  bool left_;
  bool right_;
  bool down_;
  bool fire_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transition_2eproto;
};
// -------------------------------------------------------------------

class UpdatePlayerMessage_FireDirection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans.UpdatePlayerMessage.FireDirection) */ {
 public:
  inline UpdatePlayerMessage_FireDirection() : UpdatePlayerMessage_FireDirection(nullptr) {};
  virtual ~UpdatePlayerMessage_FireDirection();

  UpdatePlayerMessage_FireDirection(const UpdatePlayerMessage_FireDirection& from);
  UpdatePlayerMessage_FireDirection(UpdatePlayerMessage_FireDirection&& from) noexcept
    : UpdatePlayerMessage_FireDirection() {
    *this = ::std::move(from);
  }

  inline UpdatePlayerMessage_FireDirection& operator=(const UpdatePlayerMessage_FireDirection& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePlayerMessage_FireDirection& operator=(UpdatePlayerMessage_FireDirection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePlayerMessage_FireDirection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePlayerMessage_FireDirection* internal_default_instance() {
    return reinterpret_cast<const UpdatePlayerMessage_FireDirection*>(
               &_UpdatePlayerMessage_FireDirection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UpdatePlayerMessage_FireDirection& a, UpdatePlayerMessage_FireDirection& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePlayerMessage_FireDirection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePlayerMessage_FireDirection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePlayerMessage_FireDirection* New() const final {
    return CreateMaybeMessage<UpdatePlayerMessage_FireDirection>(nullptr);
  }

  UpdatePlayerMessage_FireDirection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePlayerMessage_FireDirection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePlayerMessage_FireDirection& from);
  void MergeFrom(const UpdatePlayerMessage_FireDirection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePlayerMessage_FireDirection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans.UpdatePlayerMessage.FireDirection";
  }
  protected:
  explicit UpdatePlayerMessage_FireDirection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transition_2eproto);
    return ::descriptor_table_transition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFUpFieldNumber = 1,
    kFLeftFieldNumber = 2,
    kFRightFieldNumber = 3,
    kFDownFieldNumber = 4,
  };
  // bool f_up = 1;
  void clear_f_up();
  bool f_up() const;
  void set_f_up(bool value);
  private:
  bool _internal_f_up() const;
  void _internal_set_f_up(bool value);
  public:

  // bool f_left = 2;
  void clear_f_left();
  bool f_left() const;
  void set_f_left(bool value);
  private:
  bool _internal_f_left() const;
  void _internal_set_f_left(bool value);
  public:

  // bool f_right = 3;
  void clear_f_right();
  bool f_right() const;
  void set_f_right(bool value);
  private:
  bool _internal_f_right() const;
  void _internal_set_f_right(bool value);
  public:

  // bool f_down = 4;
  void clear_f_down();
  bool f_down() const;
  void set_f_down(bool value);
  private:
  bool _internal_f_down() const;
  void _internal_set_f_down(bool value);
  public:

  // @@protoc_insertion_point(class_scope:trans.UpdatePlayerMessage.FireDirection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool f_up_;
  bool f_left_;
  bool f_right_;
  bool f_down_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transition_2eproto;
};
// -------------------------------------------------------------------

class UpdatePlayerMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans.UpdatePlayerMessage) */ {
 public:
  inline UpdatePlayerMessage() : UpdatePlayerMessage(nullptr) {};
  virtual ~UpdatePlayerMessage();

  UpdatePlayerMessage(const UpdatePlayerMessage& from);
  UpdatePlayerMessage(UpdatePlayerMessage&& from) noexcept
    : UpdatePlayerMessage() {
    *this = ::std::move(from);
  }

  inline UpdatePlayerMessage& operator=(const UpdatePlayerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePlayerMessage& operator=(UpdatePlayerMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePlayerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePlayerMessage* internal_default_instance() {
    return reinterpret_cast<const UpdatePlayerMessage*>(
               &_UpdatePlayerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UpdatePlayerMessage& a, UpdatePlayerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePlayerMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePlayerMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePlayerMessage* New() const final {
    return CreateMaybeMessage<UpdatePlayerMessage>(nullptr);
  }

  UpdatePlayerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePlayerMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePlayerMessage& from);
  void MergeFrom(const UpdatePlayerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePlayerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans.UpdatePlayerMessage";
  }
  protected:
  explicit UpdatePlayerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transition_2eproto);
    return ::descriptor_table_transition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UpdatePlayerMessage_Direction Direction;
  typedef UpdatePlayerMessage_FireDirection FireDirection;

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 8,
    kDirectionFieldNumber = 4,
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kNameFieldNumber = 5,
    kStateFieldNumber = 6,
    kHpFieldNumber = 7,
  };
  // string username = 8;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .trans.UpdatePlayerMessage.Direction direction = 4;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::trans::UpdatePlayerMessage_Direction& direction() const;
  ::trans::UpdatePlayerMessage_Direction* release_direction();
  ::trans::UpdatePlayerMessage_Direction* mutable_direction();
  void set_allocated_direction(::trans::UpdatePlayerMessage_Direction* direction);
  private:
  const ::trans::UpdatePlayerMessage_Direction& _internal_direction() const;
  ::trans::UpdatePlayerMessage_Direction* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::trans::UpdatePlayerMessage_Direction* direction);
  ::trans::UpdatePlayerMessage_Direction* unsafe_arena_release_direction();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // int32 name = 5;
  void clear_name();
  ::PROTOBUF_NAMESPACE_ID::int32 name() const;
  void set_name(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_name() const;
  void _internal_set_name(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 6;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hp = 7;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trans.UpdatePlayerMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::trans::UpdatePlayerMessage_Direction* direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float x_;
  float y_;
  ::PROTOBUF_NAMESPACE_ID::int32 name_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transition_2eproto;
};
// -------------------------------------------------------------------

class NewBulletMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans.NewBulletMessage) */ {
 public:
  inline NewBulletMessage() : NewBulletMessage(nullptr) {};
  virtual ~NewBulletMessage();

  NewBulletMessage(const NewBulletMessage& from);
  NewBulletMessage(NewBulletMessage&& from) noexcept
    : NewBulletMessage() {
    *this = ::std::move(from);
  }

  inline NewBulletMessage& operator=(const NewBulletMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewBulletMessage& operator=(NewBulletMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewBulletMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewBulletMessage* internal_default_instance() {
    return reinterpret_cast<const NewBulletMessage*>(
               &_NewBulletMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(NewBulletMessage& a, NewBulletMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NewBulletMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewBulletMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewBulletMessage* New() const final {
    return CreateMaybeMessage<NewBulletMessage>(nullptr);
  }

  NewBulletMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewBulletMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewBulletMessage& from);
  void MergeFrom(const NewBulletMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewBulletMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans.NewBulletMessage";
  }
  protected:
  explicit NewBulletMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transition_2eproto);
    return ::descriptor_table_transition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapNameFieldNumber = 4,
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kNameFieldNumber = 5,
    kHpFieldNumber = 6,
    kPIdFieldNumber = 7,
  };
  // string map_name = 4;
  void clear_map_name();
  const std::string& map_name() const;
  void set_map_name(const std::string& value);
  void set_map_name(std::string&& value);
  void set_map_name(const char* value);
  void set_map_name(const char* value, size_t size);
  std::string* mutable_map_name();
  std::string* release_map_name();
  void set_allocated_map_name(std::string* map_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_map_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_map_name(
      std::string* map_name);
  private:
  const std::string& _internal_map_name() const;
  void _internal_set_map_name(const std::string& value);
  std::string* _internal_mutable_map_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // int32 name = 5;
  void clear_name();
  ::PROTOBUF_NAMESPACE_ID::int32 name() const;
  void set_name(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_name() const;
  void _internal_set_name(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hp = 6;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 p_id = 7;
  void clear_p_id();
  ::PROTOBUF_NAMESPACE_ID::int32 p_id() const;
  void set_p_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_p_id() const;
  void _internal_set_p_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trans.NewBulletMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float x_;
  float y_;
  ::PROTOBUF_NAMESPACE_ID::int32 name_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 p_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transition_2eproto;
};
// -------------------------------------------------------------------

class UpdateBulletMessage_Direction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans.UpdateBulletMessage.Direction) */ {
 public:
  inline UpdateBulletMessage_Direction() : UpdateBulletMessage_Direction(nullptr) {};
  virtual ~UpdateBulletMessage_Direction();

  UpdateBulletMessage_Direction(const UpdateBulletMessage_Direction& from);
  UpdateBulletMessage_Direction(UpdateBulletMessage_Direction&& from) noexcept
    : UpdateBulletMessage_Direction() {
    *this = ::std::move(from);
  }

  inline UpdateBulletMessage_Direction& operator=(const UpdateBulletMessage_Direction& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBulletMessage_Direction& operator=(UpdateBulletMessage_Direction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateBulletMessage_Direction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateBulletMessage_Direction* internal_default_instance() {
    return reinterpret_cast<const UpdateBulletMessage_Direction*>(
               &_UpdateBulletMessage_Direction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UpdateBulletMessage_Direction& a, UpdateBulletMessage_Direction& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBulletMessage_Direction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateBulletMessage_Direction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateBulletMessage_Direction* New() const final {
    return CreateMaybeMessage<UpdateBulletMessage_Direction>(nullptr);
  }

  UpdateBulletMessage_Direction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateBulletMessage_Direction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateBulletMessage_Direction& from);
  void MergeFrom(const UpdateBulletMessage_Direction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBulletMessage_Direction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans.UpdateBulletMessage.Direction";
  }
  protected:
  explicit UpdateBulletMessage_Direction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transition_2eproto);
    return ::descriptor_table_transition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpFieldNumber = 1,
    kLeftFieldNumber = 2,
    kRightFieldNumber = 3,
    kDownFieldNumber = 4,
  };
  // bool up = 1;
  void clear_up();
  bool up() const;
  void set_up(bool value);
  private:
  bool _internal_up() const;
  void _internal_set_up(bool value);
  public:

  // bool left = 2;
  void clear_left();
  bool left() const;
  void set_left(bool value);
  private:
  bool _internal_left() const;
  void _internal_set_left(bool value);
  public:

  // bool right = 3;
  void clear_right();
  bool right() const;
  void set_right(bool value);
  private:
  bool _internal_right() const;
  void _internal_set_right(bool value);
  public:

  // bool down = 4;
  void clear_down();
  bool down() const;
  void set_down(bool value);
  private:
  bool _internal_down() const;
  void _internal_set_down(bool value);
  public:

  // @@protoc_insertion_point(class_scope:trans.UpdateBulletMessage.Direction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool up_;
  bool left_;
  bool right_;
  bool down_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transition_2eproto;
};
// -------------------------------------------------------------------

class UpdateBulletMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans.UpdateBulletMessage) */ {
 public:
  inline UpdateBulletMessage() : UpdateBulletMessage(nullptr) {};
  virtual ~UpdateBulletMessage();

  UpdateBulletMessage(const UpdateBulletMessage& from);
  UpdateBulletMessage(UpdateBulletMessage&& from) noexcept
    : UpdateBulletMessage() {
    *this = ::std::move(from);
  }

  inline UpdateBulletMessage& operator=(const UpdateBulletMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBulletMessage& operator=(UpdateBulletMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateBulletMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateBulletMessage* internal_default_instance() {
    return reinterpret_cast<const UpdateBulletMessage*>(
               &_UpdateBulletMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UpdateBulletMessage& a, UpdateBulletMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBulletMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateBulletMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateBulletMessage* New() const final {
    return CreateMaybeMessage<UpdateBulletMessage>(nullptr);
  }

  UpdateBulletMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateBulletMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateBulletMessage& from);
  void MergeFrom(const UpdateBulletMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBulletMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans.UpdateBulletMessage";
  }
  protected:
  explicit UpdateBulletMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transition_2eproto);
    return ::descriptor_table_transition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UpdateBulletMessage_Direction Direction;

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kNameFieldNumber = 4,
    kHpFieldNumber = 5,
    kPIdFieldNumber = 6,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // int32 name = 4;
  void clear_name();
  ::PROTOBUF_NAMESPACE_ID::int32 name() const;
  void set_name(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_name() const;
  void _internal_set_name(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hp = 5;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 p_id = 6;
  void clear_p_id();
  ::PROTOBUF_NAMESPACE_ID::int32 p_id() const;
  void set_p_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_p_id() const;
  void _internal_set_p_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trans.UpdateBulletMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float x_;
  float y_;
  ::PROTOBUF_NAMESPACE_ID::int32 name_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 p_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transition_2eproto;
};
// -------------------------------------------------------------------

class ServerToUserLobbyWaitingMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans.ServerToUserLobbyWaitingMessage) */ {
 public:
  inline ServerToUserLobbyWaitingMessage() : ServerToUserLobbyWaitingMessage(nullptr) {};
  virtual ~ServerToUserLobbyWaitingMessage();

  ServerToUserLobbyWaitingMessage(const ServerToUserLobbyWaitingMessage& from);
  ServerToUserLobbyWaitingMessage(ServerToUserLobbyWaitingMessage&& from) noexcept
    : ServerToUserLobbyWaitingMessage() {
    *this = ::std::move(from);
  }

  inline ServerToUserLobbyWaitingMessage& operator=(const ServerToUserLobbyWaitingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerToUserLobbyWaitingMessage& operator=(ServerToUserLobbyWaitingMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerToUserLobbyWaitingMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerToUserLobbyWaitingMessage* internal_default_instance() {
    return reinterpret_cast<const ServerToUserLobbyWaitingMessage*>(
               &_ServerToUserLobbyWaitingMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ServerToUserLobbyWaitingMessage& a, ServerToUserLobbyWaitingMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerToUserLobbyWaitingMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerToUserLobbyWaitingMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerToUserLobbyWaitingMessage* New() const final {
    return CreateMaybeMessage<ServerToUserLobbyWaitingMessage>(nullptr);
  }

  ServerToUserLobbyWaitingMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerToUserLobbyWaitingMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerToUserLobbyWaitingMessage& from);
  void MergeFrom(const ServerToUserLobbyWaitingMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerToUserLobbyWaitingMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans.ServerToUserLobbyWaitingMessage";
  }
  protected:
  explicit ServerToUserLobbyWaitingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transition_2eproto);
    return ::descriptor_table_transition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 1,
    kWaitingIsOverFieldNumber = 2,
  };
  // string names = 1;
  void clear_names();
  const std::string& names() const;
  void set_names(const std::string& value);
  void set_names(std::string&& value);
  void set_names(const char* value);
  void set_names(const char* value, size_t size);
  std::string* mutable_names();
  std::string* release_names();
  void set_allocated_names(std::string* names);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_names();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_names(
      std::string* names);
  private:
  const std::string& _internal_names() const;
  void _internal_set_names(const std::string& value);
  std::string* _internal_mutable_names();
  public:

  // bool waitingIsOver = 2;
  void clear_waitingisover();
  bool waitingisover() const;
  void set_waitingisover(bool value);
  private:
  bool _internal_waitingisover() const;
  void _internal_set_waitingisover(bool value);
  public:

  // @@protoc_insertion_point(class_scope:trans.ServerToUserLobbyWaitingMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr names_;
  bool waitingisover_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transition_2eproto;
};
// -------------------------------------------------------------------

class UserToServerLobbyWaitingMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans.UserToServerLobbyWaitingMessage) */ {
 public:
  inline UserToServerLobbyWaitingMessage() : UserToServerLobbyWaitingMessage(nullptr) {};
  virtual ~UserToServerLobbyWaitingMessage();

  UserToServerLobbyWaitingMessage(const UserToServerLobbyWaitingMessage& from);
  UserToServerLobbyWaitingMessage(UserToServerLobbyWaitingMessage&& from) noexcept
    : UserToServerLobbyWaitingMessage() {
    *this = ::std::move(from);
  }

  inline UserToServerLobbyWaitingMessage& operator=(const UserToServerLobbyWaitingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserToServerLobbyWaitingMessage& operator=(UserToServerLobbyWaitingMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserToServerLobbyWaitingMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserToServerLobbyWaitingMessage* internal_default_instance() {
    return reinterpret_cast<const UserToServerLobbyWaitingMessage*>(
               &_UserToServerLobbyWaitingMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UserToServerLobbyWaitingMessage& a, UserToServerLobbyWaitingMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UserToServerLobbyWaitingMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserToServerLobbyWaitingMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserToServerLobbyWaitingMessage* New() const final {
    return CreateMaybeMessage<UserToServerLobbyWaitingMessage>(nullptr);
  }

  UserToServerLobbyWaitingMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserToServerLobbyWaitingMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserToServerLobbyWaitingMessage& from);
  void MergeFrom(const UserToServerLobbyWaitingMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserToServerLobbyWaitingMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans.UserToServerLobbyWaitingMessage";
  }
  protected:
  explicit UserToServerLobbyWaitingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transition_2eproto);
    return ::descriptor_table_transition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaitingIsOverFieldNumber = 1,
  };
  // bool waitingIsOver = 1;
  void clear_waitingisover();
  bool waitingisover() const;
  void set_waitingisover(bool value);
  private:
  bool _internal_waitingisover() const;
  void _internal_set_waitingisover(bool value);
  public:

  // @@protoc_insertion_point(class_scope:trans.UserToServerLobbyWaitingMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool waitingisover_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transition_2eproto;
};
// -------------------------------------------------------------------

class NewBotMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans.NewBotMessage) */ {
 public:
  inline NewBotMessage() : NewBotMessage(nullptr) {};
  virtual ~NewBotMessage();

  NewBotMessage(const NewBotMessage& from);
  NewBotMessage(NewBotMessage&& from) noexcept
    : NewBotMessage() {
    *this = ::std::move(from);
  }

  inline NewBotMessage& operator=(const NewBotMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewBotMessage& operator=(NewBotMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewBotMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewBotMessage* internal_default_instance() {
    return reinterpret_cast<const NewBotMessage*>(
               &_NewBotMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(NewBotMessage& a, NewBotMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NewBotMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewBotMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewBotMessage* New() const final {
    return CreateMaybeMessage<NewBotMessage>(nullptr);
  }

  NewBotMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewBotMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewBotMessage& from);
  void MergeFrom(const NewBotMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewBotMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans.NewBotMessage";
  }
  protected:
  explicit NewBotMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transition_2eproto);
    return ::descriptor_table_transition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kMapNameFieldNumber = 7,
    kIdFieldNumber = 1,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kPXFieldNumber = 5,
    kPYFieldNumber = 6,
    kHpFieldNumber = 8,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string map_name = 7;
  void clear_map_name();
  const std::string& map_name() const;
  void set_map_name(const std::string& value);
  void set_map_name(std::string&& value);
  void set_map_name(const char* value);
  void set_map_name(const char* value, size_t size);
  std::string* mutable_map_name();
  std::string* release_map_name();
  void set_allocated_map_name(std::string* map_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_map_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_map_name(
      std::string* map_name);
  private:
  const std::string& _internal_map_name() const;
  void _internal_set_map_name(const std::string& value);
  std::string* _internal_mutable_map_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 3;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 4;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float p_x = 5;
  void clear_p_x();
  float p_x() const;
  void set_p_x(float value);
  private:
  float _internal_p_x() const;
  void _internal_set_p_x(float value);
  public:

  // float p_y = 6;
  void clear_p_y();
  float p_y() const;
  void set_p_y(float value);
  private:
  float _internal_p_y() const;
  void _internal_set_p_y(float value);
  public:

  // int32 hp = 8;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trans.NewBotMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float x_;
  float y_;
  float p_x_;
  float p_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transition_2eproto;
};
// -------------------------------------------------------------------

class UpdateBotMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans.UpdateBotMessage) */ {
 public:
  inline UpdateBotMessage() : UpdateBotMessage(nullptr) {};
  virtual ~UpdateBotMessage();

  UpdateBotMessage(const UpdateBotMessage& from);
  UpdateBotMessage(UpdateBotMessage&& from) noexcept
    : UpdateBotMessage() {
    *this = ::std::move(from);
  }

  inline UpdateBotMessage& operator=(const UpdateBotMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBotMessage& operator=(UpdateBotMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateBotMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateBotMessage* internal_default_instance() {
    return reinterpret_cast<const UpdateBotMessage*>(
               &_UpdateBotMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(UpdateBotMessage& a, UpdateBotMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBotMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateBotMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateBotMessage* New() const final {
    return CreateMaybeMessage<UpdateBotMessage>(nullptr);
  }

  UpdateBotMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateBotMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateBotMessage& from);
  void MergeFrom(const UpdateBotMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBotMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans.UpdateBotMessage";
  }
  protected:
  explicit UpdateBotMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transition_2eproto);
    return ::descriptor_table_transition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kMapNameFieldNumber = 7,
    kIdFieldNumber = 1,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kPXFieldNumber = 5,
    kPYFieldNumber = 6,
    kHpFieldNumber = 8,
    kStepXFieldNumber = 9,
    kStepYFieldNumber = 10,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string map_name = 7;
  void clear_map_name();
  const std::string& map_name() const;
  void set_map_name(const std::string& value);
  void set_map_name(std::string&& value);
  void set_map_name(const char* value);
  void set_map_name(const char* value, size_t size);
  std::string* mutable_map_name();
  std::string* release_map_name();
  void set_allocated_map_name(std::string* map_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_map_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_map_name(
      std::string* map_name);
  private:
  const std::string& _internal_map_name() const;
  void _internal_set_map_name(const std::string& value);
  std::string* _internal_mutable_map_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 3;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 4;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float p_x = 5;
  void clear_p_x();
  float p_x() const;
  void set_p_x(float value);
  private:
  float _internal_p_x() const;
  void _internal_set_p_x(float value);
  public:

  // float p_y = 6;
  void clear_p_y();
  float p_y() const;
  void set_p_y(float value);
  private:
  float _internal_p_y() const;
  void _internal_set_p_y(float value);
  public:

  // int32 hp = 8;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float step_x = 9;
  void clear_step_x();
  float step_x() const;
  void set_step_x(float value);
  private:
  float _internal_step_x() const;
  void _internal_set_step_x(float value);
  public:

  // float step_y = 10;
  void clear_step_y();
  float step_y() const;
  void set_step_y(float value);
  private:
  float _internal_step_y() const;
  void _internal_set_step_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:trans.UpdateBotMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float x_;
  float y_;
  float p_x_;
  float p_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  float step_x_;
  float step_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transition_2eproto;
};
// -------------------------------------------------------------------

class ServerToUserMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans.ServerToUserMessage) */ {
 public:
  inline ServerToUserMessage() : ServerToUserMessage(nullptr) {};
  virtual ~ServerToUserMessage();

  ServerToUserMessage(const ServerToUserMessage& from);
  ServerToUserMessage(ServerToUserMessage&& from) noexcept
    : ServerToUserMessage() {
    *this = ::std::move(from);
  }

  inline ServerToUserMessage& operator=(const ServerToUserMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerToUserMessage& operator=(ServerToUserMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerToUserMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerToUserMessage* internal_default_instance() {
    return reinterpret_cast<const ServerToUserMessage*>(
               &_ServerToUserMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ServerToUserMessage& a, ServerToUserMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerToUserMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerToUserMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerToUserMessage* New() const final {
    return CreateMaybeMessage<ServerToUserMessage>(nullptr);
  }

  ServerToUserMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerToUserMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerToUserMessage& from);
  void MergeFrom(const ServerToUserMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerToUserMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans.ServerToUserMessage";
  }
  protected:
  explicit ServerToUserMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transition_2eproto);
    return ::descriptor_table_transition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ServerToUserMessage_MessageType MessageType;
  static constexpr MessageType NewPlayer =
    ServerToUserMessage_MessageType_NewPlayer;
  static constexpr MessageType UpdatePlayer =
    ServerToUserMessage_MessageType_UpdatePlayer;
  static constexpr MessageType NewBullet =
    ServerToUserMessage_MessageType_NewBullet;
  static constexpr MessageType UpdateBullet =
    ServerToUserMessage_MessageType_UpdateBullet;
  static constexpr MessageType NewBot =
    ServerToUserMessage_MessageType_NewBot;
  static constexpr MessageType UpdateBot =
    ServerToUserMessage_MessageType_UpdateBot;
  static inline bool MessageType_IsValid(int value) {
    return ServerToUserMessage_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    ServerToUserMessage_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    ServerToUserMessage_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    ServerToUserMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return ServerToUserMessage_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return ServerToUserMessage_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(const std::string& name,
      MessageType* value) {
    return ServerToUserMessage_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNpMsgFieldNumber = 2,
    kUpdMsgFieldNumber = 3,
    kNbMsgFieldNumber = 4,
    kUbMsgFieldNumber = 5,
    kNBotMsgFieldNumber = 6,
    kUBotMsgFieldNumber = 7,
    kTypeFieldNumber = 1,
  };
  // .trans.NewPlayerMessage np_msg = 2;
  bool has_np_msg() const;
  private:
  bool _internal_has_np_msg() const;
  public:
  void clear_np_msg();
  const ::trans::NewPlayerMessage& np_msg() const;
  ::trans::NewPlayerMessage* release_np_msg();
  ::trans::NewPlayerMessage* mutable_np_msg();
  void set_allocated_np_msg(::trans::NewPlayerMessage* np_msg);
  private:
  const ::trans::NewPlayerMessage& _internal_np_msg() const;
  ::trans::NewPlayerMessage* _internal_mutable_np_msg();
  public:
  void unsafe_arena_set_allocated_np_msg(
      ::trans::NewPlayerMessage* np_msg);
  ::trans::NewPlayerMessage* unsafe_arena_release_np_msg();

  // .trans.UpdatePlayerMessage upd_msg = 3;
  bool has_upd_msg() const;
  private:
  bool _internal_has_upd_msg() const;
  public:
  void clear_upd_msg();
  const ::trans::UpdatePlayerMessage& upd_msg() const;
  ::trans::UpdatePlayerMessage* release_upd_msg();
  ::trans::UpdatePlayerMessage* mutable_upd_msg();
  void set_allocated_upd_msg(::trans::UpdatePlayerMessage* upd_msg);
  private:
  const ::trans::UpdatePlayerMessage& _internal_upd_msg() const;
  ::trans::UpdatePlayerMessage* _internal_mutable_upd_msg();
  public:
  void unsafe_arena_set_allocated_upd_msg(
      ::trans::UpdatePlayerMessage* upd_msg);
  ::trans::UpdatePlayerMessage* unsafe_arena_release_upd_msg();

  // .trans.NewBulletMessage nb_msg = 4;
  bool has_nb_msg() const;
  private:
  bool _internal_has_nb_msg() const;
  public:
  void clear_nb_msg();
  const ::trans::NewBulletMessage& nb_msg() const;
  ::trans::NewBulletMessage* release_nb_msg();
  ::trans::NewBulletMessage* mutable_nb_msg();
  void set_allocated_nb_msg(::trans::NewBulletMessage* nb_msg);
  private:
  const ::trans::NewBulletMessage& _internal_nb_msg() const;
  ::trans::NewBulletMessage* _internal_mutable_nb_msg();
  public:
  void unsafe_arena_set_allocated_nb_msg(
      ::trans::NewBulletMessage* nb_msg);
  ::trans::NewBulletMessage* unsafe_arena_release_nb_msg();

  // .trans.UpdateBulletMessage ub_msg = 5;
  bool has_ub_msg() const;
  private:
  bool _internal_has_ub_msg() const;
  public:
  void clear_ub_msg();
  const ::trans::UpdateBulletMessage& ub_msg() const;
  ::trans::UpdateBulletMessage* release_ub_msg();
  ::trans::UpdateBulletMessage* mutable_ub_msg();
  void set_allocated_ub_msg(::trans::UpdateBulletMessage* ub_msg);
  private:
  const ::trans::UpdateBulletMessage& _internal_ub_msg() const;
  ::trans::UpdateBulletMessage* _internal_mutable_ub_msg();
  public:
  void unsafe_arena_set_allocated_ub_msg(
      ::trans::UpdateBulletMessage* ub_msg);
  ::trans::UpdateBulletMessage* unsafe_arena_release_ub_msg();

  // .trans.NewBotMessage n_bot_msg = 6;
  bool has_n_bot_msg() const;
  private:
  bool _internal_has_n_bot_msg() const;
  public:
  void clear_n_bot_msg();
  const ::trans::NewBotMessage& n_bot_msg() const;
  ::trans::NewBotMessage* release_n_bot_msg();
  ::trans::NewBotMessage* mutable_n_bot_msg();
  void set_allocated_n_bot_msg(::trans::NewBotMessage* n_bot_msg);
  private:
  const ::trans::NewBotMessage& _internal_n_bot_msg() const;
  ::trans::NewBotMessage* _internal_mutable_n_bot_msg();
  public:
  void unsafe_arena_set_allocated_n_bot_msg(
      ::trans::NewBotMessage* n_bot_msg);
  ::trans::NewBotMessage* unsafe_arena_release_n_bot_msg();

  // .trans.UpdateBotMessage u_bot_msg = 7;
  bool has_u_bot_msg() const;
  private:
  bool _internal_has_u_bot_msg() const;
  public:
  void clear_u_bot_msg();
  const ::trans::UpdateBotMessage& u_bot_msg() const;
  ::trans::UpdateBotMessage* release_u_bot_msg();
  ::trans::UpdateBotMessage* mutable_u_bot_msg();
  void set_allocated_u_bot_msg(::trans::UpdateBotMessage* u_bot_msg);
  private:
  const ::trans::UpdateBotMessage& _internal_u_bot_msg() const;
  ::trans::UpdateBotMessage* _internal_mutable_u_bot_msg();
  public:
  void unsafe_arena_set_allocated_u_bot_msg(
      ::trans::UpdateBotMessage* u_bot_msg);
  ::trans::UpdateBotMessage* unsafe_arena_release_u_bot_msg();

  // .trans.ServerToUserMessage.MessageType type = 1;
  void clear_type();
  ::trans::ServerToUserMessage_MessageType type() const;
  void set_type(::trans::ServerToUserMessage_MessageType value);
  private:
  ::trans::ServerToUserMessage_MessageType _internal_type() const;
  void _internal_set_type(::trans::ServerToUserMessage_MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:trans.ServerToUserMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::trans::NewPlayerMessage* np_msg_;
  ::trans::UpdatePlayerMessage* upd_msg_;
  ::trans::NewBulletMessage* nb_msg_;
  ::trans::UpdateBulletMessage* ub_msg_;
  ::trans::NewBotMessage* n_bot_msg_;
  ::trans::UpdateBotMessage* u_bot_msg_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transition_2eproto;
};
// -------------------------------------------------------------------

class ServerToUserVectorMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans.ServerToUserVectorMessage) */ {
 public:
  inline ServerToUserVectorMessage() : ServerToUserVectorMessage(nullptr) {};
  virtual ~ServerToUserVectorMessage();

  ServerToUserVectorMessage(const ServerToUserVectorMessage& from);
  ServerToUserVectorMessage(ServerToUserVectorMessage&& from) noexcept
    : ServerToUserVectorMessage() {
    *this = ::std::move(from);
  }

  inline ServerToUserVectorMessage& operator=(const ServerToUserVectorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerToUserVectorMessage& operator=(ServerToUserVectorMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerToUserVectorMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerToUserVectorMessage* internal_default_instance() {
    return reinterpret_cast<const ServerToUserVectorMessage*>(
               &_ServerToUserVectorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ServerToUserVectorMessage& a, ServerToUserVectorMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerToUserVectorMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerToUserVectorMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerToUserVectorMessage* New() const final {
    return CreateMaybeMessage<ServerToUserVectorMessage>(nullptr);
  }

  ServerToUserVectorMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerToUserVectorMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerToUserVectorMessage& from);
  void MergeFrom(const ServerToUserVectorMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerToUserVectorMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans.ServerToUserVectorMessage";
  }
  protected:
  explicit ServerToUserVectorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transition_2eproto);
    return ::descriptor_table_transition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecMessagesFieldNumber = 1,
  };
  // repeated .trans.ServerToUserMessage vec_messages = 1;
  int vec_messages_size() const;
  private:
  int _internal_vec_messages_size() const;
  public:
  void clear_vec_messages();
  ::trans::ServerToUserMessage* mutable_vec_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trans::ServerToUserMessage >*
      mutable_vec_messages();
  private:
  const ::trans::ServerToUserMessage& _internal_vec_messages(int index) const;
  ::trans::ServerToUserMessage* _internal_add_vec_messages();
  public:
  const ::trans::ServerToUserMessage& vec_messages(int index) const;
  ::trans::ServerToUserMessage* add_vec_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trans::ServerToUserMessage >&
      vec_messages() const;

  // @@protoc_insertion_point(class_scope:trans.ServerToUserVectorMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trans::ServerToUserMessage > vec_messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserToServerMessage_Direction

// bool up = 1;
inline void UserToServerMessage_Direction::clear_up() {
  up_ = false;
}
inline bool UserToServerMessage_Direction::_internal_up() const {
  return up_;
}
inline bool UserToServerMessage_Direction::up() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerMessage.Direction.up)
  return _internal_up();
}
inline void UserToServerMessage_Direction::_internal_set_up(bool value) {
  
  up_ = value;
}
inline void UserToServerMessage_Direction::set_up(bool value) {
  _internal_set_up(value);
  // @@protoc_insertion_point(field_set:trans.UserToServerMessage.Direction.up)
}

// bool left = 2;
inline void UserToServerMessage_Direction::clear_left() {
  left_ = false;
}
inline bool UserToServerMessage_Direction::_internal_left() const {
  return left_;
}
inline bool UserToServerMessage_Direction::left() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerMessage.Direction.left)
  return _internal_left();
}
inline void UserToServerMessage_Direction::_internal_set_left(bool value) {
  
  left_ = value;
}
inline void UserToServerMessage_Direction::set_left(bool value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:trans.UserToServerMessage.Direction.left)
}

// bool right = 3;
inline void UserToServerMessage_Direction::clear_right() {
  right_ = false;
}
inline bool UserToServerMessage_Direction::_internal_right() const {
  return right_;
}
inline bool UserToServerMessage_Direction::right() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerMessage.Direction.right)
  return _internal_right();
}
inline void UserToServerMessage_Direction::_internal_set_right(bool value) {
  
  right_ = value;
}
inline void UserToServerMessage_Direction::set_right(bool value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:trans.UserToServerMessage.Direction.right)
}

// bool down = 4;
inline void UserToServerMessage_Direction::clear_down() {
  down_ = false;
}
inline bool UserToServerMessage_Direction::_internal_down() const {
  return down_;
}
inline bool UserToServerMessage_Direction::down() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerMessage.Direction.down)
  return _internal_down();
}
inline void UserToServerMessage_Direction::_internal_set_down(bool value) {
  
  down_ = value;
}
inline void UserToServerMessage_Direction::set_down(bool value) {
  _internal_set_down(value);
  // @@protoc_insertion_point(field_set:trans.UserToServerMessage.Direction.down)
}

// bool fire = 5;
inline void UserToServerMessage_Direction::clear_fire() {
  fire_ = false;
}
inline bool UserToServerMessage_Direction::_internal_fire() const {
  return fire_;
}
inline bool UserToServerMessage_Direction::fire() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerMessage.Direction.fire)
  return _internal_fire();
}
inline void UserToServerMessage_Direction::_internal_set_fire(bool value) {
  
  fire_ = value;
}
inline void UserToServerMessage_Direction::set_fire(bool value) {
  _internal_set_fire(value);
  // @@protoc_insertion_point(field_set:trans.UserToServerMessage.Direction.fire)
}

// -------------------------------------------------------------------

// UserToServerMessage_BulletDirection

// bool up = 1;
inline void UserToServerMessage_BulletDirection::clear_up() {
  up_ = false;
}
inline bool UserToServerMessage_BulletDirection::_internal_up() const {
  return up_;
}
inline bool UserToServerMessage_BulletDirection::up() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerMessage.BulletDirection.up)
  return _internal_up();
}
inline void UserToServerMessage_BulletDirection::_internal_set_up(bool value) {
  
  up_ = value;
}
inline void UserToServerMessage_BulletDirection::set_up(bool value) {
  _internal_set_up(value);
  // @@protoc_insertion_point(field_set:trans.UserToServerMessage.BulletDirection.up)
}

// bool left = 2;
inline void UserToServerMessage_BulletDirection::clear_left() {
  left_ = false;
}
inline bool UserToServerMessage_BulletDirection::_internal_left() const {
  return left_;
}
inline bool UserToServerMessage_BulletDirection::left() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerMessage.BulletDirection.left)
  return _internal_left();
}
inline void UserToServerMessage_BulletDirection::_internal_set_left(bool value) {
  
  left_ = value;
}
inline void UserToServerMessage_BulletDirection::set_left(bool value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:trans.UserToServerMessage.BulletDirection.left)
}

// bool right = 3;
inline void UserToServerMessage_BulletDirection::clear_right() {
  right_ = false;
}
inline bool UserToServerMessage_BulletDirection::_internal_right() const {
  return right_;
}
inline bool UserToServerMessage_BulletDirection::right() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerMessage.BulletDirection.right)
  return _internal_right();
}
inline void UserToServerMessage_BulletDirection::_internal_set_right(bool value) {
  
  right_ = value;
}
inline void UserToServerMessage_BulletDirection::set_right(bool value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:trans.UserToServerMessage.BulletDirection.right)
}

// bool down = 4;
inline void UserToServerMessage_BulletDirection::clear_down() {
  down_ = false;
}
inline bool UserToServerMessage_BulletDirection::_internal_down() const {
  return down_;
}
inline bool UserToServerMessage_BulletDirection::down() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerMessage.BulletDirection.down)
  return _internal_down();
}
inline void UserToServerMessage_BulletDirection::_internal_set_down(bool value) {
  
  down_ = value;
}
inline void UserToServerMessage_BulletDirection::set_down(bool value) {
  _internal_set_down(value);
  // @@protoc_insertion_point(field_set:trans.UserToServerMessage.BulletDirection.down)
}

// -------------------------------------------------------------------

// UserToServerMessage_Rect

// uint64 left = 1;
inline void UserToServerMessage_Rect::clear_left() {
  left_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserToServerMessage_Rect::_internal_left() const {
  return left_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserToServerMessage_Rect::left() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerMessage.Rect.left)
  return _internal_left();
}
inline void UserToServerMessage_Rect::_internal_set_left(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  left_ = value;
}
inline void UserToServerMessage_Rect::set_left(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:trans.UserToServerMessage.Rect.left)
}

// uint64 top = 2;
inline void UserToServerMessage_Rect::clear_top() {
  top_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserToServerMessage_Rect::_internal_top() const {
  return top_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserToServerMessage_Rect::top() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerMessage.Rect.top)
  return _internal_top();
}
inline void UserToServerMessage_Rect::_internal_set_top(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  top_ = value;
}
inline void UserToServerMessage_Rect::set_top(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:trans.UserToServerMessage.Rect.top)
}

// uint64 width = 3;
inline void UserToServerMessage_Rect::clear_width() {
  width_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserToServerMessage_Rect::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserToServerMessage_Rect::width() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerMessage.Rect.width)
  return _internal_width();
}
inline void UserToServerMessage_Rect::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  width_ = value;
}
inline void UserToServerMessage_Rect::set_width(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:trans.UserToServerMessage.Rect.width)
}

// uint64 height = 4;
inline void UserToServerMessage_Rect::clear_height() {
  height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserToServerMessage_Rect::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserToServerMessage_Rect::height() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerMessage.Rect.height)
  return _internal_height();
}
inline void UserToServerMessage_Rect::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void UserToServerMessage_Rect::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:trans.UserToServerMessage.Rect.height)
}

// -------------------------------------------------------------------

// UserToServerMessage_Weapon

// bool pistol = 1;
inline void UserToServerMessage_Weapon::clear_pistol() {
  pistol_ = false;
}
inline bool UserToServerMessage_Weapon::_internal_pistol() const {
  return pistol_;
}
inline bool UserToServerMessage_Weapon::pistol() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerMessage.Weapon.pistol)
  return _internal_pistol();
}
inline void UserToServerMessage_Weapon::_internal_set_pistol(bool value) {
  
  pistol_ = value;
}
inline void UserToServerMessage_Weapon::set_pistol(bool value) {
  _internal_set_pistol(value);
  // @@protoc_insertion_point(field_set:trans.UserToServerMessage.Weapon.pistol)
}

// bool automat = 2;
inline void UserToServerMessage_Weapon::clear_automat() {
  automat_ = false;
}
inline bool UserToServerMessage_Weapon::_internal_automat() const {
  return automat_;
}
inline bool UserToServerMessage_Weapon::automat() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerMessage.Weapon.automat)
  return _internal_automat();
}
inline void UserToServerMessage_Weapon::_internal_set_automat(bool value) {
  
  automat_ = value;
}
inline void UserToServerMessage_Weapon::set_automat(bool value) {
  _internal_set_automat(value);
  // @@protoc_insertion_point(field_set:trans.UserToServerMessage.Weapon.automat)
}

// bool shotgun = 3;
inline void UserToServerMessage_Weapon::clear_shotgun() {
  shotgun_ = false;
}
inline bool UserToServerMessage_Weapon::_internal_shotgun() const {
  return shotgun_;
}
inline bool UserToServerMessage_Weapon::shotgun() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerMessage.Weapon.shotgun)
  return _internal_shotgun();
}
inline void UserToServerMessage_Weapon::_internal_set_shotgun(bool value) {
  
  shotgun_ = value;
}
inline void UserToServerMessage_Weapon::set_shotgun(bool value) {
  _internal_set_shotgun(value);
  // @@protoc_insertion_point(field_set:trans.UserToServerMessage.Weapon.shotgun)
}

// -------------------------------------------------------------------

// UserToServerMessage

// .trans.UserToServerMessage.MessageType type = 1;
inline void UserToServerMessage::clear_type() {
  type_ = 0;
}
inline ::trans::UserToServerMessage_MessageType UserToServerMessage::_internal_type() const {
  return static_cast< ::trans::UserToServerMessage_MessageType >(type_);
}
inline ::trans::UserToServerMessage_MessageType UserToServerMessage::type() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerMessage.type)
  return _internal_type();
}
inline void UserToServerMessage::_internal_set_type(::trans::UserToServerMessage_MessageType value) {
  
  type_ = value;
}
inline void UserToServerMessage::set_type(::trans::UserToServerMessage_MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:trans.UserToServerMessage.type)
}

// .trans.UserToServerMessage.Direction direction = 2;
inline bool UserToServerMessage::_internal_has_direction() const {
  return this != internal_default_instance() && direction_ != nullptr;
}
inline bool UserToServerMessage::has_direction() const {
  return _internal_has_direction();
}
inline void UserToServerMessage::clear_direction() {
  if (GetArena() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
}
inline const ::trans::UserToServerMessage_Direction& UserToServerMessage::_internal_direction() const {
  const ::trans::UserToServerMessage_Direction* p = direction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trans::UserToServerMessage_Direction*>(
      &::trans::_UserToServerMessage_Direction_default_instance_);
}
inline const ::trans::UserToServerMessage_Direction& UserToServerMessage::direction() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerMessage.direction)
  return _internal_direction();
}
inline void UserToServerMessage::unsafe_arena_set_allocated_direction(
    ::trans::UserToServerMessage_Direction* direction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.UserToServerMessage.direction)
}
inline ::trans::UserToServerMessage_Direction* UserToServerMessage::release_direction() {
  
  ::trans::UserToServerMessage_Direction* temp = direction_;
  direction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trans::UserToServerMessage_Direction* UserToServerMessage::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:trans.UserToServerMessage.direction)
  
  ::trans::UserToServerMessage_Direction* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::trans::UserToServerMessage_Direction* UserToServerMessage::_internal_mutable_direction() {
  
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::trans::UserToServerMessage_Direction>(GetArena());
    direction_ = p;
  }
  return direction_;
}
inline ::trans::UserToServerMessage_Direction* UserToServerMessage::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:trans.UserToServerMessage.direction)
  return _internal_mutable_direction();
}
inline void UserToServerMessage::set_allocated_direction(::trans::UserToServerMessage_Direction* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete direction_;
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(direction);
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:trans.UserToServerMessage.direction)
}

// .trans.UserToServerMessage.BulletDirection b_direction = 3;
inline bool UserToServerMessage::_internal_has_b_direction() const {
  return this != internal_default_instance() && b_direction_ != nullptr;
}
inline bool UserToServerMessage::has_b_direction() const {
  return _internal_has_b_direction();
}
inline void UserToServerMessage::clear_b_direction() {
  if (GetArena() == nullptr && b_direction_ != nullptr) {
    delete b_direction_;
  }
  b_direction_ = nullptr;
}
inline const ::trans::UserToServerMessage_BulletDirection& UserToServerMessage::_internal_b_direction() const {
  const ::trans::UserToServerMessage_BulletDirection* p = b_direction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trans::UserToServerMessage_BulletDirection*>(
      &::trans::_UserToServerMessage_BulletDirection_default_instance_);
}
inline const ::trans::UserToServerMessage_BulletDirection& UserToServerMessage::b_direction() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerMessage.b_direction)
  return _internal_b_direction();
}
inline void UserToServerMessage::unsafe_arena_set_allocated_b_direction(
    ::trans::UserToServerMessage_BulletDirection* b_direction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(b_direction_);
  }
  b_direction_ = b_direction;
  if (b_direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.UserToServerMessage.b_direction)
}
inline ::trans::UserToServerMessage_BulletDirection* UserToServerMessage::release_b_direction() {
  
  ::trans::UserToServerMessage_BulletDirection* temp = b_direction_;
  b_direction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trans::UserToServerMessage_BulletDirection* UserToServerMessage::unsafe_arena_release_b_direction() {
  // @@protoc_insertion_point(field_release:trans.UserToServerMessage.b_direction)
  
  ::trans::UserToServerMessage_BulletDirection* temp = b_direction_;
  b_direction_ = nullptr;
  return temp;
}
inline ::trans::UserToServerMessage_BulletDirection* UserToServerMessage::_internal_mutable_b_direction() {
  
  if (b_direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::trans::UserToServerMessage_BulletDirection>(GetArena());
    b_direction_ = p;
  }
  return b_direction_;
}
inline ::trans::UserToServerMessage_BulletDirection* UserToServerMessage::mutable_b_direction() {
  // @@protoc_insertion_point(field_mutable:trans.UserToServerMessage.b_direction)
  return _internal_mutable_b_direction();
}
inline void UserToServerMessage::set_allocated_b_direction(::trans::UserToServerMessage_BulletDirection* b_direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete b_direction_;
  }
  if (b_direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(b_direction);
    if (message_arena != submessage_arena) {
      b_direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, b_direction, submessage_arena);
    }
    
  } else {
    
  }
  b_direction_ = b_direction;
  // @@protoc_insertion_point(field_set_allocated:trans.UserToServerMessage.b_direction)
}

// .trans.UserToServerMessage.Rect rect = 4;
inline bool UserToServerMessage::_internal_has_rect() const {
  return this != internal_default_instance() && rect_ != nullptr;
}
inline bool UserToServerMessage::has_rect() const {
  return _internal_has_rect();
}
inline void UserToServerMessage::clear_rect() {
  if (GetArena() == nullptr && rect_ != nullptr) {
    delete rect_;
  }
  rect_ = nullptr;
}
inline const ::trans::UserToServerMessage_Rect& UserToServerMessage::_internal_rect() const {
  const ::trans::UserToServerMessage_Rect* p = rect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trans::UserToServerMessage_Rect*>(
      &::trans::_UserToServerMessage_Rect_default_instance_);
}
inline const ::trans::UserToServerMessage_Rect& UserToServerMessage::rect() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerMessage.rect)
  return _internal_rect();
}
inline void UserToServerMessage::unsafe_arena_set_allocated_rect(
    ::trans::UserToServerMessage_Rect* rect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rect_);
  }
  rect_ = rect;
  if (rect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.UserToServerMessage.rect)
}
inline ::trans::UserToServerMessage_Rect* UserToServerMessage::release_rect() {
  
  ::trans::UserToServerMessage_Rect* temp = rect_;
  rect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trans::UserToServerMessage_Rect* UserToServerMessage::unsafe_arena_release_rect() {
  // @@protoc_insertion_point(field_release:trans.UserToServerMessage.rect)
  
  ::trans::UserToServerMessage_Rect* temp = rect_;
  rect_ = nullptr;
  return temp;
}
inline ::trans::UserToServerMessage_Rect* UserToServerMessage::_internal_mutable_rect() {
  
  if (rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::trans::UserToServerMessage_Rect>(GetArena());
    rect_ = p;
  }
  return rect_;
}
inline ::trans::UserToServerMessage_Rect* UserToServerMessage::mutable_rect() {
  // @@protoc_insertion_point(field_mutable:trans.UserToServerMessage.rect)
  return _internal_mutable_rect();
}
inline void UserToServerMessage::set_allocated_rect(::trans::UserToServerMessage_Rect* rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rect_;
  }
  if (rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rect);
    if (message_arena != submessage_arena) {
      rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rect, submessage_arena);
    }
    
  } else {
    
  }
  rect_ = rect;
  // @@protoc_insertion_point(field_set_allocated:trans.UserToServerMessage.rect)
}

// .trans.UserToServerMessage.Weapon weapon = 5;
inline bool UserToServerMessage::_internal_has_weapon() const {
  return this != internal_default_instance() && weapon_ != nullptr;
}
inline bool UserToServerMessage::has_weapon() const {
  return _internal_has_weapon();
}
inline void UserToServerMessage::clear_weapon() {
  if (GetArena() == nullptr && weapon_ != nullptr) {
    delete weapon_;
  }
  weapon_ = nullptr;
}
inline const ::trans::UserToServerMessage_Weapon& UserToServerMessage::_internal_weapon() const {
  const ::trans::UserToServerMessage_Weapon* p = weapon_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trans::UserToServerMessage_Weapon*>(
      &::trans::_UserToServerMessage_Weapon_default_instance_);
}
inline const ::trans::UserToServerMessage_Weapon& UserToServerMessage::weapon() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerMessage.weapon)
  return _internal_weapon();
}
inline void UserToServerMessage::unsafe_arena_set_allocated_weapon(
    ::trans::UserToServerMessage_Weapon* weapon) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weapon_);
  }
  weapon_ = weapon;
  if (weapon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.UserToServerMessage.weapon)
}
inline ::trans::UserToServerMessage_Weapon* UserToServerMessage::release_weapon() {
  
  ::trans::UserToServerMessage_Weapon* temp = weapon_;
  weapon_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trans::UserToServerMessage_Weapon* UserToServerMessage::unsafe_arena_release_weapon() {
  // @@protoc_insertion_point(field_release:trans.UserToServerMessage.weapon)
  
  ::trans::UserToServerMessage_Weapon* temp = weapon_;
  weapon_ = nullptr;
  return temp;
}
inline ::trans::UserToServerMessage_Weapon* UserToServerMessage::_internal_mutable_weapon() {
  
  if (weapon_ == nullptr) {
    auto* p = CreateMaybeMessage<::trans::UserToServerMessage_Weapon>(GetArena());
    weapon_ = p;
  }
  return weapon_;
}
inline ::trans::UserToServerMessage_Weapon* UserToServerMessage::mutable_weapon() {
  // @@protoc_insertion_point(field_mutable:trans.UserToServerMessage.weapon)
  return _internal_mutable_weapon();
}
inline void UserToServerMessage::set_allocated_weapon(::trans::UserToServerMessage_Weapon* weapon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete weapon_;
  }
  if (weapon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(weapon);
    if (message_arena != submessage_arena) {
      weapon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weapon, submessage_arena);
    }
    
  } else {
    
  }
  weapon_ = weapon;
  // @@protoc_insertion_point(field_set_allocated:trans.UserToServerMessage.weapon)
}

// string username = 6;
inline void UserToServerMessage::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserToServerMessage::username() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerMessage.username)
  return _internal_username();
}
inline void UserToServerMessage::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:trans.UserToServerMessage.username)
}
inline std::string* UserToServerMessage::mutable_username() {
  // @@protoc_insertion_point(field_mutable:trans.UserToServerMessage.username)
  return _internal_mutable_username();
}
inline const std::string& UserToServerMessage::_internal_username() const {
  return username_.Get();
}
inline void UserToServerMessage::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserToServerMessage::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trans.UserToServerMessage.username)
}
inline void UserToServerMessage::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trans.UserToServerMessage.username)
}
inline void UserToServerMessage::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trans.UserToServerMessage.username)
}
inline std::string* UserToServerMessage::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserToServerMessage::release_username() {
  // @@protoc_insertion_point(field_release:trans.UserToServerMessage.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserToServerMessage::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trans.UserToServerMessage.username)
}
inline std::string* UserToServerMessage::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trans.UserToServerMessage.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserToServerMessage::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.UserToServerMessage.username)
}

// -------------------------------------------------------------------

// SessionCreatedMessage

// int32 session_id = 1;
inline void SessionCreatedMessage::clear_session_id() {
  session_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionCreatedMessage::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionCreatedMessage::session_id() const {
  // @@protoc_insertion_point(field_get:trans.SessionCreatedMessage.session_id)
  return _internal_session_id();
}
inline void SessionCreatedMessage::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  session_id_ = value;
}
inline void SessionCreatedMessage::set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:trans.SessionCreatedMessage.session_id)
}

// -------------------------------------------------------------------

// UserInitMessage

// .trans.UserInitMessage.Action action = 1;
inline void UserInitMessage::clear_action() {
  action_ = 0;
}
inline ::trans::UserInitMessage_Action UserInitMessage::_internal_action() const {
  return static_cast< ::trans::UserInitMessage_Action >(action_);
}
inline ::trans::UserInitMessage_Action UserInitMessage::action() const {
  // @@protoc_insertion_point(field_get:trans.UserInitMessage.action)
  return _internal_action();
}
inline void UserInitMessage::_internal_set_action(::trans::UserInitMessage_Action value) {
  
  action_ = value;
}
inline void UserInitMessage::set_action(::trans::UserInitMessage_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:trans.UserInitMessage.action)
}

// string username = 2;
inline void UserInitMessage::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInitMessage::username() const {
  // @@protoc_insertion_point(field_get:trans.UserInitMessage.username)
  return _internal_username();
}
inline void UserInitMessage::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:trans.UserInitMessage.username)
}
inline std::string* UserInitMessage::mutable_username() {
  // @@protoc_insertion_point(field_mutable:trans.UserInitMessage.username)
  return _internal_mutable_username();
}
inline const std::string& UserInitMessage::_internal_username() const {
  return username_.Get();
}
inline void UserInitMessage::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInitMessage::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trans.UserInitMessage.username)
}
inline void UserInitMessage::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trans.UserInitMessage.username)
}
inline void UserInitMessage::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trans.UserInitMessage.username)
}
inline std::string* UserInitMessage::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInitMessage::release_username() {
  // @@protoc_insertion_point(field_release:trans.UserInitMessage.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInitMessage::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trans.UserInitMessage.username)
}
inline std::string* UserInitMessage::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trans.UserInitMessage.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserInitMessage::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.UserInitMessage.username)
}

// int32 session_id = 3;
inline void UserInitMessage::clear_session_id() {
  session_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInitMessage::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInitMessage::session_id() const {
  // @@protoc_insertion_point(field_get:trans.UserInitMessage.session_id)
  return _internal_session_id();
}
inline void UserInitMessage::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  session_id_ = value;
}
inline void UserInitMessage::set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:trans.UserInitMessage.session_id)
}

// string map_name = 4;
inline void UserInitMessage::clear_map_name() {
  map_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInitMessage::map_name() const {
  // @@protoc_insertion_point(field_get:trans.UserInitMessage.map_name)
  return _internal_map_name();
}
inline void UserInitMessage::set_map_name(const std::string& value) {
  _internal_set_map_name(value);
  // @@protoc_insertion_point(field_set:trans.UserInitMessage.map_name)
}
inline std::string* UserInitMessage::mutable_map_name() {
  // @@protoc_insertion_point(field_mutable:trans.UserInitMessage.map_name)
  return _internal_mutable_map_name();
}
inline const std::string& UserInitMessage::_internal_map_name() const {
  return map_name_.Get();
}
inline void UserInitMessage::_internal_set_map_name(const std::string& value) {
  
  map_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInitMessage::set_map_name(std::string&& value) {
  
  map_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trans.UserInitMessage.map_name)
}
inline void UserInitMessage::set_map_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  map_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trans.UserInitMessage.map_name)
}
inline void UserInitMessage::set_map_name(const char* value,
    size_t size) {
  
  map_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trans.UserInitMessage.map_name)
}
inline std::string* UserInitMessage::_internal_mutable_map_name() {
  
  return map_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInitMessage::release_map_name() {
  // @@protoc_insertion_point(field_release:trans.UserInitMessage.map_name)
  return map_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInitMessage::set_allocated_map_name(std::string* map_name) {
  if (map_name != nullptr) {
    
  } else {
    
  }
  map_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trans.UserInitMessage.map_name)
}
inline std::string* UserInitMessage::unsafe_arena_release_map_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trans.UserInitMessage.map_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return map_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserInitMessage::unsafe_arena_set_allocated_map_name(
    std::string* map_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (map_name != nullptr) {
    
  } else {
    
  }
  map_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      map_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.UserInitMessage.map_name)
}

// -------------------------------------------------------------------

// NewPlayerMessage

// int32 id = 1;
inline void NewPlayerMessage::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewPlayerMessage::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewPlayerMessage::id() const {
  // @@protoc_insertion_point(field_get:trans.NewPlayerMessage.id)
  return _internal_id();
}
inline void NewPlayerMessage::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void NewPlayerMessage::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:trans.NewPlayerMessage.id)
}

// string username = 2;
inline void NewPlayerMessage::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NewPlayerMessage::username() const {
  // @@protoc_insertion_point(field_get:trans.NewPlayerMessage.username)
  return _internal_username();
}
inline void NewPlayerMessage::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:trans.NewPlayerMessage.username)
}
inline std::string* NewPlayerMessage::mutable_username() {
  // @@protoc_insertion_point(field_mutable:trans.NewPlayerMessage.username)
  return _internal_mutable_username();
}
inline const std::string& NewPlayerMessage::_internal_username() const {
  return username_.Get();
}
inline void NewPlayerMessage::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NewPlayerMessage::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trans.NewPlayerMessage.username)
}
inline void NewPlayerMessage::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trans.NewPlayerMessage.username)
}
inline void NewPlayerMessage::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trans.NewPlayerMessage.username)
}
inline std::string* NewPlayerMessage::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NewPlayerMessage::release_username() {
  // @@protoc_insertion_point(field_release:trans.NewPlayerMessage.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewPlayerMessage::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trans.NewPlayerMessage.username)
}
inline std::string* NewPlayerMessage::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trans.NewPlayerMessage.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NewPlayerMessage::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.NewPlayerMessage.username)
}

// float x = 3;
inline void NewPlayerMessage::clear_x() {
  x_ = 0;
}
inline float NewPlayerMessage::_internal_x() const {
  return x_;
}
inline float NewPlayerMessage::x() const {
  // @@protoc_insertion_point(field_get:trans.NewPlayerMessage.x)
  return _internal_x();
}
inline void NewPlayerMessage::_internal_set_x(float value) {
  
  x_ = value;
}
inline void NewPlayerMessage::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:trans.NewPlayerMessage.x)
}

// float y = 4;
inline void NewPlayerMessage::clear_y() {
  y_ = 0;
}
inline float NewPlayerMessage::_internal_y() const {
  return y_;
}
inline float NewPlayerMessage::y() const {
  // @@protoc_insertion_point(field_get:trans.NewPlayerMessage.y)
  return _internal_y();
}
inline void NewPlayerMessage::_internal_set_y(float value) {
  
  y_ = value;
}
inline void NewPlayerMessage::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:trans.NewPlayerMessage.y)
}

// string map_name = 5;
inline void NewPlayerMessage::clear_map_name() {
  map_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NewPlayerMessage::map_name() const {
  // @@protoc_insertion_point(field_get:trans.NewPlayerMessage.map_name)
  return _internal_map_name();
}
inline void NewPlayerMessage::set_map_name(const std::string& value) {
  _internal_set_map_name(value);
  // @@protoc_insertion_point(field_set:trans.NewPlayerMessage.map_name)
}
inline std::string* NewPlayerMessage::mutable_map_name() {
  // @@protoc_insertion_point(field_mutable:trans.NewPlayerMessage.map_name)
  return _internal_mutable_map_name();
}
inline const std::string& NewPlayerMessage::_internal_map_name() const {
  return map_name_.Get();
}
inline void NewPlayerMessage::_internal_set_map_name(const std::string& value) {
  
  map_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NewPlayerMessage::set_map_name(std::string&& value) {
  
  map_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trans.NewPlayerMessage.map_name)
}
inline void NewPlayerMessage::set_map_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  map_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trans.NewPlayerMessage.map_name)
}
inline void NewPlayerMessage::set_map_name(const char* value,
    size_t size) {
  
  map_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trans.NewPlayerMessage.map_name)
}
inline std::string* NewPlayerMessage::_internal_mutable_map_name() {
  
  return map_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NewPlayerMessage::release_map_name() {
  // @@protoc_insertion_point(field_release:trans.NewPlayerMessage.map_name)
  return map_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewPlayerMessage::set_allocated_map_name(std::string* map_name) {
  if (map_name != nullptr) {
    
  } else {
    
  }
  map_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trans.NewPlayerMessage.map_name)
}
inline std::string* NewPlayerMessage::unsafe_arena_release_map_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trans.NewPlayerMessage.map_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return map_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NewPlayerMessage::unsafe_arena_set_allocated_map_name(
    std::string* map_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (map_name != nullptr) {
    
  } else {
    
  }
  map_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      map_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.NewPlayerMessage.map_name)
}

// int32 name = 6;
inline void NewPlayerMessage::clear_name() {
  name_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewPlayerMessage::_internal_name() const {
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewPlayerMessage::name() const {
  // @@protoc_insertion_point(field_get:trans.NewPlayerMessage.name)
  return _internal_name();
}
inline void NewPlayerMessage::_internal_set_name(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  name_ = value;
}
inline void NewPlayerMessage::set_name(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:trans.NewPlayerMessage.name)
}

// int32 hp = 7;
inline void NewPlayerMessage::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewPlayerMessage::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewPlayerMessage::hp() const {
  // @@protoc_insertion_point(field_get:trans.NewPlayerMessage.hp)
  return _internal_hp();
}
inline void NewPlayerMessage::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
}
inline void NewPlayerMessage::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:trans.NewPlayerMessage.hp)
}

// -------------------------------------------------------------------

// UpdatePlayerMessage_Direction

// bool up = 1;
inline void UpdatePlayerMessage_Direction::clear_up() {
  up_ = false;
}
inline bool UpdatePlayerMessage_Direction::_internal_up() const {
  return up_;
}
inline bool UpdatePlayerMessage_Direction::up() const {
  // @@protoc_insertion_point(field_get:trans.UpdatePlayerMessage.Direction.up)
  return _internal_up();
}
inline void UpdatePlayerMessage_Direction::_internal_set_up(bool value) {
  
  up_ = value;
}
inline void UpdatePlayerMessage_Direction::set_up(bool value) {
  _internal_set_up(value);
  // @@protoc_insertion_point(field_set:trans.UpdatePlayerMessage.Direction.up)
}

// bool left = 2;
inline void UpdatePlayerMessage_Direction::clear_left() {
  left_ = false;
}
inline bool UpdatePlayerMessage_Direction::_internal_left() const {
  return left_;
}
inline bool UpdatePlayerMessage_Direction::left() const {
  // @@protoc_insertion_point(field_get:trans.UpdatePlayerMessage.Direction.left)
  return _internal_left();
}
inline void UpdatePlayerMessage_Direction::_internal_set_left(bool value) {
  
  left_ = value;
}
inline void UpdatePlayerMessage_Direction::set_left(bool value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:trans.UpdatePlayerMessage.Direction.left)
}

// bool right = 3;
inline void UpdatePlayerMessage_Direction::clear_right() {
  right_ = false;
}
inline bool UpdatePlayerMessage_Direction::_internal_right() const {
  return right_;
}
inline bool UpdatePlayerMessage_Direction::right() const {
  // @@protoc_insertion_point(field_get:trans.UpdatePlayerMessage.Direction.right)
  return _internal_right();
}
inline void UpdatePlayerMessage_Direction::_internal_set_right(bool value) {
  
  right_ = value;
}
inline void UpdatePlayerMessage_Direction::set_right(bool value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:trans.UpdatePlayerMessage.Direction.right)
}

// bool down = 4;
inline void UpdatePlayerMessage_Direction::clear_down() {
  down_ = false;
}
inline bool UpdatePlayerMessage_Direction::_internal_down() const {
  return down_;
}
inline bool UpdatePlayerMessage_Direction::down() const {
  // @@protoc_insertion_point(field_get:trans.UpdatePlayerMessage.Direction.down)
  return _internal_down();
}
inline void UpdatePlayerMessage_Direction::_internal_set_down(bool value) {
  
  down_ = value;
}
inline void UpdatePlayerMessage_Direction::set_down(bool value) {
  _internal_set_down(value);
  // @@protoc_insertion_point(field_set:trans.UpdatePlayerMessage.Direction.down)
}

// bool fire = 5;
inline void UpdatePlayerMessage_Direction::clear_fire() {
  fire_ = false;
}
inline bool UpdatePlayerMessage_Direction::_internal_fire() const {
  return fire_;
}
inline bool UpdatePlayerMessage_Direction::fire() const {
  // @@protoc_insertion_point(field_get:trans.UpdatePlayerMessage.Direction.fire)
  return _internal_fire();
}
inline void UpdatePlayerMessage_Direction::_internal_set_fire(bool value) {
  
  fire_ = value;
}
inline void UpdatePlayerMessage_Direction::set_fire(bool value) {
  _internal_set_fire(value);
  // @@protoc_insertion_point(field_set:trans.UpdatePlayerMessage.Direction.fire)
}

// -------------------------------------------------------------------

// UpdatePlayerMessage_FireDirection

// bool f_up = 1;
inline void UpdatePlayerMessage_FireDirection::clear_f_up() {
  f_up_ = false;
}
inline bool UpdatePlayerMessage_FireDirection::_internal_f_up() const {
  return f_up_;
}
inline bool UpdatePlayerMessage_FireDirection::f_up() const {
  // @@protoc_insertion_point(field_get:trans.UpdatePlayerMessage.FireDirection.f_up)
  return _internal_f_up();
}
inline void UpdatePlayerMessage_FireDirection::_internal_set_f_up(bool value) {
  
  f_up_ = value;
}
inline void UpdatePlayerMessage_FireDirection::set_f_up(bool value) {
  _internal_set_f_up(value);
  // @@protoc_insertion_point(field_set:trans.UpdatePlayerMessage.FireDirection.f_up)
}

// bool f_left = 2;
inline void UpdatePlayerMessage_FireDirection::clear_f_left() {
  f_left_ = false;
}
inline bool UpdatePlayerMessage_FireDirection::_internal_f_left() const {
  return f_left_;
}
inline bool UpdatePlayerMessage_FireDirection::f_left() const {
  // @@protoc_insertion_point(field_get:trans.UpdatePlayerMessage.FireDirection.f_left)
  return _internal_f_left();
}
inline void UpdatePlayerMessage_FireDirection::_internal_set_f_left(bool value) {
  
  f_left_ = value;
}
inline void UpdatePlayerMessage_FireDirection::set_f_left(bool value) {
  _internal_set_f_left(value);
  // @@protoc_insertion_point(field_set:trans.UpdatePlayerMessage.FireDirection.f_left)
}

// bool f_right = 3;
inline void UpdatePlayerMessage_FireDirection::clear_f_right() {
  f_right_ = false;
}
inline bool UpdatePlayerMessage_FireDirection::_internal_f_right() const {
  return f_right_;
}
inline bool UpdatePlayerMessage_FireDirection::f_right() const {
  // @@protoc_insertion_point(field_get:trans.UpdatePlayerMessage.FireDirection.f_right)
  return _internal_f_right();
}
inline void UpdatePlayerMessage_FireDirection::_internal_set_f_right(bool value) {
  
  f_right_ = value;
}
inline void UpdatePlayerMessage_FireDirection::set_f_right(bool value) {
  _internal_set_f_right(value);
  // @@protoc_insertion_point(field_set:trans.UpdatePlayerMessage.FireDirection.f_right)
}

// bool f_down = 4;
inline void UpdatePlayerMessage_FireDirection::clear_f_down() {
  f_down_ = false;
}
inline bool UpdatePlayerMessage_FireDirection::_internal_f_down() const {
  return f_down_;
}
inline bool UpdatePlayerMessage_FireDirection::f_down() const {
  // @@protoc_insertion_point(field_get:trans.UpdatePlayerMessage.FireDirection.f_down)
  return _internal_f_down();
}
inline void UpdatePlayerMessage_FireDirection::_internal_set_f_down(bool value) {
  
  f_down_ = value;
}
inline void UpdatePlayerMessage_FireDirection::set_f_down(bool value) {
  _internal_set_f_down(value);
  // @@protoc_insertion_point(field_set:trans.UpdatePlayerMessage.FireDirection.f_down)
}

// -------------------------------------------------------------------

// UpdatePlayerMessage

// int32 id = 1;
inline void UpdatePlayerMessage::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePlayerMessage::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePlayerMessage::id() const {
  // @@protoc_insertion_point(field_get:trans.UpdatePlayerMessage.id)
  return _internal_id();
}
inline void UpdatePlayerMessage::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void UpdatePlayerMessage::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:trans.UpdatePlayerMessage.id)
}

// float x = 2;
inline void UpdatePlayerMessage::clear_x() {
  x_ = 0;
}
inline float UpdatePlayerMessage::_internal_x() const {
  return x_;
}
inline float UpdatePlayerMessage::x() const {
  // @@protoc_insertion_point(field_get:trans.UpdatePlayerMessage.x)
  return _internal_x();
}
inline void UpdatePlayerMessage::_internal_set_x(float value) {
  
  x_ = value;
}
inline void UpdatePlayerMessage::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:trans.UpdatePlayerMessage.x)
}

// float y = 3;
inline void UpdatePlayerMessage::clear_y() {
  y_ = 0;
}
inline float UpdatePlayerMessage::_internal_y() const {
  return y_;
}
inline float UpdatePlayerMessage::y() const {
  // @@protoc_insertion_point(field_get:trans.UpdatePlayerMessage.y)
  return _internal_y();
}
inline void UpdatePlayerMessage::_internal_set_y(float value) {
  
  y_ = value;
}
inline void UpdatePlayerMessage::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:trans.UpdatePlayerMessage.y)
}

// .trans.UpdatePlayerMessage.Direction direction = 4;
inline bool UpdatePlayerMessage::_internal_has_direction() const {
  return this != internal_default_instance() && direction_ != nullptr;
}
inline bool UpdatePlayerMessage::has_direction() const {
  return _internal_has_direction();
}
inline void UpdatePlayerMessage::clear_direction() {
  if (GetArena() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
}
inline const ::trans::UpdatePlayerMessage_Direction& UpdatePlayerMessage::_internal_direction() const {
  const ::trans::UpdatePlayerMessage_Direction* p = direction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trans::UpdatePlayerMessage_Direction*>(
      &::trans::_UpdatePlayerMessage_Direction_default_instance_);
}
inline const ::trans::UpdatePlayerMessage_Direction& UpdatePlayerMessage::direction() const {
  // @@protoc_insertion_point(field_get:trans.UpdatePlayerMessage.direction)
  return _internal_direction();
}
inline void UpdatePlayerMessage::unsafe_arena_set_allocated_direction(
    ::trans::UpdatePlayerMessage_Direction* direction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.UpdatePlayerMessage.direction)
}
inline ::trans::UpdatePlayerMessage_Direction* UpdatePlayerMessage::release_direction() {
  
  ::trans::UpdatePlayerMessage_Direction* temp = direction_;
  direction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trans::UpdatePlayerMessage_Direction* UpdatePlayerMessage::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:trans.UpdatePlayerMessage.direction)
  
  ::trans::UpdatePlayerMessage_Direction* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::trans::UpdatePlayerMessage_Direction* UpdatePlayerMessage::_internal_mutable_direction() {
  
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::trans::UpdatePlayerMessage_Direction>(GetArena());
    direction_ = p;
  }
  return direction_;
}
inline ::trans::UpdatePlayerMessage_Direction* UpdatePlayerMessage::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:trans.UpdatePlayerMessage.direction)
  return _internal_mutable_direction();
}
inline void UpdatePlayerMessage::set_allocated_direction(::trans::UpdatePlayerMessage_Direction* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete direction_;
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(direction);
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:trans.UpdatePlayerMessage.direction)
}

// int32 name = 5;
inline void UpdatePlayerMessage::clear_name() {
  name_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePlayerMessage::_internal_name() const {
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePlayerMessage::name() const {
  // @@protoc_insertion_point(field_get:trans.UpdatePlayerMessage.name)
  return _internal_name();
}
inline void UpdatePlayerMessage::_internal_set_name(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  name_ = value;
}
inline void UpdatePlayerMessage::set_name(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:trans.UpdatePlayerMessage.name)
}

// int32 state = 6;
inline void UpdatePlayerMessage::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePlayerMessage::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePlayerMessage::state() const {
  // @@protoc_insertion_point(field_get:trans.UpdatePlayerMessage.state)
  return _internal_state();
}
inline void UpdatePlayerMessage::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void UpdatePlayerMessage::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:trans.UpdatePlayerMessage.state)
}

// int32 hp = 7;
inline void UpdatePlayerMessage::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePlayerMessage::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePlayerMessage::hp() const {
  // @@protoc_insertion_point(field_get:trans.UpdatePlayerMessage.hp)
  return _internal_hp();
}
inline void UpdatePlayerMessage::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
}
inline void UpdatePlayerMessage::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:trans.UpdatePlayerMessage.hp)
}

// string username = 8;
inline void UpdatePlayerMessage::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdatePlayerMessage::username() const {
  // @@protoc_insertion_point(field_get:trans.UpdatePlayerMessage.username)
  return _internal_username();
}
inline void UpdatePlayerMessage::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:trans.UpdatePlayerMessage.username)
}
inline std::string* UpdatePlayerMessage::mutable_username() {
  // @@protoc_insertion_point(field_mutable:trans.UpdatePlayerMessage.username)
  return _internal_mutable_username();
}
inline const std::string& UpdatePlayerMessage::_internal_username() const {
  return username_.Get();
}
inline void UpdatePlayerMessage::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdatePlayerMessage::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trans.UpdatePlayerMessage.username)
}
inline void UpdatePlayerMessage::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trans.UpdatePlayerMessage.username)
}
inline void UpdatePlayerMessage::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trans.UpdatePlayerMessage.username)
}
inline std::string* UpdatePlayerMessage::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdatePlayerMessage::release_username() {
  // @@protoc_insertion_point(field_release:trans.UpdatePlayerMessage.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdatePlayerMessage::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trans.UpdatePlayerMessage.username)
}
inline std::string* UpdatePlayerMessage::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trans.UpdatePlayerMessage.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdatePlayerMessage::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.UpdatePlayerMessage.username)
}

// -------------------------------------------------------------------

// NewBulletMessage

// int32 id = 1;
inline void NewBulletMessage::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewBulletMessage::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewBulletMessage::id() const {
  // @@protoc_insertion_point(field_get:trans.NewBulletMessage.id)
  return _internal_id();
}
inline void NewBulletMessage::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void NewBulletMessage::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:trans.NewBulletMessage.id)
}

// float x = 2;
inline void NewBulletMessage::clear_x() {
  x_ = 0;
}
inline float NewBulletMessage::_internal_x() const {
  return x_;
}
inline float NewBulletMessage::x() const {
  // @@protoc_insertion_point(field_get:trans.NewBulletMessage.x)
  return _internal_x();
}
inline void NewBulletMessage::_internal_set_x(float value) {
  
  x_ = value;
}
inline void NewBulletMessage::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:trans.NewBulletMessage.x)
}

// float y = 3;
inline void NewBulletMessage::clear_y() {
  y_ = 0;
}
inline float NewBulletMessage::_internal_y() const {
  return y_;
}
inline float NewBulletMessage::y() const {
  // @@protoc_insertion_point(field_get:trans.NewBulletMessage.y)
  return _internal_y();
}
inline void NewBulletMessage::_internal_set_y(float value) {
  
  y_ = value;
}
inline void NewBulletMessage::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:trans.NewBulletMessage.y)
}

// string map_name = 4;
inline void NewBulletMessage::clear_map_name() {
  map_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NewBulletMessage::map_name() const {
  // @@protoc_insertion_point(field_get:trans.NewBulletMessage.map_name)
  return _internal_map_name();
}
inline void NewBulletMessage::set_map_name(const std::string& value) {
  _internal_set_map_name(value);
  // @@protoc_insertion_point(field_set:trans.NewBulletMessage.map_name)
}
inline std::string* NewBulletMessage::mutable_map_name() {
  // @@protoc_insertion_point(field_mutable:trans.NewBulletMessage.map_name)
  return _internal_mutable_map_name();
}
inline const std::string& NewBulletMessage::_internal_map_name() const {
  return map_name_.Get();
}
inline void NewBulletMessage::_internal_set_map_name(const std::string& value) {
  
  map_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NewBulletMessage::set_map_name(std::string&& value) {
  
  map_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trans.NewBulletMessage.map_name)
}
inline void NewBulletMessage::set_map_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  map_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trans.NewBulletMessage.map_name)
}
inline void NewBulletMessage::set_map_name(const char* value,
    size_t size) {
  
  map_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trans.NewBulletMessage.map_name)
}
inline std::string* NewBulletMessage::_internal_mutable_map_name() {
  
  return map_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NewBulletMessage::release_map_name() {
  // @@protoc_insertion_point(field_release:trans.NewBulletMessage.map_name)
  return map_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewBulletMessage::set_allocated_map_name(std::string* map_name) {
  if (map_name != nullptr) {
    
  } else {
    
  }
  map_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trans.NewBulletMessage.map_name)
}
inline std::string* NewBulletMessage::unsafe_arena_release_map_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trans.NewBulletMessage.map_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return map_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NewBulletMessage::unsafe_arena_set_allocated_map_name(
    std::string* map_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (map_name != nullptr) {
    
  } else {
    
  }
  map_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      map_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.NewBulletMessage.map_name)
}

// int32 name = 5;
inline void NewBulletMessage::clear_name() {
  name_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewBulletMessage::_internal_name() const {
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewBulletMessage::name() const {
  // @@protoc_insertion_point(field_get:trans.NewBulletMessage.name)
  return _internal_name();
}
inline void NewBulletMessage::_internal_set_name(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  name_ = value;
}
inline void NewBulletMessage::set_name(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:trans.NewBulletMessage.name)
}

// int32 hp = 6;
inline void NewBulletMessage::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewBulletMessage::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewBulletMessage::hp() const {
  // @@protoc_insertion_point(field_get:trans.NewBulletMessage.hp)
  return _internal_hp();
}
inline void NewBulletMessage::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
}
inline void NewBulletMessage::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:trans.NewBulletMessage.hp)
}

// int32 p_id = 7;
inline void NewBulletMessage::clear_p_id() {
  p_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewBulletMessage::_internal_p_id() const {
  return p_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewBulletMessage::p_id() const {
  // @@protoc_insertion_point(field_get:trans.NewBulletMessage.p_id)
  return _internal_p_id();
}
inline void NewBulletMessage::_internal_set_p_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  p_id_ = value;
}
inline void NewBulletMessage::set_p_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_p_id(value);
  // @@protoc_insertion_point(field_set:trans.NewBulletMessage.p_id)
}

// -------------------------------------------------------------------

// UpdateBulletMessage_Direction

// bool up = 1;
inline void UpdateBulletMessage_Direction::clear_up() {
  up_ = false;
}
inline bool UpdateBulletMessage_Direction::_internal_up() const {
  return up_;
}
inline bool UpdateBulletMessage_Direction::up() const {
  // @@protoc_insertion_point(field_get:trans.UpdateBulletMessage.Direction.up)
  return _internal_up();
}
inline void UpdateBulletMessage_Direction::_internal_set_up(bool value) {
  
  up_ = value;
}
inline void UpdateBulletMessage_Direction::set_up(bool value) {
  _internal_set_up(value);
  // @@protoc_insertion_point(field_set:trans.UpdateBulletMessage.Direction.up)
}

// bool left = 2;
inline void UpdateBulletMessage_Direction::clear_left() {
  left_ = false;
}
inline bool UpdateBulletMessage_Direction::_internal_left() const {
  return left_;
}
inline bool UpdateBulletMessage_Direction::left() const {
  // @@protoc_insertion_point(field_get:trans.UpdateBulletMessage.Direction.left)
  return _internal_left();
}
inline void UpdateBulletMessage_Direction::_internal_set_left(bool value) {
  
  left_ = value;
}
inline void UpdateBulletMessage_Direction::set_left(bool value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:trans.UpdateBulletMessage.Direction.left)
}

// bool right = 3;
inline void UpdateBulletMessage_Direction::clear_right() {
  right_ = false;
}
inline bool UpdateBulletMessage_Direction::_internal_right() const {
  return right_;
}
inline bool UpdateBulletMessage_Direction::right() const {
  // @@protoc_insertion_point(field_get:trans.UpdateBulletMessage.Direction.right)
  return _internal_right();
}
inline void UpdateBulletMessage_Direction::_internal_set_right(bool value) {
  
  right_ = value;
}
inline void UpdateBulletMessage_Direction::set_right(bool value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:trans.UpdateBulletMessage.Direction.right)
}

// bool down = 4;
inline void UpdateBulletMessage_Direction::clear_down() {
  down_ = false;
}
inline bool UpdateBulletMessage_Direction::_internal_down() const {
  return down_;
}
inline bool UpdateBulletMessage_Direction::down() const {
  // @@protoc_insertion_point(field_get:trans.UpdateBulletMessage.Direction.down)
  return _internal_down();
}
inline void UpdateBulletMessage_Direction::_internal_set_down(bool value) {
  
  down_ = value;
}
inline void UpdateBulletMessage_Direction::set_down(bool value) {
  _internal_set_down(value);
  // @@protoc_insertion_point(field_set:trans.UpdateBulletMessage.Direction.down)
}

// -------------------------------------------------------------------

// UpdateBulletMessage

// int32 id = 1;
inline void UpdateBulletMessage::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateBulletMessage::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateBulletMessage::id() const {
  // @@protoc_insertion_point(field_get:trans.UpdateBulletMessage.id)
  return _internal_id();
}
inline void UpdateBulletMessage::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void UpdateBulletMessage::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:trans.UpdateBulletMessage.id)
}

// float x = 2;
inline void UpdateBulletMessage::clear_x() {
  x_ = 0;
}
inline float UpdateBulletMessage::_internal_x() const {
  return x_;
}
inline float UpdateBulletMessage::x() const {
  // @@protoc_insertion_point(field_get:trans.UpdateBulletMessage.x)
  return _internal_x();
}
inline void UpdateBulletMessage::_internal_set_x(float value) {
  
  x_ = value;
}
inline void UpdateBulletMessage::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:trans.UpdateBulletMessage.x)
}

// float y = 3;
inline void UpdateBulletMessage::clear_y() {
  y_ = 0;
}
inline float UpdateBulletMessage::_internal_y() const {
  return y_;
}
inline float UpdateBulletMessage::y() const {
  // @@protoc_insertion_point(field_get:trans.UpdateBulletMessage.y)
  return _internal_y();
}
inline void UpdateBulletMessage::_internal_set_y(float value) {
  
  y_ = value;
}
inline void UpdateBulletMessage::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:trans.UpdateBulletMessage.y)
}

// int32 name = 4;
inline void UpdateBulletMessage::clear_name() {
  name_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateBulletMessage::_internal_name() const {
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateBulletMessage::name() const {
  // @@protoc_insertion_point(field_get:trans.UpdateBulletMessage.name)
  return _internal_name();
}
inline void UpdateBulletMessage::_internal_set_name(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  name_ = value;
}
inline void UpdateBulletMessage::set_name(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:trans.UpdateBulletMessage.name)
}

// int32 hp = 5;
inline void UpdateBulletMessage::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateBulletMessage::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateBulletMessage::hp() const {
  // @@protoc_insertion_point(field_get:trans.UpdateBulletMessage.hp)
  return _internal_hp();
}
inline void UpdateBulletMessage::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
}
inline void UpdateBulletMessage::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:trans.UpdateBulletMessage.hp)
}

// int32 p_id = 6;
inline void UpdateBulletMessage::clear_p_id() {
  p_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateBulletMessage::_internal_p_id() const {
  return p_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateBulletMessage::p_id() const {
  // @@protoc_insertion_point(field_get:trans.UpdateBulletMessage.p_id)
  return _internal_p_id();
}
inline void UpdateBulletMessage::_internal_set_p_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  p_id_ = value;
}
inline void UpdateBulletMessage::set_p_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_p_id(value);
  // @@protoc_insertion_point(field_set:trans.UpdateBulletMessage.p_id)
}

// -------------------------------------------------------------------

// ServerToUserLobbyWaitingMessage

// string names = 1;
inline void ServerToUserLobbyWaitingMessage::clear_names() {
  names_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerToUserLobbyWaitingMessage::names() const {
  // @@protoc_insertion_point(field_get:trans.ServerToUserLobbyWaitingMessage.names)
  return _internal_names();
}
inline void ServerToUserLobbyWaitingMessage::set_names(const std::string& value) {
  _internal_set_names(value);
  // @@protoc_insertion_point(field_set:trans.ServerToUserLobbyWaitingMessage.names)
}
inline std::string* ServerToUserLobbyWaitingMessage::mutable_names() {
  // @@protoc_insertion_point(field_mutable:trans.ServerToUserLobbyWaitingMessage.names)
  return _internal_mutable_names();
}
inline const std::string& ServerToUserLobbyWaitingMessage::_internal_names() const {
  return names_.Get();
}
inline void ServerToUserLobbyWaitingMessage::_internal_set_names(const std::string& value) {
  
  names_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerToUserLobbyWaitingMessage::set_names(std::string&& value) {
  
  names_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trans.ServerToUserLobbyWaitingMessage.names)
}
inline void ServerToUserLobbyWaitingMessage::set_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  names_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trans.ServerToUserLobbyWaitingMessage.names)
}
inline void ServerToUserLobbyWaitingMessage::set_names(const char* value,
    size_t size) {
  
  names_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trans.ServerToUserLobbyWaitingMessage.names)
}
inline std::string* ServerToUserLobbyWaitingMessage::_internal_mutable_names() {
  
  return names_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerToUserLobbyWaitingMessage::release_names() {
  // @@protoc_insertion_point(field_release:trans.ServerToUserLobbyWaitingMessage.names)
  return names_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerToUserLobbyWaitingMessage::set_allocated_names(std::string* names) {
  if (names != nullptr) {
    
  } else {
    
  }
  names_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), names,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trans.ServerToUserLobbyWaitingMessage.names)
}
inline std::string* ServerToUserLobbyWaitingMessage::unsafe_arena_release_names() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trans.ServerToUserLobbyWaitingMessage.names)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return names_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServerToUserLobbyWaitingMessage::unsafe_arena_set_allocated_names(
    std::string* names) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (names != nullptr) {
    
  } else {
    
  }
  names_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      names, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.ServerToUserLobbyWaitingMessage.names)
}

// bool waitingIsOver = 2;
inline void ServerToUserLobbyWaitingMessage::clear_waitingisover() {
  waitingisover_ = false;
}
inline bool ServerToUserLobbyWaitingMessage::_internal_waitingisover() const {
  return waitingisover_;
}
inline bool ServerToUserLobbyWaitingMessage::waitingisover() const {
  // @@protoc_insertion_point(field_get:trans.ServerToUserLobbyWaitingMessage.waitingIsOver)
  return _internal_waitingisover();
}
inline void ServerToUserLobbyWaitingMessage::_internal_set_waitingisover(bool value) {
  
  waitingisover_ = value;
}
inline void ServerToUserLobbyWaitingMessage::set_waitingisover(bool value) {
  _internal_set_waitingisover(value);
  // @@protoc_insertion_point(field_set:trans.ServerToUserLobbyWaitingMessage.waitingIsOver)
}

// -------------------------------------------------------------------

// UserToServerLobbyWaitingMessage

// bool waitingIsOver = 1;
inline void UserToServerLobbyWaitingMessage::clear_waitingisover() {
  waitingisover_ = false;
}
inline bool UserToServerLobbyWaitingMessage::_internal_waitingisover() const {
  return waitingisover_;
}
inline bool UserToServerLobbyWaitingMessage::waitingisover() const {
  // @@protoc_insertion_point(field_get:trans.UserToServerLobbyWaitingMessage.waitingIsOver)
  return _internal_waitingisover();
}
inline void UserToServerLobbyWaitingMessage::_internal_set_waitingisover(bool value) {
  
  waitingisover_ = value;
}
inline void UserToServerLobbyWaitingMessage::set_waitingisover(bool value) {
  _internal_set_waitingisover(value);
  // @@protoc_insertion_point(field_set:trans.UserToServerLobbyWaitingMessage.waitingIsOver)
}

// -------------------------------------------------------------------

// NewBotMessage

// int32 id = 1;
inline void NewBotMessage::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewBotMessage::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewBotMessage::id() const {
  // @@protoc_insertion_point(field_get:trans.NewBotMessage.id)
  return _internal_id();
}
inline void NewBotMessage::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void NewBotMessage::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:trans.NewBotMessage.id)
}

// string username = 2;
inline void NewBotMessage::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NewBotMessage::username() const {
  // @@protoc_insertion_point(field_get:trans.NewBotMessage.username)
  return _internal_username();
}
inline void NewBotMessage::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:trans.NewBotMessage.username)
}
inline std::string* NewBotMessage::mutable_username() {
  // @@protoc_insertion_point(field_mutable:trans.NewBotMessage.username)
  return _internal_mutable_username();
}
inline const std::string& NewBotMessage::_internal_username() const {
  return username_.Get();
}
inline void NewBotMessage::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NewBotMessage::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trans.NewBotMessage.username)
}
inline void NewBotMessage::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trans.NewBotMessage.username)
}
inline void NewBotMessage::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trans.NewBotMessage.username)
}
inline std::string* NewBotMessage::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NewBotMessage::release_username() {
  // @@protoc_insertion_point(field_release:trans.NewBotMessage.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewBotMessage::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trans.NewBotMessage.username)
}
inline std::string* NewBotMessage::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trans.NewBotMessage.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NewBotMessage::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.NewBotMessage.username)
}

// float x = 3;
inline void NewBotMessage::clear_x() {
  x_ = 0;
}
inline float NewBotMessage::_internal_x() const {
  return x_;
}
inline float NewBotMessage::x() const {
  // @@protoc_insertion_point(field_get:trans.NewBotMessage.x)
  return _internal_x();
}
inline void NewBotMessage::_internal_set_x(float value) {
  
  x_ = value;
}
inline void NewBotMessage::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:trans.NewBotMessage.x)
}

// float y = 4;
inline void NewBotMessage::clear_y() {
  y_ = 0;
}
inline float NewBotMessage::_internal_y() const {
  return y_;
}
inline float NewBotMessage::y() const {
  // @@protoc_insertion_point(field_get:trans.NewBotMessage.y)
  return _internal_y();
}
inline void NewBotMessage::_internal_set_y(float value) {
  
  y_ = value;
}
inline void NewBotMessage::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:trans.NewBotMessage.y)
}

// float p_x = 5;
inline void NewBotMessage::clear_p_x() {
  p_x_ = 0;
}
inline float NewBotMessage::_internal_p_x() const {
  return p_x_;
}
inline float NewBotMessage::p_x() const {
  // @@protoc_insertion_point(field_get:trans.NewBotMessage.p_x)
  return _internal_p_x();
}
inline void NewBotMessage::_internal_set_p_x(float value) {
  
  p_x_ = value;
}
inline void NewBotMessage::set_p_x(float value) {
  _internal_set_p_x(value);
  // @@protoc_insertion_point(field_set:trans.NewBotMessage.p_x)
}

// float p_y = 6;
inline void NewBotMessage::clear_p_y() {
  p_y_ = 0;
}
inline float NewBotMessage::_internal_p_y() const {
  return p_y_;
}
inline float NewBotMessage::p_y() const {
  // @@protoc_insertion_point(field_get:trans.NewBotMessage.p_y)
  return _internal_p_y();
}
inline void NewBotMessage::_internal_set_p_y(float value) {
  
  p_y_ = value;
}
inline void NewBotMessage::set_p_y(float value) {
  _internal_set_p_y(value);
  // @@protoc_insertion_point(field_set:trans.NewBotMessage.p_y)
}

// string map_name = 7;
inline void NewBotMessage::clear_map_name() {
  map_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NewBotMessage::map_name() const {
  // @@protoc_insertion_point(field_get:trans.NewBotMessage.map_name)
  return _internal_map_name();
}
inline void NewBotMessage::set_map_name(const std::string& value) {
  _internal_set_map_name(value);
  // @@protoc_insertion_point(field_set:trans.NewBotMessage.map_name)
}
inline std::string* NewBotMessage::mutable_map_name() {
  // @@protoc_insertion_point(field_mutable:trans.NewBotMessage.map_name)
  return _internal_mutable_map_name();
}
inline const std::string& NewBotMessage::_internal_map_name() const {
  return map_name_.Get();
}
inline void NewBotMessage::_internal_set_map_name(const std::string& value) {
  
  map_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NewBotMessage::set_map_name(std::string&& value) {
  
  map_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trans.NewBotMessage.map_name)
}
inline void NewBotMessage::set_map_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  map_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trans.NewBotMessage.map_name)
}
inline void NewBotMessage::set_map_name(const char* value,
    size_t size) {
  
  map_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trans.NewBotMessage.map_name)
}
inline std::string* NewBotMessage::_internal_mutable_map_name() {
  
  return map_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NewBotMessage::release_map_name() {
  // @@protoc_insertion_point(field_release:trans.NewBotMessage.map_name)
  return map_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewBotMessage::set_allocated_map_name(std::string* map_name) {
  if (map_name != nullptr) {
    
  } else {
    
  }
  map_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trans.NewBotMessage.map_name)
}
inline std::string* NewBotMessage::unsafe_arena_release_map_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trans.NewBotMessage.map_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return map_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NewBotMessage::unsafe_arena_set_allocated_map_name(
    std::string* map_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (map_name != nullptr) {
    
  } else {
    
  }
  map_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      map_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.NewBotMessage.map_name)
}

// int32 hp = 8;
inline void NewBotMessage::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewBotMessage::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewBotMessage::hp() const {
  // @@protoc_insertion_point(field_get:trans.NewBotMessage.hp)
  return _internal_hp();
}
inline void NewBotMessage::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
}
inline void NewBotMessage::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:trans.NewBotMessage.hp)
}

// -------------------------------------------------------------------

// UpdateBotMessage

// int32 id = 1;
inline void UpdateBotMessage::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateBotMessage::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateBotMessage::id() const {
  // @@protoc_insertion_point(field_get:trans.UpdateBotMessage.id)
  return _internal_id();
}
inline void UpdateBotMessage::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void UpdateBotMessage::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:trans.UpdateBotMessage.id)
}

// string username = 2;
inline void UpdateBotMessage::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateBotMessage::username() const {
  // @@protoc_insertion_point(field_get:trans.UpdateBotMessage.username)
  return _internal_username();
}
inline void UpdateBotMessage::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:trans.UpdateBotMessage.username)
}
inline std::string* UpdateBotMessage::mutable_username() {
  // @@protoc_insertion_point(field_mutable:trans.UpdateBotMessage.username)
  return _internal_mutable_username();
}
inline const std::string& UpdateBotMessage::_internal_username() const {
  return username_.Get();
}
inline void UpdateBotMessage::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateBotMessage::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trans.UpdateBotMessage.username)
}
inline void UpdateBotMessage::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trans.UpdateBotMessage.username)
}
inline void UpdateBotMessage::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trans.UpdateBotMessage.username)
}
inline std::string* UpdateBotMessage::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateBotMessage::release_username() {
  // @@protoc_insertion_point(field_release:trans.UpdateBotMessage.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateBotMessage::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trans.UpdateBotMessage.username)
}
inline std::string* UpdateBotMessage::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trans.UpdateBotMessage.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateBotMessage::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.UpdateBotMessage.username)
}

// float x = 3;
inline void UpdateBotMessage::clear_x() {
  x_ = 0;
}
inline float UpdateBotMessage::_internal_x() const {
  return x_;
}
inline float UpdateBotMessage::x() const {
  // @@protoc_insertion_point(field_get:trans.UpdateBotMessage.x)
  return _internal_x();
}
inline void UpdateBotMessage::_internal_set_x(float value) {
  
  x_ = value;
}
inline void UpdateBotMessage::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:trans.UpdateBotMessage.x)
}

// float y = 4;
inline void UpdateBotMessage::clear_y() {
  y_ = 0;
}
inline float UpdateBotMessage::_internal_y() const {
  return y_;
}
inline float UpdateBotMessage::y() const {
  // @@protoc_insertion_point(field_get:trans.UpdateBotMessage.y)
  return _internal_y();
}
inline void UpdateBotMessage::_internal_set_y(float value) {
  
  y_ = value;
}
inline void UpdateBotMessage::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:trans.UpdateBotMessage.y)
}

// float p_x = 5;
inline void UpdateBotMessage::clear_p_x() {
  p_x_ = 0;
}
inline float UpdateBotMessage::_internal_p_x() const {
  return p_x_;
}
inline float UpdateBotMessage::p_x() const {
  // @@protoc_insertion_point(field_get:trans.UpdateBotMessage.p_x)
  return _internal_p_x();
}
inline void UpdateBotMessage::_internal_set_p_x(float value) {
  
  p_x_ = value;
}
inline void UpdateBotMessage::set_p_x(float value) {
  _internal_set_p_x(value);
  // @@protoc_insertion_point(field_set:trans.UpdateBotMessage.p_x)
}

// float p_y = 6;
inline void UpdateBotMessage::clear_p_y() {
  p_y_ = 0;
}
inline float UpdateBotMessage::_internal_p_y() const {
  return p_y_;
}
inline float UpdateBotMessage::p_y() const {
  // @@protoc_insertion_point(field_get:trans.UpdateBotMessage.p_y)
  return _internal_p_y();
}
inline void UpdateBotMessage::_internal_set_p_y(float value) {
  
  p_y_ = value;
}
inline void UpdateBotMessage::set_p_y(float value) {
  _internal_set_p_y(value);
  // @@protoc_insertion_point(field_set:trans.UpdateBotMessage.p_y)
}

// string map_name = 7;
inline void UpdateBotMessage::clear_map_name() {
  map_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateBotMessage::map_name() const {
  // @@protoc_insertion_point(field_get:trans.UpdateBotMessage.map_name)
  return _internal_map_name();
}
inline void UpdateBotMessage::set_map_name(const std::string& value) {
  _internal_set_map_name(value);
  // @@protoc_insertion_point(field_set:trans.UpdateBotMessage.map_name)
}
inline std::string* UpdateBotMessage::mutable_map_name() {
  // @@protoc_insertion_point(field_mutable:trans.UpdateBotMessage.map_name)
  return _internal_mutable_map_name();
}
inline const std::string& UpdateBotMessage::_internal_map_name() const {
  return map_name_.Get();
}
inline void UpdateBotMessage::_internal_set_map_name(const std::string& value) {
  
  map_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateBotMessage::set_map_name(std::string&& value) {
  
  map_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trans.UpdateBotMessage.map_name)
}
inline void UpdateBotMessage::set_map_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  map_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trans.UpdateBotMessage.map_name)
}
inline void UpdateBotMessage::set_map_name(const char* value,
    size_t size) {
  
  map_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trans.UpdateBotMessage.map_name)
}
inline std::string* UpdateBotMessage::_internal_mutable_map_name() {
  
  return map_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateBotMessage::release_map_name() {
  // @@protoc_insertion_point(field_release:trans.UpdateBotMessage.map_name)
  return map_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateBotMessage::set_allocated_map_name(std::string* map_name) {
  if (map_name != nullptr) {
    
  } else {
    
  }
  map_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trans.UpdateBotMessage.map_name)
}
inline std::string* UpdateBotMessage::unsafe_arena_release_map_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trans.UpdateBotMessage.map_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return map_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateBotMessage::unsafe_arena_set_allocated_map_name(
    std::string* map_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (map_name != nullptr) {
    
  } else {
    
  }
  map_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      map_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.UpdateBotMessage.map_name)
}

// int32 hp = 8;
inline void UpdateBotMessage::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateBotMessage::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateBotMessage::hp() const {
  // @@protoc_insertion_point(field_get:trans.UpdateBotMessage.hp)
  return _internal_hp();
}
inline void UpdateBotMessage::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
}
inline void UpdateBotMessage::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:trans.UpdateBotMessage.hp)
}

// float step_x = 9;
inline void UpdateBotMessage::clear_step_x() {
  step_x_ = 0;
}
inline float UpdateBotMessage::_internal_step_x() const {
  return step_x_;
}
inline float UpdateBotMessage::step_x() const {
  // @@protoc_insertion_point(field_get:trans.UpdateBotMessage.step_x)
  return _internal_step_x();
}
inline void UpdateBotMessage::_internal_set_step_x(float value) {
  
  step_x_ = value;
}
inline void UpdateBotMessage::set_step_x(float value) {
  _internal_set_step_x(value);
  // @@protoc_insertion_point(field_set:trans.UpdateBotMessage.step_x)
}

// float step_y = 10;
inline void UpdateBotMessage::clear_step_y() {
  step_y_ = 0;
}
inline float UpdateBotMessage::_internal_step_y() const {
  return step_y_;
}
inline float UpdateBotMessage::step_y() const {
  // @@protoc_insertion_point(field_get:trans.UpdateBotMessage.step_y)
  return _internal_step_y();
}
inline void UpdateBotMessage::_internal_set_step_y(float value) {
  
  step_y_ = value;
}
inline void UpdateBotMessage::set_step_y(float value) {
  _internal_set_step_y(value);
  // @@protoc_insertion_point(field_set:trans.UpdateBotMessage.step_y)
}

// -------------------------------------------------------------------

// ServerToUserMessage

// .trans.ServerToUserMessage.MessageType type = 1;
inline void ServerToUserMessage::clear_type() {
  type_ = 0;
}
inline ::trans::ServerToUserMessage_MessageType ServerToUserMessage::_internal_type() const {
  return static_cast< ::trans::ServerToUserMessage_MessageType >(type_);
}
inline ::trans::ServerToUserMessage_MessageType ServerToUserMessage::type() const {
  // @@protoc_insertion_point(field_get:trans.ServerToUserMessage.type)
  return _internal_type();
}
inline void ServerToUserMessage::_internal_set_type(::trans::ServerToUserMessage_MessageType value) {
  
  type_ = value;
}
inline void ServerToUserMessage::set_type(::trans::ServerToUserMessage_MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:trans.ServerToUserMessage.type)
}

// .trans.NewPlayerMessage np_msg = 2;
inline bool ServerToUserMessage::_internal_has_np_msg() const {
  return this != internal_default_instance() && np_msg_ != nullptr;
}
inline bool ServerToUserMessage::has_np_msg() const {
  return _internal_has_np_msg();
}
inline void ServerToUserMessage::clear_np_msg() {
  if (GetArena() == nullptr && np_msg_ != nullptr) {
    delete np_msg_;
  }
  np_msg_ = nullptr;
}
inline const ::trans::NewPlayerMessage& ServerToUserMessage::_internal_np_msg() const {
  const ::trans::NewPlayerMessage* p = np_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trans::NewPlayerMessage*>(
      &::trans::_NewPlayerMessage_default_instance_);
}
inline const ::trans::NewPlayerMessage& ServerToUserMessage::np_msg() const {
  // @@protoc_insertion_point(field_get:trans.ServerToUserMessage.np_msg)
  return _internal_np_msg();
}
inline void ServerToUserMessage::unsafe_arena_set_allocated_np_msg(
    ::trans::NewPlayerMessage* np_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(np_msg_);
  }
  np_msg_ = np_msg;
  if (np_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.ServerToUserMessage.np_msg)
}
inline ::trans::NewPlayerMessage* ServerToUserMessage::release_np_msg() {
  
  ::trans::NewPlayerMessage* temp = np_msg_;
  np_msg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trans::NewPlayerMessage* ServerToUserMessage::unsafe_arena_release_np_msg() {
  // @@protoc_insertion_point(field_release:trans.ServerToUserMessage.np_msg)
  
  ::trans::NewPlayerMessage* temp = np_msg_;
  np_msg_ = nullptr;
  return temp;
}
inline ::trans::NewPlayerMessage* ServerToUserMessage::_internal_mutable_np_msg() {
  
  if (np_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::trans::NewPlayerMessage>(GetArena());
    np_msg_ = p;
  }
  return np_msg_;
}
inline ::trans::NewPlayerMessage* ServerToUserMessage::mutable_np_msg() {
  // @@protoc_insertion_point(field_mutable:trans.ServerToUserMessage.np_msg)
  return _internal_mutable_np_msg();
}
inline void ServerToUserMessage::set_allocated_np_msg(::trans::NewPlayerMessage* np_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete np_msg_;
  }
  if (np_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(np_msg);
    if (message_arena != submessage_arena) {
      np_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, np_msg, submessage_arena);
    }
    
  } else {
    
  }
  np_msg_ = np_msg;
  // @@protoc_insertion_point(field_set_allocated:trans.ServerToUserMessage.np_msg)
}

// .trans.UpdatePlayerMessage upd_msg = 3;
inline bool ServerToUserMessage::_internal_has_upd_msg() const {
  return this != internal_default_instance() && upd_msg_ != nullptr;
}
inline bool ServerToUserMessage::has_upd_msg() const {
  return _internal_has_upd_msg();
}
inline void ServerToUserMessage::clear_upd_msg() {
  if (GetArena() == nullptr && upd_msg_ != nullptr) {
    delete upd_msg_;
  }
  upd_msg_ = nullptr;
}
inline const ::trans::UpdatePlayerMessage& ServerToUserMessage::_internal_upd_msg() const {
  const ::trans::UpdatePlayerMessage* p = upd_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trans::UpdatePlayerMessage*>(
      &::trans::_UpdatePlayerMessage_default_instance_);
}
inline const ::trans::UpdatePlayerMessage& ServerToUserMessage::upd_msg() const {
  // @@protoc_insertion_point(field_get:trans.ServerToUserMessage.upd_msg)
  return _internal_upd_msg();
}
inline void ServerToUserMessage::unsafe_arena_set_allocated_upd_msg(
    ::trans::UpdatePlayerMessage* upd_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upd_msg_);
  }
  upd_msg_ = upd_msg;
  if (upd_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.ServerToUserMessage.upd_msg)
}
inline ::trans::UpdatePlayerMessage* ServerToUserMessage::release_upd_msg() {
  
  ::trans::UpdatePlayerMessage* temp = upd_msg_;
  upd_msg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trans::UpdatePlayerMessage* ServerToUserMessage::unsafe_arena_release_upd_msg() {
  // @@protoc_insertion_point(field_release:trans.ServerToUserMessage.upd_msg)
  
  ::trans::UpdatePlayerMessage* temp = upd_msg_;
  upd_msg_ = nullptr;
  return temp;
}
inline ::trans::UpdatePlayerMessage* ServerToUserMessage::_internal_mutable_upd_msg() {
  
  if (upd_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::trans::UpdatePlayerMessage>(GetArena());
    upd_msg_ = p;
  }
  return upd_msg_;
}
inline ::trans::UpdatePlayerMessage* ServerToUserMessage::mutable_upd_msg() {
  // @@protoc_insertion_point(field_mutable:trans.ServerToUserMessage.upd_msg)
  return _internal_mutable_upd_msg();
}
inline void ServerToUserMessage::set_allocated_upd_msg(::trans::UpdatePlayerMessage* upd_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete upd_msg_;
  }
  if (upd_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(upd_msg);
    if (message_arena != submessage_arena) {
      upd_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upd_msg, submessage_arena);
    }
    
  } else {
    
  }
  upd_msg_ = upd_msg;
  // @@protoc_insertion_point(field_set_allocated:trans.ServerToUserMessage.upd_msg)
}

// .trans.NewBulletMessage nb_msg = 4;
inline bool ServerToUserMessage::_internal_has_nb_msg() const {
  return this != internal_default_instance() && nb_msg_ != nullptr;
}
inline bool ServerToUserMessage::has_nb_msg() const {
  return _internal_has_nb_msg();
}
inline void ServerToUserMessage::clear_nb_msg() {
  if (GetArena() == nullptr && nb_msg_ != nullptr) {
    delete nb_msg_;
  }
  nb_msg_ = nullptr;
}
inline const ::trans::NewBulletMessage& ServerToUserMessage::_internal_nb_msg() const {
  const ::trans::NewBulletMessage* p = nb_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trans::NewBulletMessage*>(
      &::trans::_NewBulletMessage_default_instance_);
}
inline const ::trans::NewBulletMessage& ServerToUserMessage::nb_msg() const {
  // @@protoc_insertion_point(field_get:trans.ServerToUserMessage.nb_msg)
  return _internal_nb_msg();
}
inline void ServerToUserMessage::unsafe_arena_set_allocated_nb_msg(
    ::trans::NewBulletMessage* nb_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nb_msg_);
  }
  nb_msg_ = nb_msg;
  if (nb_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.ServerToUserMessage.nb_msg)
}
inline ::trans::NewBulletMessage* ServerToUserMessage::release_nb_msg() {
  
  ::trans::NewBulletMessage* temp = nb_msg_;
  nb_msg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trans::NewBulletMessage* ServerToUserMessage::unsafe_arena_release_nb_msg() {
  // @@protoc_insertion_point(field_release:trans.ServerToUserMessage.nb_msg)
  
  ::trans::NewBulletMessage* temp = nb_msg_;
  nb_msg_ = nullptr;
  return temp;
}
inline ::trans::NewBulletMessage* ServerToUserMessage::_internal_mutable_nb_msg() {
  
  if (nb_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::trans::NewBulletMessage>(GetArena());
    nb_msg_ = p;
  }
  return nb_msg_;
}
inline ::trans::NewBulletMessage* ServerToUserMessage::mutable_nb_msg() {
  // @@protoc_insertion_point(field_mutable:trans.ServerToUserMessage.nb_msg)
  return _internal_mutable_nb_msg();
}
inline void ServerToUserMessage::set_allocated_nb_msg(::trans::NewBulletMessage* nb_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nb_msg_;
  }
  if (nb_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nb_msg);
    if (message_arena != submessage_arena) {
      nb_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nb_msg, submessage_arena);
    }
    
  } else {
    
  }
  nb_msg_ = nb_msg;
  // @@protoc_insertion_point(field_set_allocated:trans.ServerToUserMessage.nb_msg)
}

// .trans.UpdateBulletMessage ub_msg = 5;
inline bool ServerToUserMessage::_internal_has_ub_msg() const {
  return this != internal_default_instance() && ub_msg_ != nullptr;
}
inline bool ServerToUserMessage::has_ub_msg() const {
  return _internal_has_ub_msg();
}
inline void ServerToUserMessage::clear_ub_msg() {
  if (GetArena() == nullptr && ub_msg_ != nullptr) {
    delete ub_msg_;
  }
  ub_msg_ = nullptr;
}
inline const ::trans::UpdateBulletMessage& ServerToUserMessage::_internal_ub_msg() const {
  const ::trans::UpdateBulletMessage* p = ub_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trans::UpdateBulletMessage*>(
      &::trans::_UpdateBulletMessage_default_instance_);
}
inline const ::trans::UpdateBulletMessage& ServerToUserMessage::ub_msg() const {
  // @@protoc_insertion_point(field_get:trans.ServerToUserMessage.ub_msg)
  return _internal_ub_msg();
}
inline void ServerToUserMessage::unsafe_arena_set_allocated_ub_msg(
    ::trans::UpdateBulletMessage* ub_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ub_msg_);
  }
  ub_msg_ = ub_msg;
  if (ub_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.ServerToUserMessage.ub_msg)
}
inline ::trans::UpdateBulletMessage* ServerToUserMessage::release_ub_msg() {
  
  ::trans::UpdateBulletMessage* temp = ub_msg_;
  ub_msg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trans::UpdateBulletMessage* ServerToUserMessage::unsafe_arena_release_ub_msg() {
  // @@protoc_insertion_point(field_release:trans.ServerToUserMessage.ub_msg)
  
  ::trans::UpdateBulletMessage* temp = ub_msg_;
  ub_msg_ = nullptr;
  return temp;
}
inline ::trans::UpdateBulletMessage* ServerToUserMessage::_internal_mutable_ub_msg() {
  
  if (ub_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::trans::UpdateBulletMessage>(GetArena());
    ub_msg_ = p;
  }
  return ub_msg_;
}
inline ::trans::UpdateBulletMessage* ServerToUserMessage::mutable_ub_msg() {
  // @@protoc_insertion_point(field_mutable:trans.ServerToUserMessage.ub_msg)
  return _internal_mutable_ub_msg();
}
inline void ServerToUserMessage::set_allocated_ub_msg(::trans::UpdateBulletMessage* ub_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ub_msg_;
  }
  if (ub_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ub_msg);
    if (message_arena != submessage_arena) {
      ub_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ub_msg, submessage_arena);
    }
    
  } else {
    
  }
  ub_msg_ = ub_msg;
  // @@protoc_insertion_point(field_set_allocated:trans.ServerToUserMessage.ub_msg)
}

// .trans.NewBotMessage n_bot_msg = 6;
inline bool ServerToUserMessage::_internal_has_n_bot_msg() const {
  return this != internal_default_instance() && n_bot_msg_ != nullptr;
}
inline bool ServerToUserMessage::has_n_bot_msg() const {
  return _internal_has_n_bot_msg();
}
inline void ServerToUserMessage::clear_n_bot_msg() {
  if (GetArena() == nullptr && n_bot_msg_ != nullptr) {
    delete n_bot_msg_;
  }
  n_bot_msg_ = nullptr;
}
inline const ::trans::NewBotMessage& ServerToUserMessage::_internal_n_bot_msg() const {
  const ::trans::NewBotMessage* p = n_bot_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trans::NewBotMessage*>(
      &::trans::_NewBotMessage_default_instance_);
}
inline const ::trans::NewBotMessage& ServerToUserMessage::n_bot_msg() const {
  // @@protoc_insertion_point(field_get:trans.ServerToUserMessage.n_bot_msg)
  return _internal_n_bot_msg();
}
inline void ServerToUserMessage::unsafe_arena_set_allocated_n_bot_msg(
    ::trans::NewBotMessage* n_bot_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(n_bot_msg_);
  }
  n_bot_msg_ = n_bot_msg;
  if (n_bot_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.ServerToUserMessage.n_bot_msg)
}
inline ::trans::NewBotMessage* ServerToUserMessage::release_n_bot_msg() {
  
  ::trans::NewBotMessage* temp = n_bot_msg_;
  n_bot_msg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trans::NewBotMessage* ServerToUserMessage::unsafe_arena_release_n_bot_msg() {
  // @@protoc_insertion_point(field_release:trans.ServerToUserMessage.n_bot_msg)
  
  ::trans::NewBotMessage* temp = n_bot_msg_;
  n_bot_msg_ = nullptr;
  return temp;
}
inline ::trans::NewBotMessage* ServerToUserMessage::_internal_mutable_n_bot_msg() {
  
  if (n_bot_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::trans::NewBotMessage>(GetArena());
    n_bot_msg_ = p;
  }
  return n_bot_msg_;
}
inline ::trans::NewBotMessage* ServerToUserMessage::mutable_n_bot_msg() {
  // @@protoc_insertion_point(field_mutable:trans.ServerToUserMessage.n_bot_msg)
  return _internal_mutable_n_bot_msg();
}
inline void ServerToUserMessage::set_allocated_n_bot_msg(::trans::NewBotMessage* n_bot_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete n_bot_msg_;
  }
  if (n_bot_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(n_bot_msg);
    if (message_arena != submessage_arena) {
      n_bot_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, n_bot_msg, submessage_arena);
    }
    
  } else {
    
  }
  n_bot_msg_ = n_bot_msg;
  // @@protoc_insertion_point(field_set_allocated:trans.ServerToUserMessage.n_bot_msg)
}

// .trans.UpdateBotMessage u_bot_msg = 7;
inline bool ServerToUserMessage::_internal_has_u_bot_msg() const {
  return this != internal_default_instance() && u_bot_msg_ != nullptr;
}
inline bool ServerToUserMessage::has_u_bot_msg() const {
  return _internal_has_u_bot_msg();
}
inline void ServerToUserMessage::clear_u_bot_msg() {
  if (GetArena() == nullptr && u_bot_msg_ != nullptr) {
    delete u_bot_msg_;
  }
  u_bot_msg_ = nullptr;
}
inline const ::trans::UpdateBotMessage& ServerToUserMessage::_internal_u_bot_msg() const {
  const ::trans::UpdateBotMessage* p = u_bot_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trans::UpdateBotMessage*>(
      &::trans::_UpdateBotMessage_default_instance_);
}
inline const ::trans::UpdateBotMessage& ServerToUserMessage::u_bot_msg() const {
  // @@protoc_insertion_point(field_get:trans.ServerToUserMessage.u_bot_msg)
  return _internal_u_bot_msg();
}
inline void ServerToUserMessage::unsafe_arena_set_allocated_u_bot_msg(
    ::trans::UpdateBotMessage* u_bot_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(u_bot_msg_);
  }
  u_bot_msg_ = u_bot_msg;
  if (u_bot_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trans.ServerToUserMessage.u_bot_msg)
}
inline ::trans::UpdateBotMessage* ServerToUserMessage::release_u_bot_msg() {
  
  ::trans::UpdateBotMessage* temp = u_bot_msg_;
  u_bot_msg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trans::UpdateBotMessage* ServerToUserMessage::unsafe_arena_release_u_bot_msg() {
  // @@protoc_insertion_point(field_release:trans.ServerToUserMessage.u_bot_msg)
  
  ::trans::UpdateBotMessage* temp = u_bot_msg_;
  u_bot_msg_ = nullptr;
  return temp;
}
inline ::trans::UpdateBotMessage* ServerToUserMessage::_internal_mutable_u_bot_msg() {
  
  if (u_bot_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::trans::UpdateBotMessage>(GetArena());
    u_bot_msg_ = p;
  }
  return u_bot_msg_;
}
inline ::trans::UpdateBotMessage* ServerToUserMessage::mutable_u_bot_msg() {
  // @@protoc_insertion_point(field_mutable:trans.ServerToUserMessage.u_bot_msg)
  return _internal_mutable_u_bot_msg();
}
inline void ServerToUserMessage::set_allocated_u_bot_msg(::trans::UpdateBotMessage* u_bot_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete u_bot_msg_;
  }
  if (u_bot_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(u_bot_msg);
    if (message_arena != submessage_arena) {
      u_bot_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, u_bot_msg, submessage_arena);
    }
    
  } else {
    
  }
  u_bot_msg_ = u_bot_msg;
  // @@protoc_insertion_point(field_set_allocated:trans.ServerToUserMessage.u_bot_msg)
}

// -------------------------------------------------------------------

// ServerToUserVectorMessage

// repeated .trans.ServerToUserMessage vec_messages = 1;
inline int ServerToUserVectorMessage::_internal_vec_messages_size() const {
  return vec_messages_.size();
}
inline int ServerToUserVectorMessage::vec_messages_size() const {
  return _internal_vec_messages_size();
}
inline void ServerToUserVectorMessage::clear_vec_messages() {
  vec_messages_.Clear();
}
inline ::trans::ServerToUserMessage* ServerToUserVectorMessage::mutable_vec_messages(int index) {
  // @@protoc_insertion_point(field_mutable:trans.ServerToUserVectorMessage.vec_messages)
  return vec_messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trans::ServerToUserMessage >*
ServerToUserVectorMessage::mutable_vec_messages() {
  // @@protoc_insertion_point(field_mutable_list:trans.ServerToUserVectorMessage.vec_messages)
  return &vec_messages_;
}
inline const ::trans::ServerToUserMessage& ServerToUserVectorMessage::_internal_vec_messages(int index) const {
  return vec_messages_.Get(index);
}
inline const ::trans::ServerToUserMessage& ServerToUserVectorMessage::vec_messages(int index) const {
  // @@protoc_insertion_point(field_get:trans.ServerToUserVectorMessage.vec_messages)
  return _internal_vec_messages(index);
}
inline ::trans::ServerToUserMessage* ServerToUserVectorMessage::_internal_add_vec_messages() {
  return vec_messages_.Add();
}
inline ::trans::ServerToUserMessage* ServerToUserVectorMessage::add_vec_messages() {
  // @@protoc_insertion_point(field_add:trans.ServerToUserVectorMessage.vec_messages)
  return _internal_add_vec_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trans::ServerToUserMessage >&
ServerToUserVectorMessage::vec_messages() const {
  // @@protoc_insertion_point(field_list:trans.ServerToUserVectorMessage.vec_messages)
  return vec_messages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace trans

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::trans::UserToServerMessage_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trans::UserToServerMessage_MessageType>() {
  return ::trans::UserToServerMessage_MessageType_descriptor();
}
template <> struct is_proto_enum< ::trans::UserInitMessage_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trans::UserInitMessage_Action>() {
  return ::trans::UserInitMessage_Action_descriptor();
}
template <> struct is_proto_enum< ::trans::ServerToUserMessage_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trans::ServerToUserMessage_MessageType>() {
  return ::trans::ServerToUserMessage_MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transition_2eproto
