// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transition.proto

#include "transition.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_transition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewBotMessage_transition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewBulletMessage_transition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewPlayerMessage_transition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ServerToUserMessage_transition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateBotMessage_transition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateBulletMessage_transition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdatePlayerMessage_transition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdatePlayerMessage_Direction_transition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserToServerMessage_BulletDirection_transition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserToServerMessage_Direction_transition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserToServerMessage_Rect_transition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserToServerMessage_Weapon_transition_2eproto;
namespace trans {
class UserToServerMessage_DirectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserToServerMessage_Direction> _instance;
} _UserToServerMessage_Direction_default_instance_;
class UserToServerMessage_BulletDirectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserToServerMessage_BulletDirection> _instance;
} _UserToServerMessage_BulletDirection_default_instance_;
class UserToServerMessage_RectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserToServerMessage_Rect> _instance;
} _UserToServerMessage_Rect_default_instance_;
class UserToServerMessage_WeaponDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserToServerMessage_Weapon> _instance;
} _UserToServerMessage_Weapon_default_instance_;
class UserToServerMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserToServerMessage> _instance;
} _UserToServerMessage_default_instance_;
class SessionCreatedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionCreatedMessage> _instance;
} _SessionCreatedMessage_default_instance_;
class UserInitMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInitMessage> _instance;
} _UserInitMessage_default_instance_;
class NewPlayerMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewPlayerMessage> _instance;
} _NewPlayerMessage_default_instance_;
class UpdatePlayerMessage_DirectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePlayerMessage_Direction> _instance;
} _UpdatePlayerMessage_Direction_default_instance_;
class UpdatePlayerMessage_FireDirectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePlayerMessage_FireDirection> _instance;
} _UpdatePlayerMessage_FireDirection_default_instance_;
class UpdatePlayerMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePlayerMessage> _instance;
} _UpdatePlayerMessage_default_instance_;
class NewBulletMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewBulletMessage> _instance;
} _NewBulletMessage_default_instance_;
class UpdateBulletMessage_DirectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateBulletMessage_Direction> _instance;
} _UpdateBulletMessage_Direction_default_instance_;
class UpdateBulletMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateBulletMessage> _instance;
} _UpdateBulletMessage_default_instance_;
class ServerToUserLobbyWaitingMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToUserLobbyWaitingMessage> _instance;
} _ServerToUserLobbyWaitingMessage_default_instance_;
class UserToServerLobbyWaitingMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserToServerLobbyWaitingMessage> _instance;
} _UserToServerLobbyWaitingMessage_default_instance_;
class NewBotMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewBotMessage> _instance;
} _NewBotMessage_default_instance_;
class UpdateBotMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateBotMessage> _instance;
} _UpdateBotMessage_default_instance_;
class ServerToUserMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToUserMessage> _instance;
} _ServerToUserMessage_default_instance_;
class ServerToUserVectorMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToUserVectorMessage> _instance;
} _ServerToUserVectorMessage_default_instance_;
}  // namespace trans
static void InitDefaultsscc_info_NewBotMessage_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_NewBotMessage_default_instance_;
    new (ptr) ::trans::NewBotMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::NewBotMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewBotMessage_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewBotMessage_transition_2eproto}, {}};

static void InitDefaultsscc_info_NewBulletMessage_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_NewBulletMessage_default_instance_;
    new (ptr) ::trans::NewBulletMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::NewBulletMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewBulletMessage_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewBulletMessage_transition_2eproto}, {}};

static void InitDefaultsscc_info_NewPlayerMessage_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_NewPlayerMessage_default_instance_;
    new (ptr) ::trans::NewPlayerMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::NewPlayerMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewPlayerMessage_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewPlayerMessage_transition_2eproto}, {}};

static void InitDefaultsscc_info_ServerToUserLobbyWaitingMessage_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_ServerToUserLobbyWaitingMessage_default_instance_;
    new (ptr) ::trans::ServerToUserLobbyWaitingMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::ServerToUserLobbyWaitingMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToUserLobbyWaitingMessage_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerToUserLobbyWaitingMessage_transition_2eproto}, {}};

static void InitDefaultsscc_info_ServerToUserMessage_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_ServerToUserMessage_default_instance_;
    new (ptr) ::trans::ServerToUserMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::ServerToUserMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ServerToUserMessage_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ServerToUserMessage_transition_2eproto}, {
      &scc_info_NewPlayerMessage_transition_2eproto.base,
      &scc_info_UpdatePlayerMessage_transition_2eproto.base,
      &scc_info_NewBulletMessage_transition_2eproto.base,
      &scc_info_UpdateBulletMessage_transition_2eproto.base,
      &scc_info_NewBotMessage_transition_2eproto.base,
      &scc_info_UpdateBotMessage_transition_2eproto.base,}};

static void InitDefaultsscc_info_ServerToUserVectorMessage_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_ServerToUserVectorMessage_default_instance_;
    new (ptr) ::trans::ServerToUserVectorMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::ServerToUserVectorMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerToUserVectorMessage_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerToUserVectorMessage_transition_2eproto}, {
      &scc_info_ServerToUserMessage_transition_2eproto.base,}};

static void InitDefaultsscc_info_SessionCreatedMessage_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_SessionCreatedMessage_default_instance_;
    new (ptr) ::trans::SessionCreatedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::SessionCreatedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionCreatedMessage_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionCreatedMessage_transition_2eproto}, {}};

static void InitDefaultsscc_info_UpdateBotMessage_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_UpdateBotMessage_default_instance_;
    new (ptr) ::trans::UpdateBotMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::UpdateBotMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateBotMessage_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateBotMessage_transition_2eproto}, {}};

static void InitDefaultsscc_info_UpdateBulletMessage_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_UpdateBulletMessage_default_instance_;
    new (ptr) ::trans::UpdateBulletMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::UpdateBulletMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateBulletMessage_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateBulletMessage_transition_2eproto}, {}};

static void InitDefaultsscc_info_UpdateBulletMessage_Direction_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_UpdateBulletMessage_Direction_default_instance_;
    new (ptr) ::trans::UpdateBulletMessage_Direction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::UpdateBulletMessage_Direction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateBulletMessage_Direction_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateBulletMessage_Direction_transition_2eproto}, {}};

static void InitDefaultsscc_info_UpdatePlayerMessage_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_UpdatePlayerMessage_default_instance_;
    new (ptr) ::trans::UpdatePlayerMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::UpdatePlayerMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdatePlayerMessage_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdatePlayerMessage_transition_2eproto}, {
      &scc_info_UpdatePlayerMessage_Direction_transition_2eproto.base,}};

static void InitDefaultsscc_info_UpdatePlayerMessage_Direction_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_UpdatePlayerMessage_Direction_default_instance_;
    new (ptr) ::trans::UpdatePlayerMessage_Direction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::UpdatePlayerMessage_Direction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdatePlayerMessage_Direction_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdatePlayerMessage_Direction_transition_2eproto}, {}};

static void InitDefaultsscc_info_UpdatePlayerMessage_FireDirection_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_UpdatePlayerMessage_FireDirection_default_instance_;
    new (ptr) ::trans::UpdatePlayerMessage_FireDirection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::UpdatePlayerMessage_FireDirection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdatePlayerMessage_FireDirection_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdatePlayerMessage_FireDirection_transition_2eproto}, {}};

static void InitDefaultsscc_info_UserInitMessage_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_UserInitMessage_default_instance_;
    new (ptr) ::trans::UserInitMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::UserInitMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInitMessage_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserInitMessage_transition_2eproto}, {}};

static void InitDefaultsscc_info_UserToServerLobbyWaitingMessage_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_UserToServerLobbyWaitingMessage_default_instance_;
    new (ptr) ::trans::UserToServerLobbyWaitingMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::UserToServerLobbyWaitingMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserToServerLobbyWaitingMessage_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserToServerLobbyWaitingMessage_transition_2eproto}, {}};

static void InitDefaultsscc_info_UserToServerMessage_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_UserToServerMessage_default_instance_;
    new (ptr) ::trans::UserToServerMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::UserToServerMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_UserToServerMessage_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_UserToServerMessage_transition_2eproto}, {
      &scc_info_UserToServerMessage_Direction_transition_2eproto.base,
      &scc_info_UserToServerMessage_BulletDirection_transition_2eproto.base,
      &scc_info_UserToServerMessage_Rect_transition_2eproto.base,
      &scc_info_UserToServerMessage_Weapon_transition_2eproto.base,}};

static void InitDefaultsscc_info_UserToServerMessage_BulletDirection_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_UserToServerMessage_BulletDirection_default_instance_;
    new (ptr) ::trans::UserToServerMessage_BulletDirection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::UserToServerMessage_BulletDirection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserToServerMessage_BulletDirection_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserToServerMessage_BulletDirection_transition_2eproto}, {}};

static void InitDefaultsscc_info_UserToServerMessage_Direction_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_UserToServerMessage_Direction_default_instance_;
    new (ptr) ::trans::UserToServerMessage_Direction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::UserToServerMessage_Direction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserToServerMessage_Direction_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserToServerMessage_Direction_transition_2eproto}, {}};

static void InitDefaultsscc_info_UserToServerMessage_Rect_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_UserToServerMessage_Rect_default_instance_;
    new (ptr) ::trans::UserToServerMessage_Rect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::UserToServerMessage_Rect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserToServerMessage_Rect_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserToServerMessage_Rect_transition_2eproto}, {}};

static void InitDefaultsscc_info_UserToServerMessage_Weapon_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_UserToServerMessage_Weapon_default_instance_;
    new (ptr) ::trans::UserToServerMessage_Weapon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::UserToServerMessage_Weapon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserToServerMessage_Weapon_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserToServerMessage_Weapon_transition_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transition_2eproto[20];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_transition_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transition_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transition_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_Direction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_Direction, up_),
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_Direction, left_),
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_Direction, right_),
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_Direction, down_),
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_Direction, fire_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_BulletDirection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_BulletDirection, up_),
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_BulletDirection, left_),
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_BulletDirection, right_),
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_BulletDirection, down_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_Rect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_Rect, left_),
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_Rect, top_),
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_Rect, width_),
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_Rect, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_Weapon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_Weapon, pistol_),
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_Weapon, automat_),
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_Weapon, shotgun_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage, type_),
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage, direction_),
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage, b_direction_),
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage, rect_),
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage, weapon_),
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::SessionCreatedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::SessionCreatedMessage, session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::UserInitMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::UserInitMessage, action_),
  PROTOBUF_FIELD_OFFSET(::trans::UserInitMessage, username_),
  PROTOBUF_FIELD_OFFSET(::trans::UserInitMessage, session_id_),
  PROTOBUF_FIELD_OFFSET(::trans::UserInitMessage, map_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::NewPlayerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::NewPlayerMessage, id_),
  PROTOBUF_FIELD_OFFSET(::trans::NewPlayerMessage, username_),
  PROTOBUF_FIELD_OFFSET(::trans::NewPlayerMessage, x_),
  PROTOBUF_FIELD_OFFSET(::trans::NewPlayerMessage, y_),
  PROTOBUF_FIELD_OFFSET(::trans::NewPlayerMessage, map_name_),
  PROTOBUF_FIELD_OFFSET(::trans::NewPlayerMessage, name_),
  PROTOBUF_FIELD_OFFSET(::trans::NewPlayerMessage, hp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage_Direction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage_Direction, up_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage_Direction, left_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage_Direction, right_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage_Direction, down_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage_Direction, fire_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage_FireDirection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage_FireDirection, f_up_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage_FireDirection, f_left_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage_FireDirection, f_right_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage_FireDirection, f_down_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage, id_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage, x_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage, y_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage, direction_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage, name_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage, state_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage, hp_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::NewBulletMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::NewBulletMessage, id_),
  PROTOBUF_FIELD_OFFSET(::trans::NewBulletMessage, x_),
  PROTOBUF_FIELD_OFFSET(::trans::NewBulletMessage, y_),
  PROTOBUF_FIELD_OFFSET(::trans::NewBulletMessage, map_name_),
  PROTOBUF_FIELD_OFFSET(::trans::NewBulletMessage, name_),
  PROTOBUF_FIELD_OFFSET(::trans::NewBulletMessage, hp_),
  PROTOBUF_FIELD_OFFSET(::trans::NewBulletMessage, p_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBulletMessage_Direction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBulletMessage_Direction, up_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBulletMessage_Direction, left_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBulletMessage_Direction, right_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBulletMessage_Direction, down_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBulletMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBulletMessage, id_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBulletMessage, x_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBulletMessage, y_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBulletMessage, name_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBulletMessage, hp_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBulletMessage, p_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::ServerToUserLobbyWaitingMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::ServerToUserLobbyWaitingMessage, names_),
  PROTOBUF_FIELD_OFFSET(::trans::ServerToUserLobbyWaitingMessage, waitingisover_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerLobbyWaitingMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerLobbyWaitingMessage, waitingisover_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::NewBotMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::NewBotMessage, id_),
  PROTOBUF_FIELD_OFFSET(::trans::NewBotMessage, username_),
  PROTOBUF_FIELD_OFFSET(::trans::NewBotMessage, x_),
  PROTOBUF_FIELD_OFFSET(::trans::NewBotMessage, y_),
  PROTOBUF_FIELD_OFFSET(::trans::NewBotMessage, p_x_),
  PROTOBUF_FIELD_OFFSET(::trans::NewBotMessage, p_y_),
  PROTOBUF_FIELD_OFFSET(::trans::NewBotMessage, map_name_),
  PROTOBUF_FIELD_OFFSET(::trans::NewBotMessage, hp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBotMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBotMessage, id_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBotMessage, username_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBotMessage, x_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBotMessage, y_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBotMessage, p_x_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBotMessage, p_y_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBotMessage, map_name_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBotMessage, hp_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBotMessage, step_x_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBotMessage, step_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::ServerToUserMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::ServerToUserMessage, type_),
  PROTOBUF_FIELD_OFFSET(::trans::ServerToUserMessage, np_msg_),
  PROTOBUF_FIELD_OFFSET(::trans::ServerToUserMessage, upd_msg_),
  PROTOBUF_FIELD_OFFSET(::trans::ServerToUserMessage, nb_msg_),
  PROTOBUF_FIELD_OFFSET(::trans::ServerToUserMessage, ub_msg_),
  PROTOBUF_FIELD_OFFSET(::trans::ServerToUserMessage, n_bot_msg_),
  PROTOBUF_FIELD_OFFSET(::trans::ServerToUserMessage, u_bot_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::ServerToUserVectorMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::ServerToUserVectorMessage, vec_messages_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::trans::UserToServerMessage_Direction)},
  { 10, -1, sizeof(::trans::UserToServerMessage_BulletDirection)},
  { 19, -1, sizeof(::trans::UserToServerMessage_Rect)},
  { 28, -1, sizeof(::trans::UserToServerMessage_Weapon)},
  { 36, -1, sizeof(::trans::UserToServerMessage)},
  { 47, -1, sizeof(::trans::SessionCreatedMessage)},
  { 53, -1, sizeof(::trans::UserInitMessage)},
  { 62, -1, sizeof(::trans::NewPlayerMessage)},
  { 74, -1, sizeof(::trans::UpdatePlayerMessage_Direction)},
  { 84, -1, sizeof(::trans::UpdatePlayerMessage_FireDirection)},
  { 93, -1, sizeof(::trans::UpdatePlayerMessage)},
  { 106, -1, sizeof(::trans::NewBulletMessage)},
  { 118, -1, sizeof(::trans::UpdateBulletMessage_Direction)},
  { 127, -1, sizeof(::trans::UpdateBulletMessage)},
  { 138, -1, sizeof(::trans::ServerToUserLobbyWaitingMessage)},
  { 145, -1, sizeof(::trans::UserToServerLobbyWaitingMessage)},
  { 151, -1, sizeof(::trans::NewBotMessage)},
  { 164, -1, sizeof(::trans::UpdateBotMessage)},
  { 179, -1, sizeof(::trans::ServerToUserMessage)},
  { 191, -1, sizeof(::trans::ServerToUserVectorMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_UserToServerMessage_Direction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_UserToServerMessage_BulletDirection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_UserToServerMessage_Rect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_UserToServerMessage_Weapon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_UserToServerMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_SessionCreatedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_UserInitMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_NewPlayerMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_UpdatePlayerMessage_Direction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_UpdatePlayerMessage_FireDirection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_UpdatePlayerMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_NewBulletMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_UpdateBulletMessage_Direction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_UpdateBulletMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_ServerToUserLobbyWaitingMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_UserToServerLobbyWaitingMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_NewBotMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_UpdateBotMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_ServerToUserMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_ServerToUserVectorMessage_default_instance_),
};

const char descriptor_table_protodef_transition_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020transition.proto\022\005trans\"\246\005\n\023UserToServ"
  "erMessage\0224\n\004type\030\001 \001(\0162&.trans.UserToSe"
  "rverMessage.MessageType\0227\n\tdirection\030\002 \001"
  "(\0132$.trans.UserToServerMessage.Direction"
  "\022\?\n\013b_direction\030\003 \001(\0132*.trans.UserToServ"
  "erMessage.BulletDirection\022-\n\004rect\030\004 \001(\0132"
  "\037.trans.UserToServerMessage.Rect\0221\n\006weap"
  "on\030\005 \001(\0132!.trans.UserToServerMessage.Wea"
  "pon\022\020\n\010username\030\006 \001(\t\032P\n\tDirection\022\n\n\002up"
  "\030\001 \001(\010\022\014\n\004left\030\002 \001(\010\022\r\n\005right\030\003 \001(\010\022\014\n\004d"
  "own\030\004 \001(\010\022\014\n\004fire\030\005 \001(\010\032H\n\017BulletDirecti"
  "on\022\n\n\002up\030\001 \001(\010\022\014\n\004left\030\002 \001(\010\022\r\n\005right\030\003 "
  "\001(\010\022\014\n\004down\030\004 \001(\010\032@\n\004Rect\022\014\n\004left\030\001 \001(\004\022"
  "\013\n\003top\030\002 \001(\004\022\r\n\005width\030\003 \001(\004\022\016\n\006height\030\004 "
  "\001(\004\032:\n\006Weapon\022\016\n\006pistol\030\001 \001(\010\022\017\n\007automat"
  "\030\002 \001(\010\022\017\n\007shotgun\030\003 \001(\010\"Q\n\013MessageType\022\013"
  "\n\007Standby\020\000\022\010\n\004Move\020\001\022\010\n\004Wall\020\002\022\010\n\004Lava\020"
  "\003\022\t\n\005Spike\020\004\022\014\n\010UserName\020\005\"+\n\025SessionCre"
  "atedMessage\022\022\n\nsession_id\030\001 \001(\005\"\240\001\n\017User"
  "InitMessage\022-\n\006action\030\001 \001(\0162\035.trans.User"
  "InitMessage.Action\022\020\n\010username\030\002 \001(\t\022\022\n\n"
  "session_id\030\003 \001(\005\022\020\n\010map_name\030\004 \001(\t\"&\n\006Ac"
  "tion\022\n\n\006Create\020\000\022\010\n\004Join\020\001\022\006\n\002Go\020\003\"r\n\020Ne"
  "wPlayerMessage\022\n\n\002id\030\001 \001(\005\022\020\n\010username\030\002"
  " \001(\t\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\022\020\n\010map_name\030\005"
  " \001(\t\022\014\n\004name\030\006 \001(\005\022\n\n\002hp\030\007 \001(\005\"\315\002\n\023Updat"
  "ePlayerMessage\022\n\n\002id\030\001 \001(\005\022\t\n\001x\030\002 \001(\002\022\t\n"
  "\001y\030\003 \001(\002\0227\n\tdirection\030\004 \001(\0132$.trans.Upda"
  "tePlayerMessage.Direction\022\014\n\004name\030\005 \001(\005\022"
  "\r\n\005state\030\006 \001(\005\022\n\n\002hp\030\007 \001(\005\022\020\n\010username\030\010"
  " \001(\t\032P\n\tDirection\022\n\n\002up\030\001 \001(\010\022\014\n\004left\030\002 "
  "\001(\010\022\r\n\005right\030\003 \001(\010\022\014\n\004down\030\004 \001(\010\022\014\n\004fire"
  "\030\005 \001(\010\032N\n\rFireDirection\022\014\n\004f_up\030\001 \001(\010\022\016\n"
  "\006f_left\030\002 \001(\010\022\017\n\007f_right\030\003 \001(\010\022\016\n\006f_down"
  "\030\004 \001(\010\"n\n\020NewBulletMessage\022\n\n\002id\030\001 \001(\005\022\t"
  "\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\020\n\010map_name\030\004 \001(\t\022\014"
  "\n\004name\030\005 \001(\005\022\n\n\002hp\030\006 \001(\005\022\014\n\004p_id\030\007 \001(\005\"\243"
  "\001\n\023UpdateBulletMessage\022\n\n\002id\030\001 \001(\005\022\t\n\001x\030"
  "\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\014\n\004name\030\004 \001(\005\022\n\n\002hp\030\005 \001"
  "(\005\022\014\n\004p_id\030\006 \001(\005\032B\n\tDirection\022\n\n\002up\030\001 \001("
  "\010\022\014\n\004left\030\002 \001(\010\022\r\n\005right\030\003 \001(\010\022\014\n\004down\030\004"
  " \001(\010\"G\n\037ServerToUserLobbyWaitingMessage\022"
  "\r\n\005names\030\001 \001(\t\022\025\n\rwaitingIsOver\030\002 \001(\010\"8\n"
  "\037UserToServerLobbyWaitingMessage\022\025\n\rwait"
  "ingIsOver\030\001 \001(\010\"{\n\rNewBotMessage\022\n\n\002id\030\001"
  " \001(\005\022\020\n\010username\030\002 \001(\t\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004"
  " \001(\002\022\013\n\003p_x\030\005 \001(\002\022\013\n\003p_y\030\006 \001(\002\022\020\n\010map_na"
  "me\030\007 \001(\t\022\n\n\002hp\030\010 \001(\005\"\236\001\n\020UpdateBotMessag"
  "e\022\n\n\002id\030\001 \001(\005\022\020\n\010username\030\002 \001(\t\022\t\n\001x\030\003 \001"
  "(\002\022\t\n\001y\030\004 \001(\002\022\013\n\003p_x\030\005 \001(\002\022\013\n\003p_y\030\006 \001(\002\022"
  "\020\n\010map_name\030\007 \001(\t\022\n\n\002hp\030\010 \001(\005\022\016\n\006step_x\030"
  "\t \001(\002\022\016\n\006step_y\030\n \001(\002\"\267\003\n\023ServerToUserMe"
  "ssage\0224\n\004type\030\001 \001(\0162&.trans.ServerToUser"
  "Message.MessageType\022\'\n\006np_msg\030\002 \001(\0132\027.tr"
  "ans.NewPlayerMessage\022+\n\007upd_msg\030\003 \001(\0132\032."
  "trans.UpdatePlayerMessage\022\'\n\006nb_msg\030\004 \001("
  "\0132\027.trans.NewBulletMessage\022*\n\006ub_msg\030\005 \001"
  "(\0132\032.trans.UpdateBulletMessage\022\'\n\tn_bot_"
  "msg\030\006 \001(\0132\024.trans.NewBotMessage\022*\n\tu_bot"
  "_msg\030\007 \001(\0132\027.trans.UpdateBotMessage\"j\n\013M"
  "essageType\022\r\n\tNewPlayer\020\000\022\020\n\014UpdatePlaye"
  "r\020\001\022\r\n\tNewBullet\020\002\022\020\n\014UpdateBullet\020\003\022\n\n\006"
  "NewBot\020\004\022\r\n\tUpdateBot\020\005\"M\n\031ServerToUserV"
  "ectorMessage\0220\n\014vec_messages\030\001 \003(\0132\032.tra"
  "ns.ServerToUserMessageb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transition_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_transition_2eproto_sccs[20] = {
  &scc_info_NewBotMessage_transition_2eproto.base,
  &scc_info_NewBulletMessage_transition_2eproto.base,
  &scc_info_NewPlayerMessage_transition_2eproto.base,
  &scc_info_ServerToUserLobbyWaitingMessage_transition_2eproto.base,
  &scc_info_ServerToUserMessage_transition_2eproto.base,
  &scc_info_ServerToUserVectorMessage_transition_2eproto.base,
  &scc_info_SessionCreatedMessage_transition_2eproto.base,
  &scc_info_UpdateBotMessage_transition_2eproto.base,
  &scc_info_UpdateBulletMessage_transition_2eproto.base,
  &scc_info_UpdateBulletMessage_Direction_transition_2eproto.base,
  &scc_info_UpdatePlayerMessage_transition_2eproto.base,
  &scc_info_UpdatePlayerMessage_Direction_transition_2eproto.base,
  &scc_info_UpdatePlayerMessage_FireDirection_transition_2eproto.base,
  &scc_info_UserInitMessage_transition_2eproto.base,
  &scc_info_UserToServerLobbyWaitingMessage_transition_2eproto.base,
  &scc_info_UserToServerMessage_transition_2eproto.base,
  &scc_info_UserToServerMessage_BulletDirection_transition_2eproto.base,
  &scc_info_UserToServerMessage_Direction_transition_2eproto.base,
  &scc_info_UserToServerMessage_Rect_transition_2eproto.base,
  &scc_info_UserToServerMessage_Weapon_transition_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transition_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transition_2eproto = {
  false, false, descriptor_table_protodef_transition_2eproto, "transition.proto", 2590,
  &descriptor_table_transition_2eproto_once, descriptor_table_transition_2eproto_sccs, descriptor_table_transition_2eproto_deps, 20, 0,
  schemas, file_default_instances, TableStruct_transition_2eproto::offsets,
  file_level_metadata_transition_2eproto, 20, file_level_enum_descriptors_transition_2eproto, file_level_service_descriptors_transition_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_transition_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_transition_2eproto)), true);
namespace trans {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserToServerMessage_MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transition_2eproto);
  return file_level_enum_descriptors_transition_2eproto[0];
}
bool UserToServerMessage_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserToServerMessage_MessageType UserToServerMessage::Standby;
constexpr UserToServerMessage_MessageType UserToServerMessage::Move;
constexpr UserToServerMessage_MessageType UserToServerMessage::Wall;
constexpr UserToServerMessage_MessageType UserToServerMessage::Lava;
constexpr UserToServerMessage_MessageType UserToServerMessage::Spike;
constexpr UserToServerMessage_MessageType UserToServerMessage::UserName;
constexpr UserToServerMessage_MessageType UserToServerMessage::MessageType_MIN;
constexpr UserToServerMessage_MessageType UserToServerMessage::MessageType_MAX;
constexpr int UserToServerMessage::MessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserInitMessage_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transition_2eproto);
  return file_level_enum_descriptors_transition_2eproto[1];
}
bool UserInitMessage_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserInitMessage_Action UserInitMessage::Create;
constexpr UserInitMessage_Action UserInitMessage::Join;
constexpr UserInitMessage_Action UserInitMessage::Go;
constexpr UserInitMessage_Action UserInitMessage::Action_MIN;
constexpr UserInitMessage_Action UserInitMessage::Action_MAX;
constexpr int UserInitMessage::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerToUserMessage_MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transition_2eproto);
  return file_level_enum_descriptors_transition_2eproto[2];
}
bool ServerToUserMessage_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ServerToUserMessage_MessageType ServerToUserMessage::NewPlayer;
constexpr ServerToUserMessage_MessageType ServerToUserMessage::UpdatePlayer;
constexpr ServerToUserMessage_MessageType ServerToUserMessage::NewBullet;
constexpr ServerToUserMessage_MessageType ServerToUserMessage::UpdateBullet;
constexpr ServerToUserMessage_MessageType ServerToUserMessage::NewBot;
constexpr ServerToUserMessage_MessageType ServerToUserMessage::UpdateBot;
constexpr ServerToUserMessage_MessageType ServerToUserMessage::MessageType_MIN;
constexpr ServerToUserMessage_MessageType ServerToUserMessage::MessageType_MAX;
constexpr int ServerToUserMessage::MessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void UserToServerMessage_Direction::InitAsDefaultInstance() {
}
class UserToServerMessage_Direction::_Internal {
 public:
};

UserToServerMessage_Direction::UserToServerMessage_Direction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trans.UserToServerMessage.Direction)
}
UserToServerMessage_Direction::UserToServerMessage_Direction(const UserToServerMessage_Direction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&up_, &from.up_,
    static_cast<size_t>(reinterpret_cast<char*>(&fire_) -
    reinterpret_cast<char*>(&up_)) + sizeof(fire_));
  // @@protoc_insertion_point(copy_constructor:trans.UserToServerMessage.Direction)
}

void UserToServerMessage_Direction::SharedCtor() {
  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fire_) -
      reinterpret_cast<char*>(&up_)) + sizeof(fire_));
}

UserToServerMessage_Direction::~UserToServerMessage_Direction() {
  // @@protoc_insertion_point(destructor:trans.UserToServerMessage.Direction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserToServerMessage_Direction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserToServerMessage_Direction::ArenaDtor(void* object) {
  UserToServerMessage_Direction* _this = reinterpret_cast< UserToServerMessage_Direction* >(object);
  (void)_this;
}
void UserToServerMessage_Direction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserToServerMessage_Direction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserToServerMessage_Direction& UserToServerMessage_Direction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserToServerMessage_Direction_transition_2eproto.base);
  return *internal_default_instance();
}


void UserToServerMessage_Direction::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.UserToServerMessage.Direction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fire_) -
      reinterpret_cast<char*>(&up_)) + sizeof(fire_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserToServerMessage_Direction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool up = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool down = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fire = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserToServerMessage_Direction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.UserToServerMessage.Direction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool up = 1;
  if (this->up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_up(), target);
  }

  // bool left = 2;
  if (this->left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_left(), target);
  }

  // bool right = 3;
  if (this->right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_right(), target);
  }

  // bool down = 4;
  if (this->down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_down(), target);
  }

  // bool fire = 5;
  if (this->fire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_fire(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.UserToServerMessage.Direction)
  return target;
}

size_t UserToServerMessage_Direction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.UserToServerMessage.Direction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool up = 1;
  if (this->up() != 0) {
    total_size += 1 + 1;
  }

  // bool left = 2;
  if (this->left() != 0) {
    total_size += 1 + 1;
  }

  // bool right = 3;
  if (this->right() != 0) {
    total_size += 1 + 1;
  }

  // bool down = 4;
  if (this->down() != 0) {
    total_size += 1 + 1;
  }

  // bool fire = 5;
  if (this->fire() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserToServerMessage_Direction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.UserToServerMessage.Direction)
  GOOGLE_DCHECK_NE(&from, this);
  const UserToServerMessage_Direction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserToServerMessage_Direction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.UserToServerMessage.Direction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.UserToServerMessage.Direction)
    MergeFrom(*source);
  }
}

void UserToServerMessage_Direction::MergeFrom(const UserToServerMessage_Direction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.UserToServerMessage.Direction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.up() != 0) {
    _internal_set_up(from._internal_up());
  }
  if (from.left() != 0) {
    _internal_set_left(from._internal_left());
  }
  if (from.right() != 0) {
    _internal_set_right(from._internal_right());
  }
  if (from.down() != 0) {
    _internal_set_down(from._internal_down());
  }
  if (from.fire() != 0) {
    _internal_set_fire(from._internal_fire());
  }
}

void UserToServerMessage_Direction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.UserToServerMessage.Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserToServerMessage_Direction::CopyFrom(const UserToServerMessage_Direction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.UserToServerMessage.Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserToServerMessage_Direction::IsInitialized() const {
  return true;
}

void UserToServerMessage_Direction::InternalSwap(UserToServerMessage_Direction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserToServerMessage_Direction, fire_)
      + sizeof(UserToServerMessage_Direction::fire_)
      - PROTOBUF_FIELD_OFFSET(UserToServerMessage_Direction, up_)>(
          reinterpret_cast<char*>(&up_),
          reinterpret_cast<char*>(&other->up_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserToServerMessage_Direction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserToServerMessage_BulletDirection::InitAsDefaultInstance() {
}
class UserToServerMessage_BulletDirection::_Internal {
 public:
};

UserToServerMessage_BulletDirection::UserToServerMessage_BulletDirection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trans.UserToServerMessage.BulletDirection)
}
UserToServerMessage_BulletDirection::UserToServerMessage_BulletDirection(const UserToServerMessage_BulletDirection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&up_, &from.up_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_) -
    reinterpret_cast<char*>(&up_)) + sizeof(down_));
  // @@protoc_insertion_point(copy_constructor:trans.UserToServerMessage.BulletDirection)
}

void UserToServerMessage_BulletDirection::SharedCtor() {
  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_) -
      reinterpret_cast<char*>(&up_)) + sizeof(down_));
}

UserToServerMessage_BulletDirection::~UserToServerMessage_BulletDirection() {
  // @@protoc_insertion_point(destructor:trans.UserToServerMessage.BulletDirection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserToServerMessage_BulletDirection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserToServerMessage_BulletDirection::ArenaDtor(void* object) {
  UserToServerMessage_BulletDirection* _this = reinterpret_cast< UserToServerMessage_BulletDirection* >(object);
  (void)_this;
}
void UserToServerMessage_BulletDirection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserToServerMessage_BulletDirection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserToServerMessage_BulletDirection& UserToServerMessage_BulletDirection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserToServerMessage_BulletDirection_transition_2eproto.base);
  return *internal_default_instance();
}


void UserToServerMessage_BulletDirection::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.UserToServerMessage.BulletDirection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_) -
      reinterpret_cast<char*>(&up_)) + sizeof(down_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserToServerMessage_BulletDirection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool up = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool down = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserToServerMessage_BulletDirection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.UserToServerMessage.BulletDirection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool up = 1;
  if (this->up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_up(), target);
  }

  // bool left = 2;
  if (this->left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_left(), target);
  }

  // bool right = 3;
  if (this->right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_right(), target);
  }

  // bool down = 4;
  if (this->down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.UserToServerMessage.BulletDirection)
  return target;
}

size_t UserToServerMessage_BulletDirection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.UserToServerMessage.BulletDirection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool up = 1;
  if (this->up() != 0) {
    total_size += 1 + 1;
  }

  // bool left = 2;
  if (this->left() != 0) {
    total_size += 1 + 1;
  }

  // bool right = 3;
  if (this->right() != 0) {
    total_size += 1 + 1;
  }

  // bool down = 4;
  if (this->down() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserToServerMessage_BulletDirection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.UserToServerMessage.BulletDirection)
  GOOGLE_DCHECK_NE(&from, this);
  const UserToServerMessage_BulletDirection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserToServerMessage_BulletDirection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.UserToServerMessage.BulletDirection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.UserToServerMessage.BulletDirection)
    MergeFrom(*source);
  }
}

void UserToServerMessage_BulletDirection::MergeFrom(const UserToServerMessage_BulletDirection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.UserToServerMessage.BulletDirection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.up() != 0) {
    _internal_set_up(from._internal_up());
  }
  if (from.left() != 0) {
    _internal_set_left(from._internal_left());
  }
  if (from.right() != 0) {
    _internal_set_right(from._internal_right());
  }
  if (from.down() != 0) {
    _internal_set_down(from._internal_down());
  }
}

void UserToServerMessage_BulletDirection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.UserToServerMessage.BulletDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserToServerMessage_BulletDirection::CopyFrom(const UserToServerMessage_BulletDirection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.UserToServerMessage.BulletDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserToServerMessage_BulletDirection::IsInitialized() const {
  return true;
}

void UserToServerMessage_BulletDirection::InternalSwap(UserToServerMessage_BulletDirection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserToServerMessage_BulletDirection, down_)
      + sizeof(UserToServerMessage_BulletDirection::down_)
      - PROTOBUF_FIELD_OFFSET(UserToServerMessage_BulletDirection, up_)>(
          reinterpret_cast<char*>(&up_),
          reinterpret_cast<char*>(&other->up_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserToServerMessage_BulletDirection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserToServerMessage_Rect::InitAsDefaultInstance() {
}
class UserToServerMessage_Rect::_Internal {
 public:
};

UserToServerMessage_Rect::UserToServerMessage_Rect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trans.UserToServerMessage.Rect)
}
UserToServerMessage_Rect::UserToServerMessage_Rect(const UserToServerMessage_Rect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&left_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:trans.UserToServerMessage.Rect)
}

void UserToServerMessage_Rect::SharedCtor() {
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&left_)) + sizeof(height_));
}

UserToServerMessage_Rect::~UserToServerMessage_Rect() {
  // @@protoc_insertion_point(destructor:trans.UserToServerMessage.Rect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserToServerMessage_Rect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserToServerMessage_Rect::ArenaDtor(void* object) {
  UserToServerMessage_Rect* _this = reinterpret_cast< UserToServerMessage_Rect* >(object);
  (void)_this;
}
void UserToServerMessage_Rect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserToServerMessage_Rect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserToServerMessage_Rect& UserToServerMessage_Rect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserToServerMessage_Rect_transition_2eproto.base);
  return *internal_default_instance();
}


void UserToServerMessage_Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.UserToServerMessage.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&left_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserToServerMessage_Rect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 top = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserToServerMessage_Rect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.UserToServerMessage.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 left = 1;
  if (this->left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_left(), target);
  }

  // uint64 top = 2;
  if (this->top() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_top(), target);
  }

  // uint64 width = 3;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_width(), target);
  }

  // uint64 height = 4;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.UserToServerMessage.Rect)
  return target;
}

size_t UserToServerMessage_Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.UserToServerMessage.Rect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 left = 1;
  if (this->left() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_left());
  }

  // uint64 top = 2;
  if (this->top() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_top());
  }

  // uint64 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_width());
  }

  // uint64 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserToServerMessage_Rect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.UserToServerMessage.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  const UserToServerMessage_Rect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserToServerMessage_Rect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.UserToServerMessage.Rect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.UserToServerMessage.Rect)
    MergeFrom(*source);
  }
}

void UserToServerMessage_Rect::MergeFrom(const UserToServerMessage_Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.UserToServerMessage.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.left() != 0) {
    _internal_set_left(from._internal_left());
  }
  if (from.top() != 0) {
    _internal_set_top(from._internal_top());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void UserToServerMessage_Rect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.UserToServerMessage.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserToServerMessage_Rect::CopyFrom(const UserToServerMessage_Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.UserToServerMessage.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserToServerMessage_Rect::IsInitialized() const {
  return true;
}

void UserToServerMessage_Rect::InternalSwap(UserToServerMessage_Rect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserToServerMessage_Rect, height_)
      + sizeof(UserToServerMessage_Rect::height_)
      - PROTOBUF_FIELD_OFFSET(UserToServerMessage_Rect, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserToServerMessage_Rect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserToServerMessage_Weapon::InitAsDefaultInstance() {
}
class UserToServerMessage_Weapon::_Internal {
 public:
};

UserToServerMessage_Weapon::UserToServerMessage_Weapon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trans.UserToServerMessage.Weapon)
}
UserToServerMessage_Weapon::UserToServerMessage_Weapon(const UserToServerMessage_Weapon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pistol_, &from.pistol_,
    static_cast<size_t>(reinterpret_cast<char*>(&shotgun_) -
    reinterpret_cast<char*>(&pistol_)) + sizeof(shotgun_));
  // @@protoc_insertion_point(copy_constructor:trans.UserToServerMessage.Weapon)
}

void UserToServerMessage_Weapon::SharedCtor() {
  ::memset(&pistol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shotgun_) -
      reinterpret_cast<char*>(&pistol_)) + sizeof(shotgun_));
}

UserToServerMessage_Weapon::~UserToServerMessage_Weapon() {
  // @@protoc_insertion_point(destructor:trans.UserToServerMessage.Weapon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserToServerMessage_Weapon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserToServerMessage_Weapon::ArenaDtor(void* object) {
  UserToServerMessage_Weapon* _this = reinterpret_cast< UserToServerMessage_Weapon* >(object);
  (void)_this;
}
void UserToServerMessage_Weapon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserToServerMessage_Weapon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserToServerMessage_Weapon& UserToServerMessage_Weapon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserToServerMessage_Weapon_transition_2eproto.base);
  return *internal_default_instance();
}


void UserToServerMessage_Weapon::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.UserToServerMessage.Weapon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pistol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shotgun_) -
      reinterpret_cast<char*>(&pistol_)) + sizeof(shotgun_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserToServerMessage_Weapon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool pistol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pistol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool automat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          automat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shotgun = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          shotgun_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserToServerMessage_Weapon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.UserToServerMessage.Weapon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool pistol = 1;
  if (this->pistol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_pistol(), target);
  }

  // bool automat = 2;
  if (this->automat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_automat(), target);
  }

  // bool shotgun = 3;
  if (this->shotgun() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_shotgun(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.UserToServerMessage.Weapon)
  return target;
}

size_t UserToServerMessage_Weapon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.UserToServerMessage.Weapon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool pistol = 1;
  if (this->pistol() != 0) {
    total_size += 1 + 1;
  }

  // bool automat = 2;
  if (this->automat() != 0) {
    total_size += 1 + 1;
  }

  // bool shotgun = 3;
  if (this->shotgun() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserToServerMessage_Weapon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.UserToServerMessage.Weapon)
  GOOGLE_DCHECK_NE(&from, this);
  const UserToServerMessage_Weapon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserToServerMessage_Weapon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.UserToServerMessage.Weapon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.UserToServerMessage.Weapon)
    MergeFrom(*source);
  }
}

void UserToServerMessage_Weapon::MergeFrom(const UserToServerMessage_Weapon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.UserToServerMessage.Weapon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pistol() != 0) {
    _internal_set_pistol(from._internal_pistol());
  }
  if (from.automat() != 0) {
    _internal_set_automat(from._internal_automat());
  }
  if (from.shotgun() != 0) {
    _internal_set_shotgun(from._internal_shotgun());
  }
}

void UserToServerMessage_Weapon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.UserToServerMessage.Weapon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserToServerMessage_Weapon::CopyFrom(const UserToServerMessage_Weapon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.UserToServerMessage.Weapon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserToServerMessage_Weapon::IsInitialized() const {
  return true;
}

void UserToServerMessage_Weapon::InternalSwap(UserToServerMessage_Weapon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserToServerMessage_Weapon, shotgun_)
      + sizeof(UserToServerMessage_Weapon::shotgun_)
      - PROTOBUF_FIELD_OFFSET(UserToServerMessage_Weapon, pistol_)>(
          reinterpret_cast<char*>(&pistol_),
          reinterpret_cast<char*>(&other->pistol_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserToServerMessage_Weapon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserToServerMessage::InitAsDefaultInstance() {
  ::trans::_UserToServerMessage_default_instance_._instance.get_mutable()->direction_ = const_cast< ::trans::UserToServerMessage_Direction*>(
      ::trans::UserToServerMessage_Direction::internal_default_instance());
  ::trans::_UserToServerMessage_default_instance_._instance.get_mutable()->b_direction_ = const_cast< ::trans::UserToServerMessage_BulletDirection*>(
      ::trans::UserToServerMessage_BulletDirection::internal_default_instance());
  ::trans::_UserToServerMessage_default_instance_._instance.get_mutable()->rect_ = const_cast< ::trans::UserToServerMessage_Rect*>(
      ::trans::UserToServerMessage_Rect::internal_default_instance());
  ::trans::_UserToServerMessage_default_instance_._instance.get_mutable()->weapon_ = const_cast< ::trans::UserToServerMessage_Weapon*>(
      ::trans::UserToServerMessage_Weapon::internal_default_instance());
}
class UserToServerMessage::_Internal {
 public:
  static const ::trans::UserToServerMessage_Direction& direction(const UserToServerMessage* msg);
  static const ::trans::UserToServerMessage_BulletDirection& b_direction(const UserToServerMessage* msg);
  static const ::trans::UserToServerMessage_Rect& rect(const UserToServerMessage* msg);
  static const ::trans::UserToServerMessage_Weapon& weapon(const UserToServerMessage* msg);
};

const ::trans::UserToServerMessage_Direction&
UserToServerMessage::_Internal::direction(const UserToServerMessage* msg) {
  return *msg->direction_;
}
const ::trans::UserToServerMessage_BulletDirection&
UserToServerMessage::_Internal::b_direction(const UserToServerMessage* msg) {
  return *msg->b_direction_;
}
const ::trans::UserToServerMessage_Rect&
UserToServerMessage::_Internal::rect(const UserToServerMessage* msg) {
  return *msg->rect_;
}
const ::trans::UserToServerMessage_Weapon&
UserToServerMessage::_Internal::weapon(const UserToServerMessage* msg) {
  return *msg->weapon_;
}
UserToServerMessage::UserToServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trans.UserToServerMessage)
}
UserToServerMessage::UserToServerMessage(const UserToServerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  if (from._internal_has_direction()) {
    direction_ = new ::trans::UserToServerMessage_Direction(*from.direction_);
  } else {
    direction_ = nullptr;
  }
  if (from._internal_has_b_direction()) {
    b_direction_ = new ::trans::UserToServerMessage_BulletDirection(*from.b_direction_);
  } else {
    b_direction_ = nullptr;
  }
  if (from._internal_has_rect()) {
    rect_ = new ::trans::UserToServerMessage_Rect(*from.rect_);
  } else {
    rect_ = nullptr;
  }
  if (from._internal_has_weapon()) {
    weapon_ = new ::trans::UserToServerMessage_Weapon(*from.weapon_);
  } else {
    weapon_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:trans.UserToServerMessage)
}

void UserToServerMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserToServerMessage_transition_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(type_));
}

UserToServerMessage::~UserToServerMessage() {
  // @@protoc_insertion_point(destructor:trans.UserToServerMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserToServerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete direction_;
  if (this != internal_default_instance()) delete b_direction_;
  if (this != internal_default_instance()) delete rect_;
  if (this != internal_default_instance()) delete weapon_;
}

void UserToServerMessage::ArenaDtor(void* object) {
  UserToServerMessage* _this = reinterpret_cast< UserToServerMessage* >(object);
  (void)_this;
}
void UserToServerMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserToServerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserToServerMessage& UserToServerMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserToServerMessage_transition_2eproto.base);
  return *internal_default_instance();
}


void UserToServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.UserToServerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
  if (GetArena() == nullptr && b_direction_ != nullptr) {
    delete b_direction_;
  }
  b_direction_ = nullptr;
  if (GetArena() == nullptr && rect_ != nullptr) {
    delete rect_;
  }
  rect_ = nullptr;
  if (GetArena() == nullptr && weapon_ != nullptr) {
    delete weapon_;
  }
  weapon_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserToServerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .trans.UserToServerMessage.MessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::trans::UserToServerMessage_MessageType>(val));
        } else goto handle_unusual;
        continue;
      // .trans.UserToServerMessage.Direction direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trans.UserToServerMessage.BulletDirection b_direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_b_direction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trans.UserToServerMessage.Rect rect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trans.UserToServerMessage.Weapon weapon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_weapon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trans.UserToServerMessage.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserToServerMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.UserToServerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .trans.UserToServerMessage.MessageType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .trans.UserToServerMessage.Direction direction = 2;
  if (this->has_direction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::direction(this), target, stream);
  }

  // .trans.UserToServerMessage.BulletDirection b_direction = 3;
  if (this->has_b_direction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::b_direction(this), target, stream);
  }

  // .trans.UserToServerMessage.Rect rect = 4;
  if (this->has_rect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rect(this), target, stream);
  }

  // .trans.UserToServerMessage.Weapon weapon = 5;
  if (this->has_weapon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::weapon(this), target, stream);
  }

  // string username = 6;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans.UserToServerMessage.username");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.UserToServerMessage)
  return target;
}

size_t UserToServerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.UserToServerMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 6;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .trans.UserToServerMessage.Direction direction = 2;
  if (this->has_direction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *direction_);
  }

  // .trans.UserToServerMessage.BulletDirection b_direction = 3;
  if (this->has_b_direction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *b_direction_);
  }

  // .trans.UserToServerMessage.Rect rect = 4;
  if (this->has_rect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rect_);
  }

  // .trans.UserToServerMessage.Weapon weapon = 5;
  if (this->has_weapon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *weapon_);
  }

  // .trans.UserToServerMessage.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserToServerMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.UserToServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UserToServerMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserToServerMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.UserToServerMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.UserToServerMessage)
    MergeFrom(*source);
  }
}

void UserToServerMessage::MergeFrom(const UserToServerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.UserToServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.has_direction()) {
    _internal_mutable_direction()->::trans::UserToServerMessage_Direction::MergeFrom(from._internal_direction());
  }
  if (from.has_b_direction()) {
    _internal_mutable_b_direction()->::trans::UserToServerMessage_BulletDirection::MergeFrom(from._internal_b_direction());
  }
  if (from.has_rect()) {
    _internal_mutable_rect()->::trans::UserToServerMessage_Rect::MergeFrom(from._internal_rect());
  }
  if (from.has_weapon()) {
    _internal_mutable_weapon()->::trans::UserToServerMessage_Weapon::MergeFrom(from._internal_weapon());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void UserToServerMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.UserToServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserToServerMessage::CopyFrom(const UserToServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.UserToServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserToServerMessage::IsInitialized() const {
  return true;
}

void UserToServerMessage::InternalSwap(UserToServerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserToServerMessage, type_)
      + sizeof(UserToServerMessage::type_)
      - PROTOBUF_FIELD_OFFSET(UserToServerMessage, direction_)>(
          reinterpret_cast<char*>(&direction_),
          reinterpret_cast<char*>(&other->direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserToServerMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionCreatedMessage::InitAsDefaultInstance() {
}
class SessionCreatedMessage::_Internal {
 public:
};

SessionCreatedMessage::SessionCreatedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trans.SessionCreatedMessage)
}
SessionCreatedMessage::SessionCreatedMessage(const SessionCreatedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:trans.SessionCreatedMessage)
}

void SessionCreatedMessage::SharedCtor() {
  session_id_ = 0;
}

SessionCreatedMessage::~SessionCreatedMessage() {
  // @@protoc_insertion_point(destructor:trans.SessionCreatedMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionCreatedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SessionCreatedMessage::ArenaDtor(void* object) {
  SessionCreatedMessage* _this = reinterpret_cast< SessionCreatedMessage* >(object);
  (void)_this;
}
void SessionCreatedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionCreatedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionCreatedMessage& SessionCreatedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionCreatedMessage_transition_2eproto.base);
  return *internal_default_instance();
}


void SessionCreatedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.SessionCreatedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionCreatedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionCreatedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.SessionCreatedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 session_id = 1;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.SessionCreatedMessage)
  return target;
}

size_t SessionCreatedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.SessionCreatedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_session_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionCreatedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.SessionCreatedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionCreatedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionCreatedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.SessionCreatedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.SessionCreatedMessage)
    MergeFrom(*source);
  }
}

void SessionCreatedMessage::MergeFrom(const SessionCreatedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.SessionCreatedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
}

void SessionCreatedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.SessionCreatedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionCreatedMessage::CopyFrom(const SessionCreatedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.SessionCreatedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionCreatedMessage::IsInitialized() const {
  return true;
}

void SessionCreatedMessage::InternalSwap(SessionCreatedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(session_id_, other->session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionCreatedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserInitMessage::InitAsDefaultInstance() {
}
class UserInitMessage::_Internal {
 public:
};

UserInitMessage::UserInitMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trans.UserInitMessage)
}
UserInitMessage::UserInitMessage(const UserInitMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_name().empty()) {
    map_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_map_name(),
      GetArena());
  }
  ::memcpy(&action_, &from.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&action_)) + sizeof(session_id_));
  // @@protoc_insertion_point(copy_constructor:trans.UserInitMessage)
}

void UserInitMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserInitMessage_transition_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&action_)) + sizeof(session_id_));
}

UserInitMessage::~UserInitMessage() {
  // @@protoc_insertion_point(destructor:trans.UserInitMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserInitMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserInitMessage::ArenaDtor(void* object) {
  UserInitMessage* _this = reinterpret_cast< UserInitMessage* >(object);
  (void)_this;
}
void UserInitMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserInitMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInitMessage& UserInitMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInitMessage_transition_2eproto.base);
  return *internal_default_instance();
}


void UserInitMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.UserInitMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  map_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&action_)) + sizeof(session_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInitMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .trans.UserInitMessage.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::trans::UserInitMessage_Action>(val));
        } else goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trans.UserInitMessage.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string map_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trans.UserInitMessage.map_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInitMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.UserInitMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .trans.UserInitMessage.Action action = 1;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans.UserInitMessage.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // int32 session_id = 3;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_session_id(), target);
  }

  // string map_name = 4;
  if (this->map_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans.UserInitMessage.map_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_map_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.UserInitMessage)
  return target;
}

size_t UserInitMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.UserInitMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string map_name = 4;
  if (this->map_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_name());
  }

  // .trans.UserInitMessage.Action action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  // int32 session_id = 3;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_session_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInitMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.UserInitMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInitMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInitMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.UserInitMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.UserInitMessage)
    MergeFrom(*source);
  }
}

void UserInitMessage::MergeFrom(const UserInitMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.UserInitMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.map_name().size() > 0) {
    _internal_set_map_name(from._internal_map_name());
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
}

void UserInitMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.UserInitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInitMessage::CopyFrom(const UserInitMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.UserInitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInitMessage::IsInitialized() const {
  return true;
}

void UserInitMessage::InternalSwap(UserInitMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  map_name_.Swap(&other->map_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserInitMessage, session_id_)
      + sizeof(UserInitMessage::session_id_)
      - PROTOBUF_FIELD_OFFSET(UserInitMessage, action_)>(
          reinterpret_cast<char*>(&action_),
          reinterpret_cast<char*>(&other->action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInitMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewPlayerMessage::InitAsDefaultInstance() {
}
class NewPlayerMessage::_Internal {
 public:
};

NewPlayerMessage::NewPlayerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trans.NewPlayerMessage)
}
NewPlayerMessage::NewPlayerMessage(const NewPlayerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_name().empty()) {
    map_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_map_name(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hp_) -
    reinterpret_cast<char*>(&id_)) + sizeof(hp_));
  // @@protoc_insertion_point(copy_constructor:trans.NewPlayerMessage)
}

void NewPlayerMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewPlayerMessage_transition_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(hp_));
}

NewPlayerMessage::~NewPlayerMessage() {
  // @@protoc_insertion_point(destructor:trans.NewPlayerMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewPlayerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewPlayerMessage::ArenaDtor(void* object) {
  NewPlayerMessage* _this = reinterpret_cast< NewPlayerMessage* >(object);
  (void)_this;
}
void NewPlayerMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewPlayerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewPlayerMessage& NewPlayerMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewPlayerMessage_transition_2eproto.base);
  return *internal_default_instance();
}


void NewPlayerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.NewPlayerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  map_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewPlayerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trans.NewPlayerMessage.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string map_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trans.NewPlayerMessage.map_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewPlayerMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.NewPlayerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans.NewPlayerMessage.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // float x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // float y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // string map_name = 5;
  if (this->map_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans.NewPlayerMessage.map_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_map_name(), target);
  }

  // int32 name = 6;
  if (this->name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_name(), target);
  }

  // int32 hp = 7;
  if (this->hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_hp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.NewPlayerMessage)
  return target;
}

size_t NewPlayerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.NewPlayerMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string map_name = 5;
  if (this->map_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // float x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 name = 6;
  if (this->name() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_name());
  }

  // int32 hp = 7;
  if (this->hp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewPlayerMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.NewPlayerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NewPlayerMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewPlayerMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.NewPlayerMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.NewPlayerMessage)
    MergeFrom(*source);
  }
}

void NewPlayerMessage::MergeFrom(const NewPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.NewPlayerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.map_name().size() > 0) {
    _internal_set_map_name(from._internal_map_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (from.name() != 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
}

void NewPlayerMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.NewPlayerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewPlayerMessage::CopyFrom(const NewPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.NewPlayerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewPlayerMessage::IsInitialized() const {
  return true;
}

void NewPlayerMessage::InternalSwap(NewPlayerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  map_name_.Swap(&other->map_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewPlayerMessage, hp_)
      + sizeof(NewPlayerMessage::hp_)
      - PROTOBUF_FIELD_OFFSET(NewPlayerMessage, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewPlayerMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePlayerMessage_Direction::InitAsDefaultInstance() {
}
class UpdatePlayerMessage_Direction::_Internal {
 public:
};

UpdatePlayerMessage_Direction::UpdatePlayerMessage_Direction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trans.UpdatePlayerMessage.Direction)
}
UpdatePlayerMessage_Direction::UpdatePlayerMessage_Direction(const UpdatePlayerMessage_Direction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&up_, &from.up_,
    static_cast<size_t>(reinterpret_cast<char*>(&fire_) -
    reinterpret_cast<char*>(&up_)) + sizeof(fire_));
  // @@protoc_insertion_point(copy_constructor:trans.UpdatePlayerMessage.Direction)
}

void UpdatePlayerMessage_Direction::SharedCtor() {
  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fire_) -
      reinterpret_cast<char*>(&up_)) + sizeof(fire_));
}

UpdatePlayerMessage_Direction::~UpdatePlayerMessage_Direction() {
  // @@protoc_insertion_point(destructor:trans.UpdatePlayerMessage.Direction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdatePlayerMessage_Direction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdatePlayerMessage_Direction::ArenaDtor(void* object) {
  UpdatePlayerMessage_Direction* _this = reinterpret_cast< UpdatePlayerMessage_Direction* >(object);
  (void)_this;
}
void UpdatePlayerMessage_Direction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdatePlayerMessage_Direction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePlayerMessage_Direction& UpdatePlayerMessage_Direction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePlayerMessage_Direction_transition_2eproto.base);
  return *internal_default_instance();
}


void UpdatePlayerMessage_Direction::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.UpdatePlayerMessage.Direction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fire_) -
      reinterpret_cast<char*>(&up_)) + sizeof(fire_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePlayerMessage_Direction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool up = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool down = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fire = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePlayerMessage_Direction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.UpdatePlayerMessage.Direction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool up = 1;
  if (this->up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_up(), target);
  }

  // bool left = 2;
  if (this->left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_left(), target);
  }

  // bool right = 3;
  if (this->right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_right(), target);
  }

  // bool down = 4;
  if (this->down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_down(), target);
  }

  // bool fire = 5;
  if (this->fire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_fire(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.UpdatePlayerMessage.Direction)
  return target;
}

size_t UpdatePlayerMessage_Direction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.UpdatePlayerMessage.Direction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool up = 1;
  if (this->up() != 0) {
    total_size += 1 + 1;
  }

  // bool left = 2;
  if (this->left() != 0) {
    total_size += 1 + 1;
  }

  // bool right = 3;
  if (this->right() != 0) {
    total_size += 1 + 1;
  }

  // bool down = 4;
  if (this->down() != 0) {
    total_size += 1 + 1;
  }

  // bool fire = 5;
  if (this->fire() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePlayerMessage_Direction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.UpdatePlayerMessage.Direction)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePlayerMessage_Direction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePlayerMessage_Direction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.UpdatePlayerMessage.Direction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.UpdatePlayerMessage.Direction)
    MergeFrom(*source);
  }
}

void UpdatePlayerMessage_Direction::MergeFrom(const UpdatePlayerMessage_Direction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.UpdatePlayerMessage.Direction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.up() != 0) {
    _internal_set_up(from._internal_up());
  }
  if (from.left() != 0) {
    _internal_set_left(from._internal_left());
  }
  if (from.right() != 0) {
    _internal_set_right(from._internal_right());
  }
  if (from.down() != 0) {
    _internal_set_down(from._internal_down());
  }
  if (from.fire() != 0) {
    _internal_set_fire(from._internal_fire());
  }
}

void UpdatePlayerMessage_Direction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.UpdatePlayerMessage.Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePlayerMessage_Direction::CopyFrom(const UpdatePlayerMessage_Direction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.UpdatePlayerMessage.Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePlayerMessage_Direction::IsInitialized() const {
  return true;
}

void UpdatePlayerMessage_Direction::InternalSwap(UpdatePlayerMessage_Direction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdatePlayerMessage_Direction, fire_)
      + sizeof(UpdatePlayerMessage_Direction::fire_)
      - PROTOBUF_FIELD_OFFSET(UpdatePlayerMessage_Direction, up_)>(
          reinterpret_cast<char*>(&up_),
          reinterpret_cast<char*>(&other->up_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePlayerMessage_Direction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePlayerMessage_FireDirection::InitAsDefaultInstance() {
}
class UpdatePlayerMessage_FireDirection::_Internal {
 public:
};

UpdatePlayerMessage_FireDirection::UpdatePlayerMessage_FireDirection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trans.UpdatePlayerMessage.FireDirection)
}
UpdatePlayerMessage_FireDirection::UpdatePlayerMessage_FireDirection(const UpdatePlayerMessage_FireDirection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&f_up_, &from.f_up_,
    static_cast<size_t>(reinterpret_cast<char*>(&f_down_) -
    reinterpret_cast<char*>(&f_up_)) + sizeof(f_down_));
  // @@protoc_insertion_point(copy_constructor:trans.UpdatePlayerMessage.FireDirection)
}

void UpdatePlayerMessage_FireDirection::SharedCtor() {
  ::memset(&f_up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f_down_) -
      reinterpret_cast<char*>(&f_up_)) + sizeof(f_down_));
}

UpdatePlayerMessage_FireDirection::~UpdatePlayerMessage_FireDirection() {
  // @@protoc_insertion_point(destructor:trans.UpdatePlayerMessage.FireDirection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdatePlayerMessage_FireDirection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdatePlayerMessage_FireDirection::ArenaDtor(void* object) {
  UpdatePlayerMessage_FireDirection* _this = reinterpret_cast< UpdatePlayerMessage_FireDirection* >(object);
  (void)_this;
}
void UpdatePlayerMessage_FireDirection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdatePlayerMessage_FireDirection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePlayerMessage_FireDirection& UpdatePlayerMessage_FireDirection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePlayerMessage_FireDirection_transition_2eproto.base);
  return *internal_default_instance();
}


void UpdatePlayerMessage_FireDirection::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.UpdatePlayerMessage.FireDirection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&f_up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f_down_) -
      reinterpret_cast<char*>(&f_up_)) + sizeof(f_down_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePlayerMessage_FireDirection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool f_up = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          f_up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool f_left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          f_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool f_right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          f_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool f_down = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          f_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePlayerMessage_FireDirection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.UpdatePlayerMessage.FireDirection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool f_up = 1;
  if (this->f_up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_f_up(), target);
  }

  // bool f_left = 2;
  if (this->f_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_f_left(), target);
  }

  // bool f_right = 3;
  if (this->f_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_f_right(), target);
  }

  // bool f_down = 4;
  if (this->f_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_f_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.UpdatePlayerMessage.FireDirection)
  return target;
}

size_t UpdatePlayerMessage_FireDirection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.UpdatePlayerMessage.FireDirection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool f_up = 1;
  if (this->f_up() != 0) {
    total_size += 1 + 1;
  }

  // bool f_left = 2;
  if (this->f_left() != 0) {
    total_size += 1 + 1;
  }

  // bool f_right = 3;
  if (this->f_right() != 0) {
    total_size += 1 + 1;
  }

  // bool f_down = 4;
  if (this->f_down() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePlayerMessage_FireDirection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.UpdatePlayerMessage.FireDirection)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePlayerMessage_FireDirection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePlayerMessage_FireDirection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.UpdatePlayerMessage.FireDirection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.UpdatePlayerMessage.FireDirection)
    MergeFrom(*source);
  }
}

void UpdatePlayerMessage_FireDirection::MergeFrom(const UpdatePlayerMessage_FireDirection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.UpdatePlayerMessage.FireDirection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.f_up() != 0) {
    _internal_set_f_up(from._internal_f_up());
  }
  if (from.f_left() != 0) {
    _internal_set_f_left(from._internal_f_left());
  }
  if (from.f_right() != 0) {
    _internal_set_f_right(from._internal_f_right());
  }
  if (from.f_down() != 0) {
    _internal_set_f_down(from._internal_f_down());
  }
}

void UpdatePlayerMessage_FireDirection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.UpdatePlayerMessage.FireDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePlayerMessage_FireDirection::CopyFrom(const UpdatePlayerMessage_FireDirection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.UpdatePlayerMessage.FireDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePlayerMessage_FireDirection::IsInitialized() const {
  return true;
}

void UpdatePlayerMessage_FireDirection::InternalSwap(UpdatePlayerMessage_FireDirection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdatePlayerMessage_FireDirection, f_down_)
      + sizeof(UpdatePlayerMessage_FireDirection::f_down_)
      - PROTOBUF_FIELD_OFFSET(UpdatePlayerMessage_FireDirection, f_up_)>(
          reinterpret_cast<char*>(&f_up_),
          reinterpret_cast<char*>(&other->f_up_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePlayerMessage_FireDirection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePlayerMessage::InitAsDefaultInstance() {
  ::trans::_UpdatePlayerMessage_default_instance_._instance.get_mutable()->direction_ = const_cast< ::trans::UpdatePlayerMessage_Direction*>(
      ::trans::UpdatePlayerMessage_Direction::internal_default_instance());
}
class UpdatePlayerMessage::_Internal {
 public:
  static const ::trans::UpdatePlayerMessage_Direction& direction(const UpdatePlayerMessage* msg);
};

const ::trans::UpdatePlayerMessage_Direction&
UpdatePlayerMessage::_Internal::direction(const UpdatePlayerMessage* msg) {
  return *msg->direction_;
}
UpdatePlayerMessage::UpdatePlayerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trans.UpdatePlayerMessage)
}
UpdatePlayerMessage::UpdatePlayerMessage(const UpdatePlayerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  if (from._internal_has_direction()) {
    direction_ = new ::trans::UpdatePlayerMessage_Direction(*from.direction_);
  } else {
    direction_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hp_) -
    reinterpret_cast<char*>(&id_)) + sizeof(hp_));
  // @@protoc_insertion_point(copy_constructor:trans.UpdatePlayerMessage)
}

void UpdatePlayerMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdatePlayerMessage_transition_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hp_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(hp_));
}

UpdatePlayerMessage::~UpdatePlayerMessage() {
  // @@protoc_insertion_point(destructor:trans.UpdatePlayerMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdatePlayerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete direction_;
}

void UpdatePlayerMessage::ArenaDtor(void* object) {
  UpdatePlayerMessage* _this = reinterpret_cast< UpdatePlayerMessage* >(object);
  (void)_this;
}
void UpdatePlayerMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdatePlayerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePlayerMessage& UpdatePlayerMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePlayerMessage_transition_2eproto.base);
  return *internal_default_instance();
}


void UpdatePlayerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.UpdatePlayerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePlayerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .trans.UpdatePlayerMessage.Direction direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trans.UpdatePlayerMessage.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePlayerMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.UpdatePlayerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // .trans.UpdatePlayerMessage.Direction direction = 4;
  if (this->has_direction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::direction(this), target, stream);
  }

  // int32 name = 5;
  if (this->name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_name(), target);
  }

  // int32 state = 6;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_state(), target);
  }

  // int32 hp = 7;
  if (this->hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_hp(), target);
  }

  // string username = 8;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans.UpdatePlayerMessage.username");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.UpdatePlayerMessage)
  return target;
}

size_t UpdatePlayerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.UpdatePlayerMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 8;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .trans.UpdatePlayerMessage.Direction direction = 4;
  if (this->has_direction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *direction_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 name = 5;
  if (this->name() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_name());
  }

  // int32 state = 6;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 hp = 7;
  if (this->hp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePlayerMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.UpdatePlayerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePlayerMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePlayerMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.UpdatePlayerMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.UpdatePlayerMessage)
    MergeFrom(*source);
  }
}

void UpdatePlayerMessage::MergeFrom(const UpdatePlayerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.UpdatePlayerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.has_direction()) {
    _internal_mutable_direction()->::trans::UpdatePlayerMessage_Direction::MergeFrom(from._internal_direction());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (from.name() != 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
}

void UpdatePlayerMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.UpdatePlayerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePlayerMessage::CopyFrom(const UpdatePlayerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.UpdatePlayerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePlayerMessage::IsInitialized() const {
  return true;
}

void UpdatePlayerMessage::InternalSwap(UpdatePlayerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdatePlayerMessage, hp_)
      + sizeof(UpdatePlayerMessage::hp_)
      - PROTOBUF_FIELD_OFFSET(UpdatePlayerMessage, direction_)>(
          reinterpret_cast<char*>(&direction_),
          reinterpret_cast<char*>(&other->direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePlayerMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewBulletMessage::InitAsDefaultInstance() {
}
class NewBulletMessage::_Internal {
 public:
};

NewBulletMessage::NewBulletMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trans.NewBulletMessage)
}
NewBulletMessage::NewBulletMessage(const NewBulletMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_name().empty()) {
    map_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_map_name(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&p_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(p_id_));
  // @@protoc_insertion_point(copy_constructor:trans.NewBulletMessage)
}

void NewBulletMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewBulletMessage_transition_2eproto.base);
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(p_id_));
}

NewBulletMessage::~NewBulletMessage() {
  // @@protoc_insertion_point(destructor:trans.NewBulletMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewBulletMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewBulletMessage::ArenaDtor(void* object) {
  NewBulletMessage* _this = reinterpret_cast< NewBulletMessage* >(object);
  (void)_this;
}
void NewBulletMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewBulletMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewBulletMessage& NewBulletMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewBulletMessage_transition_2eproto.base);
  return *internal_default_instance();
}


void NewBulletMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.NewBulletMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(p_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewBulletMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string map_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trans.NewBulletMessage.map_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 p_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          p_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewBulletMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.NewBulletMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // string map_name = 4;
  if (this->map_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans.NewBulletMessage.map_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_map_name(), target);
  }

  // int32 name = 5;
  if (this->name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_name(), target);
  }

  // int32 hp = 6;
  if (this->hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_hp(), target);
  }

  // int32 p_id = 7;
  if (this->p_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_p_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.NewBulletMessage)
  return target;
}

size_t NewBulletMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.NewBulletMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string map_name = 4;
  if (this->map_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 name = 5;
  if (this->name() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_name());
  }

  // int32 hp = 6;
  if (this->hp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hp());
  }

  // int32 p_id = 7;
  if (this->p_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_p_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewBulletMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.NewBulletMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NewBulletMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewBulletMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.NewBulletMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.NewBulletMessage)
    MergeFrom(*source);
  }
}

void NewBulletMessage::MergeFrom(const NewBulletMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.NewBulletMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_name().size() > 0) {
    _internal_set_map_name(from._internal_map_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (from.name() != 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  if (from.p_id() != 0) {
    _internal_set_p_id(from._internal_p_id());
  }
}

void NewBulletMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.NewBulletMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewBulletMessage::CopyFrom(const NewBulletMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.NewBulletMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewBulletMessage::IsInitialized() const {
  return true;
}

void NewBulletMessage::InternalSwap(NewBulletMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  map_name_.Swap(&other->map_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewBulletMessage, p_id_)
      + sizeof(NewBulletMessage::p_id_)
      - PROTOBUF_FIELD_OFFSET(NewBulletMessage, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewBulletMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateBulletMessage_Direction::InitAsDefaultInstance() {
}
class UpdateBulletMessage_Direction::_Internal {
 public:
};

UpdateBulletMessage_Direction::UpdateBulletMessage_Direction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trans.UpdateBulletMessage.Direction)
}
UpdateBulletMessage_Direction::UpdateBulletMessage_Direction(const UpdateBulletMessage_Direction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&up_, &from.up_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_) -
    reinterpret_cast<char*>(&up_)) + sizeof(down_));
  // @@protoc_insertion_point(copy_constructor:trans.UpdateBulletMessage.Direction)
}

void UpdateBulletMessage_Direction::SharedCtor() {
  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_) -
      reinterpret_cast<char*>(&up_)) + sizeof(down_));
}

UpdateBulletMessage_Direction::~UpdateBulletMessage_Direction() {
  // @@protoc_insertion_point(destructor:trans.UpdateBulletMessage.Direction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateBulletMessage_Direction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateBulletMessage_Direction::ArenaDtor(void* object) {
  UpdateBulletMessage_Direction* _this = reinterpret_cast< UpdateBulletMessage_Direction* >(object);
  (void)_this;
}
void UpdateBulletMessage_Direction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateBulletMessage_Direction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateBulletMessage_Direction& UpdateBulletMessage_Direction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateBulletMessage_Direction_transition_2eproto.base);
  return *internal_default_instance();
}


void UpdateBulletMessage_Direction::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.UpdateBulletMessage.Direction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_) -
      reinterpret_cast<char*>(&up_)) + sizeof(down_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateBulletMessage_Direction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool up = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool down = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateBulletMessage_Direction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.UpdateBulletMessage.Direction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool up = 1;
  if (this->up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_up(), target);
  }

  // bool left = 2;
  if (this->left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_left(), target);
  }

  // bool right = 3;
  if (this->right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_right(), target);
  }

  // bool down = 4;
  if (this->down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.UpdateBulletMessage.Direction)
  return target;
}

size_t UpdateBulletMessage_Direction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.UpdateBulletMessage.Direction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool up = 1;
  if (this->up() != 0) {
    total_size += 1 + 1;
  }

  // bool left = 2;
  if (this->left() != 0) {
    total_size += 1 + 1;
  }

  // bool right = 3;
  if (this->right() != 0) {
    total_size += 1 + 1;
  }

  // bool down = 4;
  if (this->down() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateBulletMessage_Direction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.UpdateBulletMessage.Direction)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateBulletMessage_Direction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateBulletMessage_Direction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.UpdateBulletMessage.Direction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.UpdateBulletMessage.Direction)
    MergeFrom(*source);
  }
}

void UpdateBulletMessage_Direction::MergeFrom(const UpdateBulletMessage_Direction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.UpdateBulletMessage.Direction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.up() != 0) {
    _internal_set_up(from._internal_up());
  }
  if (from.left() != 0) {
    _internal_set_left(from._internal_left());
  }
  if (from.right() != 0) {
    _internal_set_right(from._internal_right());
  }
  if (from.down() != 0) {
    _internal_set_down(from._internal_down());
  }
}

void UpdateBulletMessage_Direction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.UpdateBulletMessage.Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBulletMessage_Direction::CopyFrom(const UpdateBulletMessage_Direction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.UpdateBulletMessage.Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBulletMessage_Direction::IsInitialized() const {
  return true;
}

void UpdateBulletMessage_Direction::InternalSwap(UpdateBulletMessage_Direction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateBulletMessage_Direction, down_)
      + sizeof(UpdateBulletMessage_Direction::down_)
      - PROTOBUF_FIELD_OFFSET(UpdateBulletMessage_Direction, up_)>(
          reinterpret_cast<char*>(&up_),
          reinterpret_cast<char*>(&other->up_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateBulletMessage_Direction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateBulletMessage::InitAsDefaultInstance() {
}
class UpdateBulletMessage::_Internal {
 public:
};

UpdateBulletMessage::UpdateBulletMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trans.UpdateBulletMessage)
}
UpdateBulletMessage::UpdateBulletMessage(const UpdateBulletMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&p_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(p_id_));
  // @@protoc_insertion_point(copy_constructor:trans.UpdateBulletMessage)
}

void UpdateBulletMessage::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(p_id_));
}

UpdateBulletMessage::~UpdateBulletMessage() {
  // @@protoc_insertion_point(destructor:trans.UpdateBulletMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateBulletMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateBulletMessage::ArenaDtor(void* object) {
  UpdateBulletMessage* _this = reinterpret_cast< UpdateBulletMessage* >(object);
  (void)_this;
}
void UpdateBulletMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateBulletMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateBulletMessage& UpdateBulletMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateBulletMessage_transition_2eproto.base);
  return *internal_default_instance();
}


void UpdateBulletMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.UpdateBulletMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(p_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateBulletMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 p_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          p_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateBulletMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.UpdateBulletMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // int32 name = 4;
  if (this->name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_name(), target);
  }

  // int32 hp = 5;
  if (this->hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_hp(), target);
  }

  // int32 p_id = 6;
  if (this->p_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_p_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.UpdateBulletMessage)
  return target;
}

size_t UpdateBulletMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.UpdateBulletMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 name = 4;
  if (this->name() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_name());
  }

  // int32 hp = 5;
  if (this->hp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hp());
  }

  // int32 p_id = 6;
  if (this->p_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_p_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateBulletMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.UpdateBulletMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateBulletMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateBulletMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.UpdateBulletMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.UpdateBulletMessage)
    MergeFrom(*source);
  }
}

void UpdateBulletMessage::MergeFrom(const UpdateBulletMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.UpdateBulletMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (from.name() != 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  if (from.p_id() != 0) {
    _internal_set_p_id(from._internal_p_id());
  }
}

void UpdateBulletMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.UpdateBulletMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBulletMessage::CopyFrom(const UpdateBulletMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.UpdateBulletMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBulletMessage::IsInitialized() const {
  return true;
}

void UpdateBulletMessage::InternalSwap(UpdateBulletMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateBulletMessage, p_id_)
      + sizeof(UpdateBulletMessage::p_id_)
      - PROTOBUF_FIELD_OFFSET(UpdateBulletMessage, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateBulletMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToUserLobbyWaitingMessage::InitAsDefaultInstance() {
}
class ServerToUserLobbyWaitingMessage::_Internal {
 public:
};

ServerToUserLobbyWaitingMessage::ServerToUserLobbyWaitingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trans.ServerToUserLobbyWaitingMessage)
}
ServerToUserLobbyWaitingMessage::ServerToUserLobbyWaitingMessage(const ServerToUserLobbyWaitingMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  names_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_names().empty()) {
    names_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_names(),
      GetArena());
  }
  waitingisover_ = from.waitingisover_;
  // @@protoc_insertion_point(copy_constructor:trans.ServerToUserLobbyWaitingMessage)
}

void ServerToUserLobbyWaitingMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToUserLobbyWaitingMessage_transition_2eproto.base);
  names_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  waitingisover_ = false;
}

ServerToUserLobbyWaitingMessage::~ServerToUserLobbyWaitingMessage() {
  // @@protoc_insertion_point(destructor:trans.ServerToUserLobbyWaitingMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToUserLobbyWaitingMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  names_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerToUserLobbyWaitingMessage::ArenaDtor(void* object) {
  ServerToUserLobbyWaitingMessage* _this = reinterpret_cast< ServerToUserLobbyWaitingMessage* >(object);
  (void)_this;
}
void ServerToUserLobbyWaitingMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToUserLobbyWaitingMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToUserLobbyWaitingMessage& ServerToUserLobbyWaitingMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToUserLobbyWaitingMessage_transition_2eproto.base);
  return *internal_default_instance();
}


void ServerToUserLobbyWaitingMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.ServerToUserLobbyWaitingMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  waitingisover_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToUserLobbyWaitingMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_names();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trans.ServerToUserLobbyWaitingMessage.names"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool waitingIsOver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          waitingisover_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToUserLobbyWaitingMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.ServerToUserLobbyWaitingMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string names = 1;
  if (this->names().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_names().data(), static_cast<int>(this->_internal_names().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans.ServerToUserLobbyWaitingMessage.names");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_names(), target);
  }

  // bool waitingIsOver = 2;
  if (this->waitingisover() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_waitingisover(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.ServerToUserLobbyWaitingMessage)
  return target;
}

size_t ServerToUserLobbyWaitingMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.ServerToUserLobbyWaitingMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string names = 1;
  if (this->names().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_names());
  }

  // bool waitingIsOver = 2;
  if (this->waitingisover() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToUserLobbyWaitingMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.ServerToUserLobbyWaitingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToUserLobbyWaitingMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToUserLobbyWaitingMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.ServerToUserLobbyWaitingMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.ServerToUserLobbyWaitingMessage)
    MergeFrom(*source);
  }
}

void ServerToUserLobbyWaitingMessage::MergeFrom(const ServerToUserLobbyWaitingMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.ServerToUserLobbyWaitingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.names().size() > 0) {
    _internal_set_names(from._internal_names());
  }
  if (from.waitingisover() != 0) {
    _internal_set_waitingisover(from._internal_waitingisover());
  }
}

void ServerToUserLobbyWaitingMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.ServerToUserLobbyWaitingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToUserLobbyWaitingMessage::CopyFrom(const ServerToUserLobbyWaitingMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.ServerToUserLobbyWaitingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToUserLobbyWaitingMessage::IsInitialized() const {
  return true;
}

void ServerToUserLobbyWaitingMessage::InternalSwap(ServerToUserLobbyWaitingMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  names_.Swap(&other->names_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(waitingisover_, other->waitingisover_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToUserLobbyWaitingMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserToServerLobbyWaitingMessage::InitAsDefaultInstance() {
}
class UserToServerLobbyWaitingMessage::_Internal {
 public:
};

UserToServerLobbyWaitingMessage::UserToServerLobbyWaitingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trans.UserToServerLobbyWaitingMessage)
}
UserToServerLobbyWaitingMessage::UserToServerLobbyWaitingMessage(const UserToServerLobbyWaitingMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  waitingisover_ = from.waitingisover_;
  // @@protoc_insertion_point(copy_constructor:trans.UserToServerLobbyWaitingMessage)
}

void UserToServerLobbyWaitingMessage::SharedCtor() {
  waitingisover_ = false;
}

UserToServerLobbyWaitingMessage::~UserToServerLobbyWaitingMessage() {
  // @@protoc_insertion_point(destructor:trans.UserToServerLobbyWaitingMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserToServerLobbyWaitingMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserToServerLobbyWaitingMessage::ArenaDtor(void* object) {
  UserToServerLobbyWaitingMessage* _this = reinterpret_cast< UserToServerLobbyWaitingMessage* >(object);
  (void)_this;
}
void UserToServerLobbyWaitingMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserToServerLobbyWaitingMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserToServerLobbyWaitingMessage& UserToServerLobbyWaitingMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserToServerLobbyWaitingMessage_transition_2eproto.base);
  return *internal_default_instance();
}


void UserToServerLobbyWaitingMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.UserToServerLobbyWaitingMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waitingisover_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserToServerLobbyWaitingMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool waitingIsOver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          waitingisover_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserToServerLobbyWaitingMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.UserToServerLobbyWaitingMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool waitingIsOver = 1;
  if (this->waitingisover() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_waitingisover(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.UserToServerLobbyWaitingMessage)
  return target;
}

size_t UserToServerLobbyWaitingMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.UserToServerLobbyWaitingMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool waitingIsOver = 1;
  if (this->waitingisover() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserToServerLobbyWaitingMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.UserToServerLobbyWaitingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UserToServerLobbyWaitingMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserToServerLobbyWaitingMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.UserToServerLobbyWaitingMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.UserToServerLobbyWaitingMessage)
    MergeFrom(*source);
  }
}

void UserToServerLobbyWaitingMessage::MergeFrom(const UserToServerLobbyWaitingMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.UserToServerLobbyWaitingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.waitingisover() != 0) {
    _internal_set_waitingisover(from._internal_waitingisover());
  }
}

void UserToServerLobbyWaitingMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.UserToServerLobbyWaitingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserToServerLobbyWaitingMessage::CopyFrom(const UserToServerLobbyWaitingMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.UserToServerLobbyWaitingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserToServerLobbyWaitingMessage::IsInitialized() const {
  return true;
}

void UserToServerLobbyWaitingMessage::InternalSwap(UserToServerLobbyWaitingMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(waitingisover_, other->waitingisover_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserToServerLobbyWaitingMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewBotMessage::InitAsDefaultInstance() {
}
class NewBotMessage::_Internal {
 public:
};

NewBotMessage::NewBotMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trans.NewBotMessage)
}
NewBotMessage::NewBotMessage(const NewBotMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_name().empty()) {
    map_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_map_name(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hp_) -
    reinterpret_cast<char*>(&id_)) + sizeof(hp_));
  // @@protoc_insertion_point(copy_constructor:trans.NewBotMessage)
}

void NewBotMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewBotMessage_transition_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(hp_));
}

NewBotMessage::~NewBotMessage() {
  // @@protoc_insertion_point(destructor:trans.NewBotMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewBotMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewBotMessage::ArenaDtor(void* object) {
  NewBotMessage* _this = reinterpret_cast< NewBotMessage* >(object);
  (void)_this;
}
void NewBotMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewBotMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewBotMessage& NewBotMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewBotMessage_transition_2eproto.base);
  return *internal_default_instance();
}


void NewBotMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.NewBotMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  map_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewBotMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trans.NewBotMessage.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float p_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          p_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float p_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          p_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string map_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trans.NewBotMessage.map_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewBotMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.NewBotMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans.NewBotMessage.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // float x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // float y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // float p_x = 5;
  if (!(this->p_x() <= 0 && this->p_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_p_x(), target);
  }

  // float p_y = 6;
  if (!(this->p_y() <= 0 && this->p_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_p_y(), target);
  }

  // string map_name = 7;
  if (this->map_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans.NewBotMessage.map_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_map_name(), target);
  }

  // int32 hp = 8;
  if (this->hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_hp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.NewBotMessage)
  return target;
}

size_t NewBotMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.NewBotMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string map_name = 7;
  if (this->map_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // float x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float p_x = 5;
  if (!(this->p_x() <= 0 && this->p_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float p_y = 6;
  if (!(this->p_y() <= 0 && this->p_y() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 hp = 8;
  if (this->hp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewBotMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.NewBotMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NewBotMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewBotMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.NewBotMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.NewBotMessage)
    MergeFrom(*source);
  }
}

void NewBotMessage::MergeFrom(const NewBotMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.NewBotMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.map_name().size() > 0) {
    _internal_set_map_name(from._internal_map_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.p_x() <= 0 && from.p_x() >= 0)) {
    _internal_set_p_x(from._internal_p_x());
  }
  if (!(from.p_y() <= 0 && from.p_y() >= 0)) {
    _internal_set_p_y(from._internal_p_y());
  }
  if (from.hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
}

void NewBotMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.NewBotMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewBotMessage::CopyFrom(const NewBotMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.NewBotMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewBotMessage::IsInitialized() const {
  return true;
}

void NewBotMessage::InternalSwap(NewBotMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  map_name_.Swap(&other->map_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewBotMessage, hp_)
      + sizeof(NewBotMessage::hp_)
      - PROTOBUF_FIELD_OFFSET(NewBotMessage, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewBotMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateBotMessage::InitAsDefaultInstance() {
}
class UpdateBotMessage::_Internal {
 public:
};

UpdateBotMessage::UpdateBotMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trans.UpdateBotMessage)
}
UpdateBotMessage::UpdateBotMessage(const UpdateBotMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_name().empty()) {
    map_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_map_name(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_y_) -
    reinterpret_cast<char*>(&id_)) + sizeof(step_y_));
  // @@protoc_insertion_point(copy_constructor:trans.UpdateBotMessage)
}

void UpdateBotMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateBotMessage_transition_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_y_) -
      reinterpret_cast<char*>(&id_)) + sizeof(step_y_));
}

UpdateBotMessage::~UpdateBotMessage() {
  // @@protoc_insertion_point(destructor:trans.UpdateBotMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateBotMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateBotMessage::ArenaDtor(void* object) {
  UpdateBotMessage* _this = reinterpret_cast< UpdateBotMessage* >(object);
  (void)_this;
}
void UpdateBotMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateBotMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateBotMessage& UpdateBotMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateBotMessage_transition_2eproto.base);
  return *internal_default_instance();
}


void UpdateBotMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.UpdateBotMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  map_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_y_) -
      reinterpret_cast<char*>(&id_)) + sizeof(step_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateBotMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trans.UpdateBotMessage.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float p_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          p_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float p_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          p_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string map_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trans.UpdateBotMessage.map_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float step_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          step_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float step_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          step_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateBotMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.UpdateBotMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans.UpdateBotMessage.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // float x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // float y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // float p_x = 5;
  if (!(this->p_x() <= 0 && this->p_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_p_x(), target);
  }

  // float p_y = 6;
  if (!(this->p_y() <= 0 && this->p_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_p_y(), target);
  }

  // string map_name = 7;
  if (this->map_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans.UpdateBotMessage.map_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_map_name(), target);
  }

  // int32 hp = 8;
  if (this->hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_hp(), target);
  }

  // float step_x = 9;
  if (!(this->step_x() <= 0 && this->step_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_step_x(), target);
  }

  // float step_y = 10;
  if (!(this->step_y() <= 0 && this->step_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_step_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.UpdateBotMessage)
  return target;
}

size_t UpdateBotMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.UpdateBotMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string map_name = 7;
  if (this->map_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // float x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float p_x = 5;
  if (!(this->p_x() <= 0 && this->p_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float p_y = 6;
  if (!(this->p_y() <= 0 && this->p_y() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 hp = 8;
  if (this->hp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hp());
  }

  // float step_x = 9;
  if (!(this->step_x() <= 0 && this->step_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float step_y = 10;
  if (!(this->step_y() <= 0 && this->step_y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateBotMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.UpdateBotMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateBotMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateBotMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.UpdateBotMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.UpdateBotMessage)
    MergeFrom(*source);
  }
}

void UpdateBotMessage::MergeFrom(const UpdateBotMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.UpdateBotMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.map_name().size() > 0) {
    _internal_set_map_name(from._internal_map_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.p_x() <= 0 && from.p_x() >= 0)) {
    _internal_set_p_x(from._internal_p_x());
  }
  if (!(from.p_y() <= 0 && from.p_y() >= 0)) {
    _internal_set_p_y(from._internal_p_y());
  }
  if (from.hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  if (!(from.step_x() <= 0 && from.step_x() >= 0)) {
    _internal_set_step_x(from._internal_step_x());
  }
  if (!(from.step_y() <= 0 && from.step_y() >= 0)) {
    _internal_set_step_y(from._internal_step_y());
  }
}

void UpdateBotMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.UpdateBotMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBotMessage::CopyFrom(const UpdateBotMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.UpdateBotMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBotMessage::IsInitialized() const {
  return true;
}

void UpdateBotMessage::InternalSwap(UpdateBotMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  map_name_.Swap(&other->map_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateBotMessage, step_y_)
      + sizeof(UpdateBotMessage::step_y_)
      - PROTOBUF_FIELD_OFFSET(UpdateBotMessage, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateBotMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToUserMessage::InitAsDefaultInstance() {
  ::trans::_ServerToUserMessage_default_instance_._instance.get_mutable()->np_msg_ = const_cast< ::trans::NewPlayerMessage*>(
      ::trans::NewPlayerMessage::internal_default_instance());
  ::trans::_ServerToUserMessage_default_instance_._instance.get_mutable()->upd_msg_ = const_cast< ::trans::UpdatePlayerMessage*>(
      ::trans::UpdatePlayerMessage::internal_default_instance());
  ::trans::_ServerToUserMessage_default_instance_._instance.get_mutable()->nb_msg_ = const_cast< ::trans::NewBulletMessage*>(
      ::trans::NewBulletMessage::internal_default_instance());
  ::trans::_ServerToUserMessage_default_instance_._instance.get_mutable()->ub_msg_ = const_cast< ::trans::UpdateBulletMessage*>(
      ::trans::UpdateBulletMessage::internal_default_instance());
  ::trans::_ServerToUserMessage_default_instance_._instance.get_mutable()->n_bot_msg_ = const_cast< ::trans::NewBotMessage*>(
      ::trans::NewBotMessage::internal_default_instance());
  ::trans::_ServerToUserMessage_default_instance_._instance.get_mutable()->u_bot_msg_ = const_cast< ::trans::UpdateBotMessage*>(
      ::trans::UpdateBotMessage::internal_default_instance());
}
class ServerToUserMessage::_Internal {
 public:
  static const ::trans::NewPlayerMessage& np_msg(const ServerToUserMessage* msg);
  static const ::trans::UpdatePlayerMessage& upd_msg(const ServerToUserMessage* msg);
  static const ::trans::NewBulletMessage& nb_msg(const ServerToUserMessage* msg);
  static const ::trans::UpdateBulletMessage& ub_msg(const ServerToUserMessage* msg);
  static const ::trans::NewBotMessage& n_bot_msg(const ServerToUserMessage* msg);
  static const ::trans::UpdateBotMessage& u_bot_msg(const ServerToUserMessage* msg);
};

const ::trans::NewPlayerMessage&
ServerToUserMessage::_Internal::np_msg(const ServerToUserMessage* msg) {
  return *msg->np_msg_;
}
const ::trans::UpdatePlayerMessage&
ServerToUserMessage::_Internal::upd_msg(const ServerToUserMessage* msg) {
  return *msg->upd_msg_;
}
const ::trans::NewBulletMessage&
ServerToUserMessage::_Internal::nb_msg(const ServerToUserMessage* msg) {
  return *msg->nb_msg_;
}
const ::trans::UpdateBulletMessage&
ServerToUserMessage::_Internal::ub_msg(const ServerToUserMessage* msg) {
  return *msg->ub_msg_;
}
const ::trans::NewBotMessage&
ServerToUserMessage::_Internal::n_bot_msg(const ServerToUserMessage* msg) {
  return *msg->n_bot_msg_;
}
const ::trans::UpdateBotMessage&
ServerToUserMessage::_Internal::u_bot_msg(const ServerToUserMessage* msg) {
  return *msg->u_bot_msg_;
}
ServerToUserMessage::ServerToUserMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trans.ServerToUserMessage)
}
ServerToUserMessage::ServerToUserMessage(const ServerToUserMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_np_msg()) {
    np_msg_ = new ::trans::NewPlayerMessage(*from.np_msg_);
  } else {
    np_msg_ = nullptr;
  }
  if (from._internal_has_upd_msg()) {
    upd_msg_ = new ::trans::UpdatePlayerMessage(*from.upd_msg_);
  } else {
    upd_msg_ = nullptr;
  }
  if (from._internal_has_nb_msg()) {
    nb_msg_ = new ::trans::NewBulletMessage(*from.nb_msg_);
  } else {
    nb_msg_ = nullptr;
  }
  if (from._internal_has_ub_msg()) {
    ub_msg_ = new ::trans::UpdateBulletMessage(*from.ub_msg_);
  } else {
    ub_msg_ = nullptr;
  }
  if (from._internal_has_n_bot_msg()) {
    n_bot_msg_ = new ::trans::NewBotMessage(*from.n_bot_msg_);
  } else {
    n_bot_msg_ = nullptr;
  }
  if (from._internal_has_u_bot_msg()) {
    u_bot_msg_ = new ::trans::UpdateBotMessage(*from.u_bot_msg_);
  } else {
    u_bot_msg_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:trans.ServerToUserMessage)
}

void ServerToUserMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToUserMessage_transition_2eproto.base);
  ::memset(&np_msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&np_msg_)) + sizeof(type_));
}

ServerToUserMessage::~ServerToUserMessage() {
  // @@protoc_insertion_point(destructor:trans.ServerToUserMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToUserMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete np_msg_;
  if (this != internal_default_instance()) delete upd_msg_;
  if (this != internal_default_instance()) delete nb_msg_;
  if (this != internal_default_instance()) delete ub_msg_;
  if (this != internal_default_instance()) delete n_bot_msg_;
  if (this != internal_default_instance()) delete u_bot_msg_;
}

void ServerToUserMessage::ArenaDtor(void* object) {
  ServerToUserMessage* _this = reinterpret_cast< ServerToUserMessage* >(object);
  (void)_this;
}
void ServerToUserMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToUserMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToUserMessage& ServerToUserMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToUserMessage_transition_2eproto.base);
  return *internal_default_instance();
}


void ServerToUserMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.ServerToUserMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && np_msg_ != nullptr) {
    delete np_msg_;
  }
  np_msg_ = nullptr;
  if (GetArena() == nullptr && upd_msg_ != nullptr) {
    delete upd_msg_;
  }
  upd_msg_ = nullptr;
  if (GetArena() == nullptr && nb_msg_ != nullptr) {
    delete nb_msg_;
  }
  nb_msg_ = nullptr;
  if (GetArena() == nullptr && ub_msg_ != nullptr) {
    delete ub_msg_;
  }
  ub_msg_ = nullptr;
  if (GetArena() == nullptr && n_bot_msg_ != nullptr) {
    delete n_bot_msg_;
  }
  n_bot_msg_ = nullptr;
  if (GetArena() == nullptr && u_bot_msg_ != nullptr) {
    delete u_bot_msg_;
  }
  u_bot_msg_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToUserMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .trans.ServerToUserMessage.MessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::trans::ServerToUserMessage_MessageType>(val));
        } else goto handle_unusual;
        continue;
      // .trans.NewPlayerMessage np_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_np_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trans.UpdatePlayerMessage upd_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_upd_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trans.NewBulletMessage nb_msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_nb_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trans.UpdateBulletMessage ub_msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ub_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trans.NewBotMessage n_bot_msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_n_bot_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trans.UpdateBotMessage u_bot_msg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_u_bot_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToUserMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.ServerToUserMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .trans.ServerToUserMessage.MessageType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .trans.NewPlayerMessage np_msg = 2;
  if (this->has_np_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::np_msg(this), target, stream);
  }

  // .trans.UpdatePlayerMessage upd_msg = 3;
  if (this->has_upd_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::upd_msg(this), target, stream);
  }

  // .trans.NewBulletMessage nb_msg = 4;
  if (this->has_nb_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::nb_msg(this), target, stream);
  }

  // .trans.UpdateBulletMessage ub_msg = 5;
  if (this->has_ub_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ub_msg(this), target, stream);
  }

  // .trans.NewBotMessage n_bot_msg = 6;
  if (this->has_n_bot_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::n_bot_msg(this), target, stream);
  }

  // .trans.UpdateBotMessage u_bot_msg = 7;
  if (this->has_u_bot_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::u_bot_msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.ServerToUserMessage)
  return target;
}

size_t ServerToUserMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.ServerToUserMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trans.NewPlayerMessage np_msg = 2;
  if (this->has_np_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *np_msg_);
  }

  // .trans.UpdatePlayerMessage upd_msg = 3;
  if (this->has_upd_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upd_msg_);
  }

  // .trans.NewBulletMessage nb_msg = 4;
  if (this->has_nb_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nb_msg_);
  }

  // .trans.UpdateBulletMessage ub_msg = 5;
  if (this->has_ub_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ub_msg_);
  }

  // .trans.NewBotMessage n_bot_msg = 6;
  if (this->has_n_bot_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *n_bot_msg_);
  }

  // .trans.UpdateBotMessage u_bot_msg = 7;
  if (this->has_u_bot_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *u_bot_msg_);
  }

  // .trans.ServerToUserMessage.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToUserMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.ServerToUserMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToUserMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToUserMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.ServerToUserMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.ServerToUserMessage)
    MergeFrom(*source);
  }
}

void ServerToUserMessage::MergeFrom(const ServerToUserMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.ServerToUserMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_np_msg()) {
    _internal_mutable_np_msg()->::trans::NewPlayerMessage::MergeFrom(from._internal_np_msg());
  }
  if (from.has_upd_msg()) {
    _internal_mutable_upd_msg()->::trans::UpdatePlayerMessage::MergeFrom(from._internal_upd_msg());
  }
  if (from.has_nb_msg()) {
    _internal_mutable_nb_msg()->::trans::NewBulletMessage::MergeFrom(from._internal_nb_msg());
  }
  if (from.has_ub_msg()) {
    _internal_mutable_ub_msg()->::trans::UpdateBulletMessage::MergeFrom(from._internal_ub_msg());
  }
  if (from.has_n_bot_msg()) {
    _internal_mutable_n_bot_msg()->::trans::NewBotMessage::MergeFrom(from._internal_n_bot_msg());
  }
  if (from.has_u_bot_msg()) {
    _internal_mutable_u_bot_msg()->::trans::UpdateBotMessage::MergeFrom(from._internal_u_bot_msg());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ServerToUserMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.ServerToUserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToUserMessage::CopyFrom(const ServerToUserMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.ServerToUserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToUserMessage::IsInitialized() const {
  return true;
}

void ServerToUserMessage::InternalSwap(ServerToUserMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerToUserMessage, type_)
      + sizeof(ServerToUserMessage::type_)
      - PROTOBUF_FIELD_OFFSET(ServerToUserMessage, np_msg_)>(
          reinterpret_cast<char*>(&np_msg_),
          reinterpret_cast<char*>(&other->np_msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToUserMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToUserVectorMessage::InitAsDefaultInstance() {
}
class ServerToUserVectorMessage::_Internal {
 public:
};

ServerToUserVectorMessage::ServerToUserVectorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vec_messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trans.ServerToUserVectorMessage)
}
ServerToUserVectorMessage::ServerToUserVectorMessage(const ServerToUserVectorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vec_messages_(from.vec_messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trans.ServerToUserVectorMessage)
}

void ServerToUserVectorMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToUserVectorMessage_transition_2eproto.base);
}

ServerToUserVectorMessage::~ServerToUserVectorMessage() {
  // @@protoc_insertion_point(destructor:trans.ServerToUserVectorMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToUserVectorMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerToUserVectorMessage::ArenaDtor(void* object) {
  ServerToUserVectorMessage* _this = reinterpret_cast< ServerToUserVectorMessage* >(object);
  (void)_this;
}
void ServerToUserVectorMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToUserVectorMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToUserVectorMessage& ServerToUserVectorMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToUserVectorMessage_transition_2eproto.base);
  return *internal_default_instance();
}


void ServerToUserVectorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.ServerToUserVectorMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vec_messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToUserVectorMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .trans.ServerToUserMessage vec_messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToUserVectorMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.ServerToUserVectorMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .trans.ServerToUserMessage vec_messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vec_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.ServerToUserVectorMessage)
  return target;
}

size_t ServerToUserVectorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.ServerToUserVectorMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trans.ServerToUserMessage vec_messages = 1;
  total_size += 1UL * this->_internal_vec_messages_size();
  for (const auto& msg : this->vec_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToUserVectorMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.ServerToUserVectorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToUserVectorMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToUserVectorMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.ServerToUserVectorMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.ServerToUserVectorMessage)
    MergeFrom(*source);
  }
}

void ServerToUserVectorMessage::MergeFrom(const ServerToUserVectorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.ServerToUserVectorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vec_messages_.MergeFrom(from.vec_messages_);
}

void ServerToUserVectorMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.ServerToUserVectorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToUserVectorMessage::CopyFrom(const ServerToUserVectorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.ServerToUserVectorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToUserVectorMessage::IsInitialized() const {
  return true;
}

void ServerToUserVectorMessage::InternalSwap(ServerToUserVectorMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vec_messages_.InternalSwap(&other->vec_messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToUserVectorMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace trans
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::trans::UserToServerMessage_Direction* Arena::CreateMaybeMessage< ::trans::UserToServerMessage_Direction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trans::UserToServerMessage_Direction >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::UserToServerMessage_BulletDirection* Arena::CreateMaybeMessage< ::trans::UserToServerMessage_BulletDirection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trans::UserToServerMessage_BulletDirection >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::UserToServerMessage_Rect* Arena::CreateMaybeMessage< ::trans::UserToServerMessage_Rect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trans::UserToServerMessage_Rect >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::UserToServerMessage_Weapon* Arena::CreateMaybeMessage< ::trans::UserToServerMessage_Weapon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trans::UserToServerMessage_Weapon >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::UserToServerMessage* Arena::CreateMaybeMessage< ::trans::UserToServerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trans::UserToServerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::SessionCreatedMessage* Arena::CreateMaybeMessage< ::trans::SessionCreatedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trans::SessionCreatedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::UserInitMessage* Arena::CreateMaybeMessage< ::trans::UserInitMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trans::UserInitMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::NewPlayerMessage* Arena::CreateMaybeMessage< ::trans::NewPlayerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trans::NewPlayerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::UpdatePlayerMessage_Direction* Arena::CreateMaybeMessage< ::trans::UpdatePlayerMessage_Direction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trans::UpdatePlayerMessage_Direction >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::UpdatePlayerMessage_FireDirection* Arena::CreateMaybeMessage< ::trans::UpdatePlayerMessage_FireDirection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trans::UpdatePlayerMessage_FireDirection >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::UpdatePlayerMessage* Arena::CreateMaybeMessage< ::trans::UpdatePlayerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trans::UpdatePlayerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::NewBulletMessage* Arena::CreateMaybeMessage< ::trans::NewBulletMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trans::NewBulletMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::UpdateBulletMessage_Direction* Arena::CreateMaybeMessage< ::trans::UpdateBulletMessage_Direction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trans::UpdateBulletMessage_Direction >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::UpdateBulletMessage* Arena::CreateMaybeMessage< ::trans::UpdateBulletMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trans::UpdateBulletMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::ServerToUserLobbyWaitingMessage* Arena::CreateMaybeMessage< ::trans::ServerToUserLobbyWaitingMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trans::ServerToUserLobbyWaitingMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::UserToServerLobbyWaitingMessage* Arena::CreateMaybeMessage< ::trans::UserToServerLobbyWaitingMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trans::UserToServerLobbyWaitingMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::NewBotMessage* Arena::CreateMaybeMessage< ::trans::NewBotMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trans::NewBotMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::UpdateBotMessage* Arena::CreateMaybeMessage< ::trans::UpdateBotMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trans::UpdateBotMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::ServerToUserMessage* Arena::CreateMaybeMessage< ::trans::ServerToUserMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trans::ServerToUserMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::ServerToUserVectorMessage* Arena::CreateMaybeMessage< ::trans::ServerToUserVectorMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trans::ServerToUserVectorMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
